{"version":3,"file":"xterm-addon-canvas.js","mappings":"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","sources":["webpack://CanvasAddon/webpack/universalModuleDefinition","webpack://CanvasAddon/./src/BaseRenderLayer.ts","webpack://CanvasAddon/./src/CanvasRenderer.ts","webpack://CanvasAddon/./src/CursorRenderLayer.ts","webpack://CanvasAddon/./src/GridCache.ts","webpack://CanvasAddon/./src/LinkRenderLayer.ts","webpack://CanvasAddon/./src/SelectionRenderLayer.ts","webpack://CanvasAddon/./src/TextRenderLayer.ts","webpack://CanvasAddon/./src/atlas/BaseCharAtlas.ts","webpack://CanvasAddon/./src/atlas/CharAtlasCache.ts","webpack://CanvasAddon/./src/atlas/CharAtlasUtils.ts","webpack://CanvasAddon/./src/atlas/DynamicCharAtlas.ts","webpack://CanvasAddon/./src/atlas/LRUMap.ts","webpack://CanvasAddon/../../src/browser/ColorContrastCache.ts","webpack://CanvasAddon/../../src/browser/ColorManager.ts","webpack://CanvasAddon/../../src/browser/Dom.ts","webpack://CanvasAddon/../../src/browser/renderer/Constants.ts","webpack://CanvasAddon/../../src/browser/renderer/CustomGlyphs.ts","webpack://CanvasAddon/../../src/browser/renderer/DevicePixelObserver.ts","webpack://CanvasAddon/../../src/browser/renderer/RendererUtils.ts","webpack://CanvasAddon/../../src/browser/services/CharacterJoinerService.ts","webpack://CanvasAddon/../../src/common/Color.ts","webpack://CanvasAddon/../../src/common/EventEmitter.ts","webpack://CanvasAddon/../../src/common/Lifecycle.ts","webpack://CanvasAddon/../../src/common/MultiKeyMap.ts","webpack://CanvasAddon/../../src/common/Platform.ts","webpack://CanvasAddon/../../src/common/buffer/AttributeData.ts","webpack://CanvasAddon/../../src/common/buffer/CellData.ts","webpack://CanvasAddon/../../src/common/buffer/Constants.ts","webpack://CanvasAddon/../../src/common/input/TextDecoder.ts","webpack://CanvasAddon/../../src/common/services/ServiceRegistry.ts","webpack://CanvasAddon/../../src/common/services/Services.ts","webpack://CanvasAddon/webpack/bootstrap","webpack://CanvasAddon/./src/CanvasAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CanvasAddon\"] = factory();\n\telse\n\t\troot[\"CanvasAddon\"] = factory();\n})(self, function() {\nreturn ","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { IRenderLayer } from './Types';\nimport { ICellData, IColor } from 'common/Types';\nimport { DEFAULT_COLOR, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_CODE, Attributes } from 'common/buffer/Constants';\nimport { IGlyphIdentifier } from './atlas/Types';\nimport { DIM_OPACITY, INVERTED_DEFAULT_COLOR, TEXT_BASELINE } from 'browser/renderer/Constants';\nimport { BaseCharAtlas } from './atlas/BaseCharAtlas';\nimport { acquireCharAtlas } from './atlas/CharAtlasCache';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { IColorSet } from 'browser/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { ICoreBrowserService } from 'browser/services/Services';\nimport { excludeFromContrastRatioDemands, throwIfFalsy } from 'browser/renderer/RendererUtils';\nimport { channels, color, rgba } from 'common/Color';\nimport { removeElementFromParent } from 'browser/Dom';\nimport { tryDrawCustomChar } from 'browser/renderer/CustomGlyphs';\n\nexport abstract class BaseRenderLayer implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _scaledCharWidth: number = 0;\n  private _scaledCharHeight: number = 0;\n  private _scaledCellWidth: number = 0;\n  private _scaledCellHeight: number = 0;\n  private _scaledCharLeft: number = 0;\n  private _scaledCharTop: number = 0;\n\n  protected _selectionStart: [number, number] | undefined;\n  protected _selectionEnd: [number, number] | undefined;\n  protected _columnSelectMode: boolean = false;\n\n  protected _charAtlas: BaseCharAtlas | undefined;\n\n  /**\n   * An object that's reused when drawing glyphs in order to reduce GC.\n   */\n  private _currentGlyphIdentifier: IGlyphIdentifier = {\n    chars: '',\n    code: 0,\n    bg: 0,\n    fg: 0,\n    bold: false,\n    dim: false,\n    italic: false\n  };\n\n  public get canvas(): HTMLCanvasElement { return this._canvas; }\n\n  constructor(\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected _colors: IColorSet,\n    private _rendererId: number,\n    protected readonly _bufferService: IBufferService,\n    protected readonly _optionsService: IOptionsService,\n    protected readonly _decorationService: IDecorationService,\n    protected readonly _coreBrowserService: ICoreBrowserService\n  ) {\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n  }\n\n  public dispose(): void {\n    removeElementFromParent(this._canvas);\n    this._charAtlas?.dispose();\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', { alpha: this._alpha }));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public onOptionsChanged(): void {}\n  public onBlur(): void {}\n  public onFocus(): void {}\n  public onCursorMove(): void {}\n  public onGridChanged(startRow: number, endRow: number): void {}\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    this._selectionStart = start;\n    this._selectionEnd = end;\n    this._columnSelectMode = columnSelectMode;\n  }\n\n  public setColors(colorSet: IColorSet): void {\n    this._refreshCharAtlas(colorSet);\n  }\n\n  protected _setTransparency(alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(this._colors);\n    this.onGridChanged(0, this._bufferService.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(colorSet: IColorSet): void {\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireCharAtlas(this._optionsService.rawOptions, this._rendererId, colorSet, this._scaledCharWidth, this._scaledCharHeight, this._coreBrowserService.dpr);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = `${dim.canvasWidth}px`;\n    this._canvas.style.height = `${dim.canvasHeight}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(this._colors);\n  }\n\n  public abstract reset(): void;\n\n  public clearTextureAtlas(): void {\n    this._charAtlas?.clear();\n  }\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      width * this._scaledCellWidth,\n      height * this._scaledCellHeight);\n  }\n\n  /**\n     * Fills a 1px line (2px on HDPI) at the middle of the cell. This uses the\n     * existing fillStyle on the context.\n     * @param x The column to fill.\n     * @param y The row to fill.\n     */\n  protected _fillMiddleLineAtCells(x: number, y: number, width: number = 1): void {\n    const cellOffset = Math.ceil(this._scaledCellHeight * 0.5);\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight - cellOffset - this._coreBrowserService.dpr,\n      width * this._scaledCellWidth,\n      this._coreBrowserService.dpr);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1, pixelOffset: number = 0): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight + pixelOffset - this._coreBrowserService.dpr - 1 /* Ensure it's drawn within the cell */,\n      width * this._scaledCellWidth,\n      this._coreBrowserService.dpr);\n  }\n\n  protected _curlyUnderlineAtCell(x: number, y: number, width: number = 1): void {\n    this._ctx.save();\n    this._ctx.beginPath();\n    this._ctx.strokeStyle = this._ctx.fillStyle;\n    const lineWidth = this._coreBrowserService.dpr;\n    this._ctx.lineWidth = lineWidth;\n    for (let xOffset = 0; xOffset < width; xOffset++) {\n      const xLeft = (x + xOffset) * this._scaledCellWidth;\n      const xMid = (x + xOffset + 0.5) * this._scaledCellWidth;\n      const xRight = (x + xOffset + 1) * this._scaledCellWidth;\n      const yMid = (y + 1) * this._scaledCellHeight - lineWidth - 1;\n      const yMidBot = yMid - lineWidth;\n      const yMidTop = yMid + lineWidth;\n      this._ctx.moveTo(xLeft, yMid);\n      this._ctx.bezierCurveTo(\n        xLeft, yMidBot,\n        xMid, yMidBot,\n        xMid, yMid\n      );\n      this._ctx.bezierCurveTo(\n        xMid, yMidTop,\n        xRight, yMidTop,\n        xRight, yMid\n      );\n    }\n    this._ctx.stroke();\n    this._ctx.restore();\n  }\n\n  protected _dottedUnderlineAtCell(x: number, y: number, width: number = 1): void {\n    this._ctx.save();\n    this._ctx.beginPath();\n    this._ctx.strokeStyle = this._ctx.fillStyle;\n    const lineWidth = this._coreBrowserService.dpr;\n    this._ctx.lineWidth = lineWidth;\n    this._ctx.setLineDash([lineWidth * 2, lineWidth]);\n    const xLeft = x * this._scaledCellWidth;\n    const yMid = (y + 1) * this._scaledCellHeight - lineWidth - 1;\n    this._ctx.moveTo(xLeft, yMid);\n    for (let xOffset = 0; xOffset < width; xOffset++) {\n      // const xLeft = x * this._scaledCellWidth;\n      const xRight = (x + width + xOffset) * this._scaledCellWidth;\n      this._ctx.lineTo(xRight, yMid);\n    }\n    this._ctx.stroke();\n    this._ctx.closePath();\n    this._ctx.restore();\n  }\n\n  protected _dashedUnderlineAtCell(x: number, y: number, width: number = 1): void {\n    this._ctx.save();\n    this._ctx.beginPath();\n    this._ctx.strokeStyle = this._ctx.fillStyle;\n    const lineWidth = this._coreBrowserService.dpr;\n    this._ctx.lineWidth = lineWidth;\n    this._ctx.setLineDash([lineWidth * 4, lineWidth * 3]);\n    const xLeft = x * this._scaledCellWidth;\n    const xRight = (x + width) * this._scaledCellWidth;\n    const yMid = (y + 1) * this._scaledCellHeight - lineWidth - 1;\n    this._ctx.moveTo(xLeft, yMid);\n    this._ctx.lineTo(xRight, yMid);\n    this._ctx.stroke();\n    this._ctx.closePath();\n    this._ctx.restore();\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillLeftLineAtCell(x: number, y: number, width: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      this._coreBrowserService.dpr * width,\n      this._scaledCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    const lineWidth = this._coreBrowserService.dpr;\n    this._ctx.lineWidth = lineWidth;\n    this._ctx.strokeRect(\n      x * this._scaledCellWidth + lineWidth / 2,\n      y * this._scaledCellHeight + (lineWidth / 2),\n      width * this._scaledCellWidth - lineWidth,\n      (height * this._scaledCellHeight) - lineWidth);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param color The color of the character.\n   */\n  protected _fillCharTrueColor(cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(false, false);\n    this._ctx.textBaseline = TEXT_BASELINE;\n    this._clipRow(y);\n\n    // Draw custom characters if applicable\n    let drawSuccess = false;\n    if (this._optionsService.rawOptions.customGlyphs !== false) {\n      drawSuccess = tryDrawCustomChar(this._ctx, cell.getChars(), x * this._scaledCellWidth, y * this._scaledCellHeight, this._scaledCellWidth, this._scaledCellHeight, this._optionsService.rawOptions.fontSize, this._coreBrowserService.dpr);\n    }\n\n    // Draw the character\n    if (!drawSuccess) {\n      this._ctx.fillText(\n        cell.getChars(),\n        x * this._scaledCellWidth + this._scaledCharLeft,\n        y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight);\n    }\n  }\n\n  /**\n   * Draws one or more characters at a cell. If possible this will draw using\n   * the character atlas to reduce draw time.\n   * @param chars The character or characters.\n   * @param code The character code.\n   * @param width The width of the characters.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param fg The foreground color, in the format stored within the attributes.\n   * @param bg The background color, in the format stored within the attributes.\n   * This is used to validate whether a cached image can be used.\n   * @param bold Whether the text is bold.\n   */\n  protected _drawChars(cell: ICellData, x: number, y: number): void {\n    const contrastColor = this._getContrastColor(cell, x, y);\n\n    // skip cache right away if we draw in RGB\n    // Note: to avoid bad runtime JoinedCellData will be skipped\n    //       in the cache handler itself (atlasDidDraw == false) and\n    //       fall through to uncached later down below\n    if (contrastColor || cell.isFgRGB() || cell.isBgRGB()) {\n      this._drawUncachedChars(cell, x, y, contrastColor);\n      return;\n    }\n\n    let fg;\n    let bg;\n    if (cell.isInverse()) {\n      fg = (cell.isBgDefault()) ? INVERTED_DEFAULT_COLOR : cell.getBgColor();\n      bg = (cell.isFgDefault()) ? INVERTED_DEFAULT_COLOR : cell.getFgColor();\n    } else {\n      bg = (cell.isBgDefault()) ? DEFAULT_COLOR : cell.getBgColor();\n      fg = (cell.isFgDefault()) ? DEFAULT_COLOR : cell.getFgColor();\n    }\n\n    const drawInBrightColor = this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8;\n\n    fg += drawInBrightColor ? 8 : 0;\n    this._currentGlyphIdentifier.chars = cell.getChars() || WHITESPACE_CELL_CHAR;\n    this._currentGlyphIdentifier.code = cell.getCode() || WHITESPACE_CELL_CODE;\n    this._currentGlyphIdentifier.bg = bg;\n    this._currentGlyphIdentifier.fg = fg;\n    this._currentGlyphIdentifier.bold = !!cell.isBold();\n    this._currentGlyphIdentifier.dim = !!cell.isDim();\n    this._currentGlyphIdentifier.italic = !!cell.isItalic();\n\n    // Don't try cache the glyph if it uses any decoration foreground/background override.\n    let hasOverrides = false;\n    this._decorationService.forEachDecorationAtCell(x, y, undefined, d => {\n      if (d.backgroundColorRGB || d.foregroundColorRGB) {\n        hasOverrides = true;\n      }\n    });\n\n    const atlasDidDraw = hasOverrides ? false : this._charAtlas?.draw(this._ctx, this._currentGlyphIdentifier, x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop);\n\n    if (!atlasDidDraw) {\n      this._drawUncachedChars(cell, x, y);\n    }\n  }\n\n  /**\n   * Draws one or more characters at one or more cells. The character(s) will be\n   * clipped to ensure that they fit with the cell(s), including the cell to the\n   * right if the last character is a wide character.\n   * @param chars The character.\n   * @param width The width of the character.\n   * @param fg The foreground color, in the format stored within the attributes.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   */\n  private _drawUncachedChars(cell: ICellData, x: number, y: number, fgOverride?: IColor): void {\n    this._ctx.save();\n    this._ctx.font = this._getFont(!!cell.isBold(), !!cell.isItalic());\n    this._ctx.textBaseline = TEXT_BASELINE;\n\n    if (cell.isInverse()) {\n      if (fgOverride) {\n        this._ctx.fillStyle = fgOverride.css;\n      } else if (cell.isBgDefault()) {\n        this._ctx.fillStyle = color.opaque(this._colors.background).css;\n      } else if (cell.isBgRGB()) {\n        this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\n      } else {\n        let bg = cell.getBgColor();\n        if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && bg < 8) {\n          bg += 8;\n        }\n        this._ctx.fillStyle = this._colors.ansi[bg].css;\n      }\n    } else {\n      if (fgOverride) {\n        this._ctx.fillStyle = fgOverride.css;\n      } else if (cell.isFgDefault()) {\n        this._ctx.fillStyle = this._colors.foreground.css;\n      } else if (cell.isFgRGB()) {\n        this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\n      } else {\n        let fg = cell.getFgColor();\n        if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n          fg += 8;\n        }\n        this._ctx.fillStyle = this._colors.ansi[fg].css;\n      }\n    }\n\n    this._clipRow(y);\n\n    // Apply alpha to dim the character\n    if (cell.isDim()) {\n      this._ctx.globalAlpha = DIM_OPACITY;\n    }\n\n    // Draw custom characters if applicable\n    let drawSuccess = false;\n    if (this._optionsService.rawOptions.customGlyphs !== false) {\n      drawSuccess = tryDrawCustomChar(this._ctx, cell.getChars(), x * this._scaledCellWidth, y * this._scaledCellHeight, this._scaledCellWidth, this._scaledCellHeight, this._optionsService.rawOptions.fontSize, this._coreBrowserService.dpr);\n    }\n\n    // Draw the character\n    if (!drawSuccess) {\n      this._ctx.fillText(\n        cell.getChars(),\n        x * this._scaledCellWidth + this._scaledCharLeft,\n        y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight);\n    }\n\n    this._ctx.restore();\n  }\n\n\n  /**\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\n   * @param y The row to clip.\n   */\n  private _clipRow(y: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n      0,\n      y * this._scaledCellHeight,\n      this._bufferService.cols * this._scaledCellWidth,\n      this._scaledCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? this._optionsService.rawOptions.fontWeightBold : this._optionsService.rawOptions.fontWeight;\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${this._optionsService.rawOptions.fontSize * this._coreBrowserService.dpr}px ${this._optionsService.rawOptions.fontFamily}`;\n  }\n\n  private _getContrastColor(cell: CellData, x: number, y: number): IColor | undefined {\n    // Get any decoration foreground/background overrides, this must be fetched before the early\n    // exist but applied after inverse\n    let bgOverride: number | undefined;\n    let fgOverride: number | undefined;\n    let isTop = false;\n    this._decorationService.forEachDecorationAtCell(x, y, undefined, d => {\n      if (d.options.layer !== 'top' && isTop) {\n        return;\n      }\n      if (d.backgroundColorRGB) {\n        bgOverride = d.backgroundColorRGB.rgba;\n      }\n      if (d.foregroundColorRGB) {\n        fgOverride = d.foregroundColorRGB.rgba;\n      }\n      isTop = d.options.layer === 'top';\n    });\n\n    // Apply selection foreground if applicable\n    if (!isTop) {\n      if (this._colors.selectionForeground && this._isCellInSelection(x, y)) {\n        fgOverride = this._colors.selectionForeground.rgba;\n      }\n    }\n\n    if (!bgOverride && !fgOverride && (this._optionsService.rawOptions.minimumContrastRatio === 1 || excludeFromContrastRatioDemands(cell.getCode()))) {\n      return undefined;\n    }\n\n    if (!bgOverride && !fgOverride) {\n      // Try get from cache\n      const adjustedColor = this._colors.contrastCache.getColor(cell.bg, cell.fg);\n      if (adjustedColor !== undefined) {\n        return adjustedColor || undefined;\n      }\n    }\n\n    let fgColor = cell.getFgColor();\n    let fgColorMode = cell.getFgColorMode();\n    let bgColor = cell.getBgColor();\n    let bgColorMode = cell.getBgColorMode();\n    const isInverse = !!cell.isInverse();\n    const isBold = !!cell.isInverse();\n    if (isInverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgOverride !== undefined ? Attributes.CM_RGB : bgColorMode, bgOverride ?? bgColor, isInverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, isInverse, isBold);\n    let result = rgba.ensureContrastRatio(bgOverride ?? bgRgba, fgOverride ?? fgRgba, this._optionsService.rawOptions.minimumContrastRatio);\n\n    if (!result) {\n      if (!fgOverride) {\n        this._colors.contrastCache.setColor(cell.bg, cell.fg, null);\n        return undefined;\n      }\n      // If it was an override and there was no contrast change, set as the result\n      result = fgOverride;\n    }\n\n    const color: IColor = {\n      css: channels.toCss(\n        (result >> 24) & 0xFF,\n        (result >> 16) & 0xFF,\n        (result >> 8) & 0xFF\n      ),\n      rgba: result\n    };\n    if (!bgOverride && !fgOverride) {\n      this._colors.contrastCache.setColor(cell.bg, cell.fg, color);\n    }\n\n    return color;\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._colors.ansi[bgColor].rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._colors.foreground.rgba;\n        }\n        return this._colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._optionsService.rawOptions.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._colors.ansi[fgColor].rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._colors.background.rgba;\n        }\n        return this._colors.foreground.rgba;\n    }\n  }\n\n  private _isCellInSelection(x: number, y: number): boolean {\n    const start = this._selectionStart;\n    const end = this._selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    if (this._columnSelectMode) {\n      return x >= start[0] && y >= start[1] &&\n        x < end[0] && y < end[1];\n    }\n    return (y > start[1] && y < end[1]) ||\n        (start[1] === end[1] && y === start[1] && x >= start[0] && x < end[0]) ||\n        (start[1] < end[1] && y === end[1] && x < end[0]) ||\n        (start[1] < end[1] && y === start[1] && x >= start[0]);\n  }\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { TextRenderLayer } from './TextRenderLayer';\nimport { SelectionRenderLayer } from './SelectionRenderLayer';\nimport { CursorRenderLayer } from './CursorRenderLayer';\nimport { IRenderer, IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { IRenderLayer } from './Types';\nimport { LinkRenderLayer } from './LinkRenderLayer';\nimport { Disposable } from 'common/Lifecycle';\nimport { IColorSet, ILinkifier2 } from 'browser/Types';\nimport { ICharacterJoinerService, ICharSizeService, ICoreBrowserService } from 'browser/services/Services';\nimport { IBufferService, IOptionsService, IDecorationService, ICoreService } from 'common/services/Services';\nimport { removeTerminalFromCache } from './atlas/CharAtlasCache';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { observeDevicePixelDimensions } from 'browser/renderer/DevicePixelObserver';\n\nlet nextRendererId = 1;\n\nexport class CanvasRenderer extends Disposable implements IRenderer {\n  private _id = nextRendererId++;\n\n  private _renderLayers: IRenderLayer[];\n  private _devicePixelRatio: number;\n\n  public dimensions: IRenderDimensions;\n\n  private _onRequestRedraw = new EventEmitter<IRequestRedrawEvent>();\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return this._onRequestRedraw.event; }\n\n  constructor(\n    private _colors: IColorSet,\n    private readonly _screenElement: HTMLElement,\n    linkifier2: ILinkifier2,\n    private readonly _bufferService: IBufferService,\n    private readonly _charSizeService: ICharSizeService,\n    private readonly _optionsService: IOptionsService,\n    characterJoinerService: ICharacterJoinerService,\n    coreService: ICoreService,\n    private readonly _coreBrowserService: ICoreBrowserService,\n    decorationService: IDecorationService\n  ) {\n    super();\n    const allowTransparency = this._optionsService.rawOptions.allowTransparency;\n    this._renderLayers = [\n      new TextRenderLayer(this._screenElement, 0, this._colors, allowTransparency, this._id, this._bufferService, this._optionsService, characterJoinerService, decorationService, this._coreBrowserService),\n      new SelectionRenderLayer(this._screenElement, 1, this._colors, this._id, this._bufferService, this._coreBrowserService, decorationService, this._optionsService),\n      new LinkRenderLayer(this._screenElement, 2, this._colors, this._id, linkifier2, this._bufferService, this._optionsService, decorationService, this._coreBrowserService),\n      new CursorRenderLayer(this._screenElement, 3, this._colors, this._id, this._onRequestRedraw, this._bufferService, this._optionsService, coreService, this._coreBrowserService, decorationService)\n    ];\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._devicePixelRatio = this._coreBrowserService.dpr;\n    this._updateDimensions();\n\n    this.register(observeDevicePixelDimensions(this._renderLayers[0].canvas, this._coreBrowserService.window, (w, h) => this._setCanvasDevicePixelDimensions(w, h)));\n\n    this.onOptionsChanged();\n  }\n\n  public dispose(): void {\n    for (const l of this._renderLayers) {\n      l.dispose();\n    }\n    super.dispose();\n    removeTerminalFromCache(this._id);\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== this._coreBrowserService.dpr) {\n      this._devicePixelRatio = this._coreBrowserService.dpr;\n      this.onResize(this._bufferService.cols, this._bufferService.rows);\n    }\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    // Clear layers and force a full render\n    for (const l of this._renderLayers) {\n      l.setColors(this._colors);\n      l.reset();\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    // Resize all render layers\n    for (const l of this._renderLayers) {\n      l.resize(this.dimensions);\n    }\n\n    // Resize the screen\n    this._screenElement.style.width = `${this.dimensions.canvasWidth}px`;\n    this._screenElement.style.height = `${this.dimensions.canvasHeight}px`;\n  }\n\n  public onCharSizeChanged(): void {\n    this.onResize(this._bufferService.cols, this._bufferService.rows);\n  }\n\n  public onBlur(): void {\n    this._runOperation(l => l.onBlur());\n  }\n\n  public onFocus(): void {\n    this._runOperation(l => l.onFocus());\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    this._runOperation(l => l.onSelectionChanged(start, end, columnSelectMode));\n    // Selection foreground requires a full re-render\n    if (this._colors.selectionForeground) {\n      this._onRequestRedraw.fire({ start: 0, end: this._bufferService.rows - 1 });\n    }\n  }\n\n  public onCursorMove(): void {\n    this._runOperation(l => l.onCursorMove());\n  }\n\n  public onOptionsChanged(): void {\n    this._runOperation(l => l.onOptionsChanged());\n  }\n\n  public clear(): void {\n    this._runOperation(l => l.reset());\n  }\n\n  private _runOperation(operation: (layer: IRenderLayer) => void): void {\n    for (const l of this._renderLayers) {\n      operation(l);\n    }\n  }\n\n  /**\n   * Performs the refresh loop callback, calling refresh only if a refresh is\n   * necessary before queueing up the next one.\n   */\n  public renderRows(start: number, end: number): void {\n    for (const l of this._renderLayers) {\n      l.onGridChanged(start, end);\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    for (const layer of this._renderLayers) {\n      layer.clearTextureAtlas();\n    }\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    if (!this._charSizeService.hasValidSize) {\n      return;\n    }\n\n    // See the WebGL renderer for an explanation of this section.\n    const dpr = this._coreBrowserService.dpr;\n    this.dimensions.scaledCharWidth = Math.floor(this._charSizeService.width * dpr);\n    this.dimensions.scaledCharHeight = Math.ceil(this._charSizeService.height * dpr);\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._optionsService.rawOptions.lineHeight);\n    this.dimensions.scaledCharTop = this._optionsService.rawOptions.lineHeight === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._optionsService.rawOptions.letterSpacing);\n    this.dimensions.scaledCharLeft = Math.floor(this._optionsService.rawOptions.letterSpacing / 2);\n    this.dimensions.scaledCanvasHeight = this._bufferService.rows * this.dimensions.scaledCellHeight;\n    this.dimensions.scaledCanvasWidth = this._bufferService.cols * this.dimensions.scaledCellWidth;\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / dpr);\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / dpr);\n    this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._bufferService.rows;\n    this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._bufferService.cols;\n  }\n\n  private _setCanvasDevicePixelDimensions(width: number, height: number): void {\n    this.dimensions.scaledCanvasHeight = height;\n    this.dimensions.scaledCanvasWidth = width;\n    // Resize all render layers\n    for (const l of this._renderLayers) {\n      l.resize(this.dimensions);\n    }\n    this._requestRedrawViewport();\n  }\n\n  private _requestRedrawViewport(): void {\n    this._onRequestRedraw.fire({ start: 0, end: this._bufferService.rows - 1 });\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IColorSet } from 'browser/Types';\nimport { IBufferService, IOptionsService, ICoreService, IDecorationService } from 'common/services/Services';\nimport { IEventEmitter } from 'common/EventEmitter';\nimport { ICoreBrowserService } from 'browser/services/Services';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (x: number, y: number, cell: ICellData) => void};\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\n  private _cell: ICellData = new CellData();\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    rendererId: number,\n    private readonly _onRequestRedraw: IEventEmitter<IRequestRedrawEvent>,\n    bufferService: IBufferService,\n    optionsService: IOptionsService,\n    private readonly _coreService: ICoreService,\n    coreBrowserService: ICoreBrowserService,\n    decorationService: IDecorationService\n  ) {\n    super(container, 'cursor', zIndex, true, colors, rendererId, bufferService, optionsService, decorationService, coreBrowserService);\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this)\n    };\n  }\n\n  public dispose(): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    super.dispose();\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n  }\n\n  public reset(): void {\n    this._clearCursor();\n    this._cursorBlinkStateManager?.restartBlinkAnimation();\n    this.onOptionsChanged();\n  }\n\n  public onBlur(): void {\n    this._cursorBlinkStateManager?.pause();\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public onFocus(): void {\n    this._cursorBlinkStateManager?.resume();\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public onOptionsChanged(): void {\n    if (this._optionsService.rawOptions.cursorBlink) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(this._coreBrowserService.isFocused, () => {\n          this._render(true);\n        }, this._coreBrowserService);\n      }\n    } else {\n      this._cursorBlinkStateManager?.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public onCursorMove(): void {\n    this._cursorBlinkStateManager?.restartBlinkAnimation();\n  }\n\n  public onGridChanged(startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation();\n    }\n  }\n\n  private _render(triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    if (!this._coreService.isCursorInitialized || this._coreService.isCursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = this._bufferService.buffer.ybase + this._bufferService.buffer.y;\n    const viewportRelativeCursorY = cursorY - this._bufferService.buffer.ydisp;\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= this._bufferService.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    // in case cursor.x == cols adjust visual cursor to cols - 1\n    const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n    this._bufferService.buffer.lines.get(cursorY)!.loadCell(cursorX, this._cell);\n    if (this._cell.content === undefined) {\n      return;\n    }\n\n    if (!this._coreBrowserService.isFocused) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._colors.cursor.css;\n      const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n      if (cursorStyle && cursorStyle !== 'block') {\n        this._cursorRenderers[cursorStyle](cursorX, viewportRelativeCursorY, this._cell);\n      } else {\n        this._renderBlurCursor(cursorX, viewportRelativeCursorY, this._cell);\n      }\n      this._ctx.restore();\n      this._state.x = cursorX;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = cursorStyle;\n      this._state.width = this._cell.getWidth();\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === cursorX &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === this._coreBrowserService.isFocused &&\n          this._state.style === this._optionsService.rawOptions.cursorStyle &&\n          this._state.width === this._cell.getWidth()) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[this._optionsService.rawOptions.cursorStyle || 'block'](cursorX, viewportRelativeCursorY, this._cell);\n    this._ctx.restore();\n\n    this._state.x = cursorX;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = this._optionsService.rawOptions.cursorStyle;\n    this._state.width = this._cell.getWidth();\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      // Avoid potential rounding errors when device pixel ratio is less than 1\n      if (this._coreBrowserService.dpr < 1) {\n        this._clearAll();\n      } else {\n        this._clearCells(this._state.x, this._state.y, this._state.width, 1);\n      }\n      this._state = {\n        x: 0,\n        y: 0,\n        isFocused: false,\n        style: '',\n        width: 0\n      };\n    }\n  }\n\n  private _renderBarCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillLeftLineAtCell(x, y, this._optionsService.rawOptions.cursorWidth);\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillCells(x, y, cell.getWidth(), 1);\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\n    this._fillCharTrueColor(cell, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlurCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._colors.cursor.css;\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\n    this._ctx.restore();\n  }\n}\n\nclass CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    isFocused: boolean,\n    private _renderCallback: () => void,\n    private _coreBrowserService: ICoreBrowserService\n  ) {\n    this.isCursorVisible = true;\n    if (isFocused) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = this._coreBrowserService.window.setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = this._coreBrowserService.window.setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(): void {\n    // Clear out any existing timers just in case\n    this.pause();\n\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation();\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class GridCache<T> {\n  public cache: (T | undefined)[][];\n\n  public constructor() {\n    this.cache = [];\n  }\n\n  public resize(width: number, height: number): void {\n    for (let x = 0; x < width; x++) {\n      if (this.cache.length <= x) {\n        this.cache.push([]);\n      }\n      for (let y = this.cache[x].length; y < height; y++) {\n        this.cache[x].push(undefined);\n      }\n      this.cache[x].length = height;\n    }\n    this.cache.length = width;\n  }\n\n  public clear(): void {\n    for (let x = 0; x < this.cache.length; x++) {\n      for (let y = 0; y < this.cache[x].length; y++) {\n        this.cache[x][y] = undefined;\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/Constants';\nimport { ICoreBrowserService } from 'browser/services/Services';\nimport { is256Color } from './atlas/CharAtlasUtils';\nimport { IColorSet, ILinkifierEvent, ILinkifier2 } from 'browser/Types';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    rendererId: number,\n    linkifier2: ILinkifier2,\n    bufferService: IBufferService,\n    optionsService: IOptionsService,\n    decorationService: IDecorationService,\n    coreBrowserService: ICoreBrowserService\n  ) {\n    super(container, 'link', zIndex, true, colors, rendererId, bufferService, optionsService, decorationService, coreBrowserService);\n\n    linkifier2.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    linkifier2.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _onShowLinkUnderline(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background.css;\n    } else if (e.fg && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._colors.ansi[e.fg].css;\n    } else {\n      this._ctx.fillStyle = this._colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _onHideLinkUnderline(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { IColorSet } from 'browser/Types';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { ICoreBrowserService } from 'browser/services/Services';\n\ninterface ISelectionState {\n  start?: [number, number];\n  end?: [number, number];\n  columnSelectMode?: boolean;\n  ydisp?: number;\n}\n\nexport class SelectionRenderLayer extends BaseRenderLayer {\n  private _state!: ISelectionState;\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    rendererId: number,\n    bufferService: IBufferService,\n    coreBrowserService: ICoreBrowserService,\n    decorationService: IDecorationService,\n    optionsService: IOptionsService\n  ) {\n    super(container, 'selection', zIndex, true, colors, rendererId, bufferService, optionsService, decorationService, coreBrowserService);\n    this._clearState();\n  }\n\n  private _clearState(): void {\n    this._state = {\n      start: undefined,\n      end: undefined,\n      columnSelectMode: undefined,\n      ydisp: undefined\n    };\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // On resize use the base render layer's cached selection values since resize clears _state\n    // inside reset.\n    if (this._selectionStart && this._selectionEnd) {\n      this._redrawSelection(this._selectionStart, this._selectionEnd, this._columnSelectMode);\n    }\n  }\n\n  public reset(): void {\n    if (this._state.start && this._state.end) {\n      this._clearState();\n      this._clearAll();\n    }\n  }\n\n  public onBlur(): void {\n    this.reset();\n    this._redrawSelection(this._selectionStart, this._selectionEnd, this._columnSelectMode);\n  }\n\n  public onFocus(): void {\n    this.reset();\n    this._redrawSelection(this._selectionStart, this._selectionEnd, this._columnSelectMode);\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    super.onSelectionChanged(start, end, columnSelectMode);\n    this._redrawSelection(start, end, columnSelectMode);\n  }\n\n  private _redrawSelection(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    // Selection has not changed\n    if (!this._didStateChange(start, end, columnSelectMode, this._bufferService.buffer.ydisp)) {\n      return;\n    }\n\n    // Remove all selections\n    this._clearAll();\n\n    // Selection does not exist\n    if (!start || !end) {\n      this._clearState();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - this._bufferService.buffer.ydisp;\n    const viewportEndRow = end[1] - this._bufferService.buffer.ydisp;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._bufferService.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\n      this._state.ydisp = this._bufferService.buffer.ydisp;\n      return;\n    }\n\n    this._ctx.fillStyle = (this._coreBrowserService.isFocused\n      ? this._colors.selectionBackgroundTransparent\n      : this._colors.selectionInactiveBackgroundTransparent).css;\n\n    if (columnSelectMode) {\n      const startCol = start[0];\n      const width = end[0] - startCol;\n      const height = viewportCappedEndRow - viewportCappedStartRow + 1;\n      this._fillCells(startCol, viewportCappedStartRow, width, height);\n    } else {\n      // Draw first row\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n      const startRowEndCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\n      this._fillCells(startCol, viewportCappedStartRow, startRowEndCol - startCol, 1);\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(viewportCappedEndRow - viewportCappedStartRow - 1, 0);\n      this._fillCells(0, viewportCappedStartRow + 1, this._bufferService.cols, middleRowsCount);\n\n      // Draw final row\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\n        this._fillCells(0, viewportCappedEndRow, endCol, 1);\n      }\n    }\n\n    // Save state for next render\n    this._state.start = [start[0], start[1]];\n    this._state.end = [end[0], end[1]];\n    this._state.columnSelectMode = columnSelectMode;\n    this._state.ydisp = this._bufferService.buffer.ydisp;\n  }\n\n  private _didStateChange(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean, ydisp: number): boolean {\n    return !this._areCoordinatesEqual(start, this._state.start) ||\n      !this._areCoordinatesEqual(end, this._state.end) ||\n      columnSelectMode !== this._state.columnSelectMode ||\n      ydisp !== this._state.ydisp;\n  }\n\n  private _areCoordinatesEqual(coord1: [number, number] | undefined, coord2: [number, number] | undefined): boolean {\n    if (!coord1 || !coord2) {\n      return false;\n    }\n\n    return coord1[0] === coord2[0] && coord1[1] === coord2[1];\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { CharData, ICellData } from 'common/Types';\nimport { GridCache } from './GridCache';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { NULL_CELL_CODE, Content, UnderlineStyle } from 'common/buffer/Constants';\nimport { IColorSet } from 'browser/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IOptionsService, IBufferService, IDecorationService } from 'common/services/Services';\nimport { ICharacterJoinerService, ICoreBrowserService } from 'browser/services/Services';\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\nimport { color, css } from 'common/Color';\n\n/**\n * This CharData looks like a null character, which will forc a clear and render\n * when the character changes (a regular space ' ' character may not as it's\n * drawn state is a cleared cell).\n */\n// const OVERLAP_OWNED_CHAR_DATA: CharData = [null, '', 0, -1];\n\nexport class TextRenderLayer extends BaseRenderLayer {\n  private _state: GridCache<CharData>;\n  private _characterWidth: number = 0;\n  private _characterFont: string = '';\n  private _characterOverlapCache: { [key: string]: boolean } = {};\n  private _workCell = new CellData();\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    alpha: boolean,\n    rendererId: number,\n    bufferService: IBufferService,\n    optionsService: IOptionsService,\n    private readonly _characterJoinerService: ICharacterJoinerService,\n    decorationService: IDecorationService,\n    coreBrowserService: ICoreBrowserService\n  ) {\n    super(container, 'text', zIndex, alpha, colors, rendererId, bufferService, optionsService, decorationService, coreBrowserService);\n    this._state = new GridCache<CharData>();\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n\n    // Clear the character width cache if the font or width has changed\n    const terminalFont = this._getFont(false, false);\n    if (this._characterWidth !== dim.scaledCharWidth || this._characterFont !== terminalFont) {\n      this._characterWidth = dim.scaledCharWidth;\n      this._characterFont = terminalFont;\n      this._characterOverlapCache = {};\n    }\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state.clear();\n    this._state.resize(this._bufferService.cols, this._bufferService.rows);\n  }\n\n  public reset(): void {\n    this._state.clear();\n    this._clearAll();\n  }\n\n  private _forEachCell(\n    firstRow: number,\n    lastRow: number,\n    callback: (\n      cell: ICellData,\n      x: number,\n      y: number\n    ) => void\n  ): void {\n    for (let y = firstRow; y <= lastRow; y++) {\n      const row = y + this._bufferService.buffer.ydisp;\n      const line = this._bufferService.buffer.lines.get(row);\n      const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n      for (let x = 0; x < this._bufferService.cols; x++) {\n        line!.loadCell(x, this._workCell);\n        let cell = this._workCell;\n\n        // If true, indicates that the current character(s) to draw were joined.\n        let isJoined = false;\n        let lastCharX = x;\n\n        // The character to the left is a wide character, drawing is owned by\n        // the char at x-1\n        if (cell.getWidth() === 0) {\n          continue;\n        }\n\n        // Process any joined character ranges as needed. Because of how the\n        // ranges are produced, we know that they are valid for the characters\n        // and attributes of our input.\n        if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n          isJoined = true;\n          const range = joinedRanges.shift()!;\n\n          // We already know the exact start and end column of the joined range,\n          // so we get the string and width representing it directly\n          cell = new JoinedCellData(\n            this._workCell,\n            line!.translateToString(true, range[0], range[1]),\n            range[1] - range[0]\n          );\n\n          // Skip over the cells occupied by this range in the loop\n          lastCharX = range[1] - 1;\n        }\n\n        // If the character is an overlapping char and the character to the\n        // right is a space, take ownership of the cell to the right. We skip\n        // this check for joined characters because their rendering likely won't\n        // yield the same result as rendering the last character individually.\n        if (!isJoined && this._isOverlapping(cell)) {\n          // If the character is overlapping, we want to force a re-render on every\n          // frame. This is specifically to work around the case where two\n          // overlaping chars `a` and `b` are adjacent, the cursor is moved to b and a\n          // space is added. Without this, the first half of `b` would never\n          // get removed, and `a` would not re-render because it thinks it's\n          // already in the correct state.\n          // this._state.cache[x][y] = OVERLAP_OWNED_CHAR_DATA;\n          if (lastCharX < line!.length - 1 && line!.getCodePoint(lastCharX + 1) === NULL_CELL_CODE) {\n            // patch width to 2\n            cell.content &= ~Content.WIDTH_MASK;\n            cell.content |= 2 << Content.WIDTH_SHIFT;\n            // this._clearChar(x + 1, y);\n            // The overlapping char's char data will force a clear and render when the\n            // overlapping char is no longer to the left of the character and also when\n            // the space changes to another character.\n            // this._state.cache[x + 1][y] = OVERLAP_OWNED_CHAR_DATA;\n          }\n        }\n\n        callback(\n          cell,\n          x,\n          y\n        );\n\n        x = lastCharX;\n      }\n    }\n  }\n\n  /**\n   * Draws the background for a specified range of columns. Tries to batch adjacent cells of the\n   * same color together to reduce draw calls.\n   */\n  private _drawBackground(firstRow: number, lastRow: number): void {\n    const ctx = this._ctx;\n    const cols = this._bufferService.cols;\n    let startX: number = 0;\n    let startY: number = 0;\n    let prevFillStyle: string | null = null;\n\n    ctx.save();\n\n    this._forEachCell(firstRow, lastRow, (cell, x, y) => {\n      // libvte and xterm both draw the background (but not foreground) of invisible characters,\n      // so we should too.\n      let nextFillStyle = null; // null represents default background color\n\n      if (cell.isInverse()) {\n        if (cell.isFgDefault()) {\n          nextFillStyle = this._colors.foreground.css;\n        } else if (cell.isFgRGB()) {\n          nextFillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\n        } else {\n          nextFillStyle = this._colors.ansi[cell.getFgColor()].css;\n        }\n      } else if (cell.isBgRGB()) {\n        nextFillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\n      } else if (cell.isBgPalette()) {\n        nextFillStyle = this._colors.ansi[cell.getBgColor()].css;\n      }\n\n      // Apply dim to the background, this is relatively slow as the CSS is re-parsed but dim is\n      // rarely used\n      if (nextFillStyle && cell.isDim()) {\n        nextFillStyle = color.multiplyOpacity(css.toColor(nextFillStyle), 0.5).css;\n      }\n\n      // Get any decoration foreground/background overrides, this must be fetched before the early\n      // exist but applied after inverse\n      let isTop = false;\n      this._decorationService.forEachDecorationAtCell(x, this._bufferService.buffer.ydisp + y, undefined, d => {\n        if (d.options.layer !== 'top' && isTop) {\n          return;\n        }\n        if (d.backgroundColorRGB) {\n          nextFillStyle = d.backgroundColorRGB.css;\n        }\n        isTop = d.options.layer === 'top';\n      });\n\n      if (prevFillStyle === null) {\n        // This is either the first iteration, or the default background was set. Either way, we\n        // don't need to draw anything.\n        startX = x;\n        startY = y;\n      }\n\n      if (y !== startY) {\n        // our row changed, draw the previous row\n        ctx.fillStyle = prevFillStyle || '';\n        this._fillCells(startX, startY, cols - startX, 1);\n        startX = x;\n        startY = y;\n      } else if (prevFillStyle !== nextFillStyle) {\n        // our color changed, draw the previous characters in this row\n        ctx.fillStyle = prevFillStyle || '';\n        this._fillCells(startX, startY, x - startX, 1);\n        startX = x;\n        startY = y;\n      }\n\n      prevFillStyle = nextFillStyle;\n    });\n\n    // flush the last color we encountered\n    if (prevFillStyle !== null) {\n      ctx.fillStyle = prevFillStyle;\n      this._fillCells(startX, startY, cols - startX, 1);\n    }\n\n    ctx.restore();\n  }\n\n  private _drawForeground(firstRow: number, lastRow: number): void {\n    this._forEachCell(firstRow, lastRow, (cell, x, y) => {\n      if (cell.isInvisible()) {\n        return;\n      }\n      this._drawChars(cell, x, y);\n      if (cell.isUnderline() || cell.isStrikethrough()) {\n        this._ctx.save();\n\n        if (cell.isInverse()) {\n          if (cell.isBgDefault()) {\n            this._ctx.fillStyle = this._colors.background.css;\n          } else if (cell.isBgRGB()) {\n            this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\n          } else {\n            let bg = cell.getBgColor();\n            if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && bg < 8) {\n              bg += 8;\n            }\n            this._ctx.fillStyle = this._colors.ansi[bg].css;\n          }\n        } else {\n          if (cell.isFgDefault()) {\n            this._ctx.fillStyle = this._colors.foreground.css;\n          } else if (cell.isFgRGB()) {\n            this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\n          } else {\n            let fg = cell.getFgColor();\n            if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n              fg += 8;\n            }\n            this._ctx.fillStyle = this._colors.ansi[fg].css;\n          }\n        }\n\n        if (cell.isStrikethrough()) {\n          this._fillMiddleLineAtCells(x, y, cell.getWidth());\n        }\n        if (cell.isUnderline()) {\n          if (!cell.isUnderlineColorDefault()) {\n            if (cell.isUnderlineColorRGB()) {\n              this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getUnderlineColor()).join(',')})`;\n            } else {\n              let fg = cell.getUnderlineColor();\n              if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n                fg += 8;\n              }\n              this._ctx.fillStyle = this._colors.ansi[fg].css;\n            }\n          }\n          switch (cell.extended.underlineStyle) {\n            case UnderlineStyle.DOUBLE:\n              this._fillBottomLineAtCells(x, y, cell.getWidth(), -this._coreBrowserService.dpr);\n              this._fillBottomLineAtCells(x, y, cell.getWidth(), this._coreBrowserService.dpr);\n              break;\n            case UnderlineStyle.CURLY:\n              this._curlyUnderlineAtCell(x, y, cell.getWidth());\n              break;\n            case UnderlineStyle.DOTTED:\n              this._dottedUnderlineAtCell(x, y, cell.getWidth());\n              break;\n            case UnderlineStyle.DASHED:\n              this._dashedUnderlineAtCell(x, y, cell.getWidth());\n              break;\n            case UnderlineStyle.SINGLE:\n            default:\n              this._fillBottomLineAtCells(x, y, cell.getWidth());\n              break;\n          }\n        }\n        this._ctx.restore();\n      }\n    });\n  }\n\n  public onGridChanged(firstRow: number, lastRow: number): void {\n    // Resize has not been called yet\n    if (this._state.cache.length === 0) {\n      return;\n    }\n\n    if (this._charAtlas) {\n      this._charAtlas.beginFrame();\n    }\n\n    this._clearCells(0, firstRow, this._bufferService.cols, lastRow - firstRow + 1);\n    this._drawBackground(firstRow, lastRow);\n    this._drawForeground(firstRow, lastRow);\n  }\n\n  public onOptionsChanged(): void {\n    this._setTransparency(this._optionsService.rawOptions.allowTransparency);\n  }\n\n  /**\n   * Whether a character is overlapping to the next cell.\n   */\n  private _isOverlapping(cell: ICellData): boolean {\n    // Only single cell characters can be overlapping, rendering issues can\n    // occur without this check\n    if (cell.getWidth() !== 1) {\n      return false;\n    }\n\n    // We assume that any ascii character will not overlap\n    if (cell.getCode() < 256) {\n      return false;\n    }\n\n    const chars = cell.getChars();\n\n    // Deliver from cache if available\n    if (this._characterOverlapCache.hasOwnProperty(chars)) {\n      return this._characterOverlapCache[chars];\n    }\n\n    // Setup the font\n    this._ctx.save();\n    this._ctx.font = this._characterFont;\n\n    // Measure the width of the character, but Math.floor it\n    // because that is what the renderer does when it calculates\n    // the character dimensions we are comparing against\n    const overlaps = Math.floor(this._ctx.measureText(chars).width) > this._characterWidth;\n\n    // Restore the original context\n    this._ctx.restore();\n\n    // Cache and return\n    this._characterOverlapCache[chars] = overlaps;\n    return overlaps;\n  }\n\n  /**\n   * Clear the charcater at the cell specified.\n   * @param x The column of the char.\n   * @param y The row of the char.\n   */\n  // private _clearChar(x: number, y: number): void {\n  //   let colsToClear = 1;\n  //   // Clear the adjacent character if it was wide\n  //   const state = this._state.cache[x][y];\n  //   if (state && state[CHAR_DATA_WIDTH_INDEX] === 2) {\n  //     colsToClear = 2;\n  //   }\n  //   this.clearCells(x, y, colsToClear, 1);\n  // }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IGlyphIdentifier } from './Types';\nimport { IDisposable } from 'common/Types';\n\nexport abstract class BaseCharAtlas implements IDisposable {\n  private _didWarmUp: boolean = false;\n\n  public dispose(): void { }\n\n  /**\n   * Perform any work needed to warm the cache before it can be used. May be called multiple times.\n   * Implement _doWarmUp instead if you only want to get called once.\n   */\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  /**\n   * Perform any work needed to warm the cache before it can be used. Used by the default\n   * implementation of warmUp(), and will only be called once.\n   */\n  private _doWarmUp(): void { }\n\n  public clear(): void { }\n\n  /**\n   * Called when we start drawing a new frame.\n   *\n   * TODO: We rely on this getting called by TextRenderLayer. This should really be called by\n   * Renderer instead, but we need to make Renderer the source-of-truth for the char atlas, instead\n   * of BaseRenderLayer.\n   */\n  public beginFrame(): void { }\n\n  /**\n   * May be called before warmUp finishes, however it is okay for the implementation to\n   * do nothing and return false in that case.\n   *\n   * @param ctx Where to draw the character onto.\n   * @param glyph Information about what to draw\n   * @param x The position on the context to start drawing at\n   * @param y The position on the context to start drawing at\n   * @returns The success state. True if we drew the character.\n   */\n  public abstract draw(\n    ctx: CanvasRenderingContext2D,\n    glyph: IGlyphIdentifier,\n    x: number,\n    y: number\n  ): boolean;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { generateConfig, configEquals } from './CharAtlasUtils';\nimport { BaseCharAtlas } from './BaseCharAtlas';\nimport { DynamicCharAtlas } from './DynamicCharAtlas';\nimport { ICharAtlasConfig } from './Types';\nimport { IColorSet } from 'browser/Types';\nimport { ITerminalOptions } from 'xterm';\n\ninterface ICharAtlasCacheEntry {\n  atlas: BaseCharAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: number[];\n}\n\nconst charAtlasCache: ICharAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n */\nexport function acquireCharAtlas(\n  options: Required<ITerminalOptions>,\n  rendererId: number,\n  colors: IColorSet,\n  scaledCharWidth: number,\n  scaledCharHeight: number,\n  devicePixelRatio: number\n): BaseCharAtlas {\n  const newConfig = generateConfig(scaledCharWidth, scaledCharHeight, options, colors, devicePixelRatio);\n\n  // Check to see if the renderer already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(rendererId);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the renderer from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the renderer to the cache entry and return\n      entry.ownedBy.push(rendererId);\n      return entry.atlas;\n    }\n  }\n\n  const newEntry: ICharAtlasCacheEntry = {\n    atlas: new DynamicCharAtlas(\n      document,\n      newConfig\n    ),\n    config: newConfig,\n    ownedBy: [rendererId]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n */\nexport function removeTerminalFromCache(rendererId: number): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(rendererId);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only renderer\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { DEFAULT_COLOR } from 'common/buffer/Constants';\nimport { IColorSet, IPartialColorSet } from 'browser/Types';\nimport { ITerminalOptions } from 'xterm';\n\nexport function generateConfig(scaledCharWidth: number, scaledCharHeight: number, options: Required<ITerminalOptions>, colors: IColorSet, devicePixelRatio: number): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IPartialColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: undefined,\n    cursorAccent: undefined,\n    selectionBackground: undefined,\n    ansi: colors.ansi.slice()\n  };\n  return {\n    devicePixelRatio,\n    scaledCharWidth,\n    scaledCharHeight,\n    fontFamily: options.fontFamily,\n    fontSize: options.fontSize,\n    fontWeight: options.fontWeight,\n    fontWeightBold: options.fontWeightBold,\n    allowTransparency: options.allowTransparency,\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.scaledCharWidth === b.scaledCharWidth &&\n      a.scaledCharHeight === b.scaledCharHeight &&\n      a.colors.foreground === b.colors.foreground &&\n      a.colors.background === b.colors.background;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return colorCode < DEFAULT_COLOR;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { DIM_OPACITY, INVERTED_DEFAULT_COLOR, TEXT_BASELINE } from 'browser/renderer/Constants';\nimport { IGlyphIdentifier, ICharAtlasConfig } from './Types';\nimport { BaseCharAtlas } from './BaseCharAtlas';\nimport { DEFAULT_ANSI_COLORS } from 'browser/ColorManager';\nimport { LRUMap } from './LRUMap';\nimport { isFirefox, isSafari } from 'common/Platform';\nimport { IColor } from 'common/Types';\nimport { throwIfFalsy } from 'browser/renderer/RendererUtils';\nimport { color } from 'common/Color';\n\n// In practice we're probably never going to exhaust a texture this large. For debugging purposes,\n// however, it can be useful to set this to a really tiny value, to verify that LRU eviction works.\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 1024;\n\nconst TRANSPARENT_COLOR = {\n  css: 'rgba(0, 0, 0, 0)',\n  rgba: 0\n};\n\n// Drawing to the cache is expensive: If we have to draw more than this number of glyphs to the\n// cache in a single frame, give up on trying to cache anything else, and try to finish the current\n// frame ASAP.\n//\n// This helps to limit the amount of damage a program can do when it would otherwise thrash the\n// cache.\nconst FRAME_CACHE_DRAW_LIMIT = 100;\n\n/**\n * The number of milliseconds to wait before generating the ImageBitmap, this is to debounce/batch\n * the operation as window.createImageBitmap is asynchronous.\n */\nconst GLYPH_BITMAP_COMMIT_DELAY = 100;\n\ninterface IGlyphCacheValue {\n  index: number;\n  isEmpty: boolean;\n  inBitmap: boolean;\n}\n\nexport function getGlyphCacheKey(glyph: IGlyphIdentifier): number {\n  // Note that this only returns a valid key when code < 256\n  // Layout:\n  // 0b00000000000000000000000000000001: italic (1)\n  // 0b00000000000000000000000000000010: dim (1)\n  // 0b00000000000000000000000000000100: bold (1)\n  // 0b00000000000000000000111111111000: fg (9)\n  // 0b00000000000111111111000000000000: bg (9)\n  // 0b00011111111000000000000000000000: code (8)\n  // 0b11100000000000000000000000000000: unused (3)\n  return glyph.code << 21 | glyph.bg << 12 | glyph.fg << 3 | (glyph.bold ? 0 : 4) + (glyph.dim ? 0 : 2) + (glyph.italic ? 0 : 1);\n}\n\nexport class DynamicCharAtlas extends BaseCharAtlas {\n  // An ordered map that we're using to keep track of where each glyph is in the atlas texture.\n  // It's ordered so that we can determine when to remove the old entries.\n  private _cacheMap: LRUMap<IGlyphCacheValue>;\n\n  // The texture that the atlas is drawn to\n  private _cacheCanvas: HTMLCanvasElement;\n  private _cacheCtx: CanvasRenderingContext2D;\n\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  // The number of characters stored in the atlas by width/height\n  private _width: number;\n  private _height: number;\n\n  private _drawToCacheCount: number = 0;\n\n  // An array of glyph keys that are waiting on the bitmap to be generated.\n  private _glyphsWaitingOnBitmap: IGlyphCacheValue[] = [];\n\n  // The timeout that is used to batch bitmap generation so it's not requested for every new glyph.\n  private _bitmapCommitTimeout: number | null = null;\n\n  // The bitmap to draw from, this is much faster on other browsers than others.\n  private _bitmap: ImageBitmap | null = null;\n\n  constructor(document: Document, private _config: ICharAtlasConfig) {\n    super();\n    this._cacheCanvas = document.createElement('canvas');\n    this._cacheCanvas.width = TEXTURE_WIDTH;\n    this._cacheCanvas.height = TEXTURE_HEIGHT;\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this._cacheCtx = throwIfFalsy(this._cacheCanvas.getContext('2d', { alpha: true }));\n\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = this._config.scaledCharWidth;\n    tmpCanvas.height = this._config.scaledCharHeight;\n    this._tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d', { alpha: this._config.allowTransparency }));\n\n    this._width = Math.floor(TEXTURE_WIDTH / this._config.scaledCharWidth);\n    this._height = Math.floor(TEXTURE_HEIGHT / this._config.scaledCharHeight);\n    const capacity = this._width * this._height;\n    this._cacheMap = new LRUMap(capacity);\n    this._cacheMap.prealloc(capacity);\n\n    // This is useful for debugging\n    // document.body.appendChild(this._cacheCanvas);\n  }\n\n  public dispose(): void {\n    if (this._bitmapCommitTimeout !== null) {\n      window.clearTimeout(this._bitmapCommitTimeout);\n      this._bitmapCommitTimeout = null;\n    }\n  }\n\n  public beginFrame(): void {\n    this._drawToCacheCount = 0;\n  }\n\n  public clear(): void {\n    if (this._cacheMap.size > 0) {\n      const capacity = this._width * this._height;\n      this._cacheMap = new LRUMap(capacity);\n      this._cacheMap.prealloc(capacity);\n    }\n    this._cacheCtx.clearRect(0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT);\n    this._tmpCtx.clearRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);\n  }\n\n  public draw(\n    ctx: CanvasRenderingContext2D,\n    glyph: IGlyphIdentifier,\n    x: number,\n    y: number\n  ): boolean {\n    // Space is always an empty cell, special case this as it's so common\n    if (glyph.code === 32) {\n      return true;\n    }\n\n    // Exit early for uncachable glyphs\n    if (!this._canCache(glyph)) {\n      return false;\n    }\n\n    const glyphKey = getGlyphCacheKey(glyph);\n    const cacheValue = this._cacheMap.get(glyphKey);\n    if (cacheValue !== null && cacheValue !== undefined) {\n      this._drawFromCache(ctx, cacheValue, x, y);\n      return true;\n    }\n    if (this._drawToCacheCount < FRAME_CACHE_DRAW_LIMIT) {\n      let index;\n      if (this._cacheMap.size < this._cacheMap.capacity) {\n        index = this._cacheMap.size;\n      } else {\n        // we're out of space, so our call to set will delete this item\n        index = this._cacheMap.peek()!.index;\n      }\n      const cacheValue = this._drawToCache(glyph, index);\n      this._cacheMap.set(glyphKey, cacheValue);\n      this._drawFromCache(ctx, cacheValue, x, y);\n      return true;\n    }\n    return false;\n  }\n\n  private _canCache(glyph: IGlyphIdentifier): boolean {\n    // Only cache ascii and extended characters for now, to be safe. In the future, we could do\n    // something more complicated to determine the expected width of a character.\n    //\n    // If we switch the renderer over to webgl at some point, we may be able to use blending modes\n    // to draw overlapping glyphs from the atlas:\n    // https://github.com/servo/webrender/issues/464#issuecomment-255632875\n    // https://webglfundamentals.org/webgl/lessons/webgl-text-texture.html\n    return glyph.code < 256;\n  }\n\n  private _toCoordinateX(index: number): number {\n    return (index % this._width) * this._config.scaledCharWidth;\n  }\n\n  private _toCoordinateY(index: number): number {\n    return Math.floor(index / this._width) * this._config.scaledCharHeight;\n  }\n\n  private _drawFromCache(\n    ctx: CanvasRenderingContext2D,\n    cacheValue: IGlyphCacheValue,\n    x: number,\n    y: number\n  ): void {\n    // We don't actually need to do anything if this is whitespace.\n    if (cacheValue.isEmpty) {\n      return;\n    }\n    const cacheX = this._toCoordinateX(cacheValue.index);\n    const cacheY = this._toCoordinateY(cacheValue.index);\n    ctx.drawImage(\n      cacheValue.inBitmap ? this._bitmap! : this._cacheCanvas,\n      cacheX,\n      cacheY,\n      this._config.scaledCharWidth,\n      this._config.scaledCharHeight,\n      x,\n      y,\n      this._config.scaledCharWidth,\n      this._config.scaledCharHeight\n    );\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx < this._config.colors.ansi.length) {\n      return this._config.colors.ansi[idx];\n    }\n    return DEFAULT_ANSI_COLORS[idx];\n  }\n\n  private _getBackgroundColor(glyph: IGlyphIdentifier): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return TRANSPARENT_COLOR;\n    }\n    let result: IColor;\n    if (glyph.bg === INVERTED_DEFAULT_COLOR) {\n      result = this._config.colors.foreground;\n    } else if (glyph.bg < 256) {\n      result = this._getColorFromAnsiIndex(glyph.bg);\n    } else {\n      result = this._config.colors.background;\n    }\n    if (glyph.dim) {\n      result = color.blend(this._config.colors.background, color.multiplyOpacity(result, 0.5));\n    }\n    return result;\n  }\n\n  private _getForegroundColor(glyph: IGlyphIdentifier): IColor {\n    if (glyph.fg === INVERTED_DEFAULT_COLOR) {\n      return color.opaque(this._config.colors.background);\n    }\n    if (glyph.fg < 256) {\n      // 256 color support\n      return this._getColorFromAnsiIndex(glyph.fg);\n    }\n    return this._config.colors.foreground;\n  }\n\n  // TODO: We do this (or something similar) in multiple places. We should split this off\n  // into a shared function.\n  private _drawToCache(glyph: IGlyphIdentifier, index: number): IGlyphCacheValue {\n    this._drawToCacheCount++;\n\n    this._tmpCtx.save();\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(glyph);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\n    // transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = glyph.bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = glyph.italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = TEXT_BASELINE;\n\n    this._tmpCtx.fillStyle = this._getForegroundColor(glyph).css;\n\n    // Apply alpha to dim the character\n    if (glyph.dim) {\n      this._tmpCtx.globalAlpha = DIM_OPACITY;\n    }\n\n    // Draw the character\n    this._tmpCtx.fillText(glyph.chars, 0, this._config.scaledCharHeight);\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    let imageData = this._tmpCtx.getImageData(\n      0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight\n    );\n    let isEmpty = false;\n    if (!this._config.allowTransparency) {\n      isEmpty = clearColor(imageData, backgroundColor);\n    }\n\n    // If this charcater is underscore and empty, shift it up until it is visible, try for a maximum\n    // of 5 pixels.\n    if (isEmpty && glyph.chars === '_' && !this._config.allowTransparency) {\n      for (let offset = 1; offset <= 5; offset++) {\n        // Draw the character\n        this._tmpCtx.fillText(glyph.chars, 0, this._config.scaledCharHeight - offset);\n\n        // clear the background from the character to avoid issues with drawing over the previous\n        // character if it extends past it's bounds\n        imageData = this._tmpCtx.getImageData(\n          0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight\n        );\n        isEmpty = clearColor(imageData, backgroundColor);\n        if (!isEmpty) {\n          break;\n        }\n      }\n    }\n\n    this._tmpCtx.restore();\n\n    // copy the data from imageData to _cacheCanvas\n    const x = this._toCoordinateX(index);\n    const y = this._toCoordinateY(index);\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    this._cacheCtx.putImageData(imageData, x, y);\n\n    // Add the glyph and queue it to the bitmap (if the browser supports it)\n    const cacheValue = {\n      index,\n      isEmpty,\n      inBitmap: false\n    };\n    this._addGlyphToBitmap(cacheValue);\n\n    return cacheValue;\n  }\n\n  private _addGlyphToBitmap(cacheValue: IGlyphCacheValue): void {\n    // Support is patchy for createImageBitmap at the moment, pass a canvas back\n    // if support is lacking as drawImage works there too. Firefox is also\n    // included here as ImageBitmap appears both buggy and has horrible\n    // performance (tested on v55).\n    if (!('createImageBitmap' in window) || isFirefox || isSafari) {\n      return;\n    }\n\n    // Add the glyph to the queue\n    this._glyphsWaitingOnBitmap.push(cacheValue);\n\n    // Check if bitmap generation timeout already exists\n    if (this._bitmapCommitTimeout !== null) {\n      return;\n    }\n\n    this._bitmapCommitTimeout = window.setTimeout(() => this._generateBitmap(), GLYPH_BITMAP_COMMIT_DELAY);\n  }\n\n  private _generateBitmap(): void {\n    const glyphsMovingToBitmap = this._glyphsWaitingOnBitmap;\n    this._glyphsWaitingOnBitmap = [];\n    window.createImageBitmap(this._cacheCanvas).then(bitmap => {\n      // Set bitmap\n      this._bitmap = bitmap;\n\n      // Mark all new glyphs as in bitmap, excluding glyphs that came in after\n      // the bitmap was requested\n      for (let i = 0; i < glyphsMovingToBitmap.length; i++) {\n        const value = glyphsMovingToBitmap[i];\n        // It doesn't matter if the value was already evicted, it will be\n        // released from memory after this block if so.\n        value.inBitmap = true;\n      }\n    });\n    this._bitmapCommitTimeout = null;\n  }\n}\n\n// This is used for debugging the renderer, just swap out `new DynamicCharAtlas` with\n// `new NoneCharAtlas`.\nexport class NoneCharAtlas extends BaseCharAtlas {\n  constructor(document: Document, config: ICharAtlasConfig) {\n    super();\n  }\n\n  public draw(\n    ctx: CanvasRenderingContext2D,\n    glyph: IGlyphIdentifier,\n    x: number,\n    y: number\n  ): boolean {\n    return false;\n  }\n}\n\n/**\n * Makes a particular rgb color and colors that are nearly the same in an ImageData completely\n * transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, color: IColor): boolean {\n  let isEmpty = true;\n  const r = color.rgba >>> 24;\n  const g = color.rgba >>> 16 & 0xFF;\n  const b = color.rgba >>> 8 & 0xFF;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (Math.abs(imageData.data[offset] - r) +\n        Math.abs(imageData.data[offset + 1] - g) +\n        Math.abs(imageData.data[offset + 2] - b) < 35) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      isEmpty = false;\n    }\n  }\n  return isEmpty;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface ILinkedListNode<T> {\n  prev: ILinkedListNode<T> | null;\n  next: ILinkedListNode<T> | null;\n  key: number | null;\n  value: T | null;\n}\n\nexport class LRUMap<T> {\n  private _map: { [key: number]: ILinkedListNode<T> } = {};\n  private _head: ILinkedListNode<T> | null = null;\n  private _tail: ILinkedListNode<T> | null = null;\n  private _nodePool: ILinkedListNode<T>[] = [];\n  public size: number = 0;\n\n  constructor(public capacity: number) { }\n\n  private _unlinkNode(node: ILinkedListNode<T>): void {\n    const prev = node.prev;\n    const next = node.next;\n    if (node === this._head) {\n      this._head = next;\n    }\n    if (node === this._tail) {\n      this._tail = prev;\n    }\n    if (prev !== null) {\n      prev.next = next;\n    }\n    if (next !== null) {\n      next.prev = prev;\n    }\n  }\n\n  private _appendNode(node: ILinkedListNode<T>): void {\n    const tail = this._tail;\n    if (tail !== null) {\n      tail.next = node;\n    }\n    node.prev = tail;\n    node.next = null;\n    this._tail = node;\n    if (this._head === null) {\n      this._head = node;\n    }\n  }\n\n  /**\n   * Preallocate a bunch of linked-list nodes. Allocating these nodes ahead of time means that\n   * they're more likely to live next to each other in memory, which seems to improve performance.\n   *\n   * Each empty object only consumes about 60 bytes of memory, so this is pretty cheap, even for\n   * large maps.\n   */\n  public prealloc(count: number): void {\n    const nodePool = this._nodePool;\n    for (let i = 0; i < count; i++) {\n      nodePool.push({\n        prev: null,\n        next: null,\n        key: null,\n        value: null\n      });\n    }\n  }\n\n  public get(key: number): T | null {\n    // This is unsafe: We're assuming our keyspace doesn't overlap with Object.prototype. However,\n    // it's faster than calling hasOwnProperty, and in our case, it would never overlap.\n    const node = this._map[key];\n    if (node !== undefined) {\n      this._unlinkNode(node);\n      this._appendNode(node);\n      return node.value;\n    }\n    return null;\n  }\n\n  /**\n   * Gets a value from a key without marking it as the most recently used item.\n   */\n  public peekValue(key: number): T | null {\n    const node = this._map[key];\n    if (node !== undefined) {\n      return node.value;\n    }\n    return null;\n  }\n\n  public peek(): T | null {\n    const head = this._head;\n    return head === null ? null : head.value;\n  }\n\n  public set(key: number, value: T): void {\n    // This is unsafe: See note above.\n    let node = this._map[key];\n    if (node !== undefined) {\n      // already exists, we just need to mutate it and move it to the end of the list\n      node = this._map[key];\n      this._unlinkNode(node);\n      node.value = value;\n    } else if (this.size >= this.capacity) {\n      // we're out of space: recycle the head node, move it to the tail\n      node = this._head!;\n      this._unlinkNode(node);\n      delete this._map[node.key!];\n      node.key = key;\n      node.value = value;\n      this._map[key] = node;\n    } else {\n      // make a new element\n      const nodePool = this._nodePool;\n      if (nodePool.length > 0) {\n        // use a preallocated node if we can\n        node = nodePool.pop()!;\n        node.key = key;\n        node.value = value;\n      } else {\n        node = {\n          prev: null,\n          next: null,\n          key,\n          value\n        };\n      }\n      this._map[key] = node;\n      this.size++;\n    }\n    this._appendNode(node);\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorContrastCache } from 'browser/Types';\nimport { IColor } from 'common/Types';\nimport { TwoKeyMap } from 'common/MultiKeyMap';\n\nexport class ColorContrastCache implements IColorContrastCache {\n  private _color: TwoKeyMap</* bg */number, /* fg */number, IColor | null> = new TwoKeyMap();\n  private _css: TwoKeyMap</* bg */number, /* fg */number, string | null> = new TwoKeyMap();\n\n  public setCss(bg: number, fg: number, value: string | null): void {\n    this._css.set(bg, fg, value);\n  }\n\n  public getCss(bg: number, fg: number): string | null | undefined {\n    return this._css.get(bg, fg);\n  }\n\n  public setColor(bg: number, fg: number, value: IColor | null): void {\n    this._color.set(bg, fg, value);\n  }\n\n  public getColor(bg: number, fg: number): IColor | null | undefined {\n    return this._color.get(bg, fg);\n  }\n\n  public clear(): void {\n    this._color.clear();\n    this._css.clear();\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorManager, IColorSet, IColorContrastCache } from 'browser/Types';\nimport { ITheme } from 'common/services/Services';\nimport { channels, color, css } from 'common/Color';\nimport { ColorContrastCache } from 'browser/ColorContrastCache';\nimport { ColorIndex, IColor } from 'common/Types';\n\n\ninterface IRestoreColorSet {\n  foreground: IColor;\n  background: IColor;\n  cursor: IColor;\n  ansi: IColor[];\n}\n\n\nconst DEFAULT_FOREGROUND = css.toColor('#ffffff');\nconst DEFAULT_BACKGROUND = css.toColor('#000000');\nconst DEFAULT_CURSOR = css.toColor('#ffffff');\nconst DEFAULT_CURSOR_ACCENT = css.toColor('#000000');\nconst DEFAULT_SELECTION = {\n  css: 'rgba(255, 255, 255, 0.3)',\n  rgba: 0xFFFFFF4D\n};\n\n// An IIFE to generate DEFAULT_ANSI_COLORS.\nexport const DEFAULT_ANSI_COLORS = Object.freeze((() => {\n  const colors = [\n    // dark:\n    css.toColor('#2e3436'),\n    css.toColor('#cc0000'),\n    css.toColor('#4e9a06'),\n    css.toColor('#c4a000'),\n    css.toColor('#3465a4'),\n    css.toColor('#75507b'),\n    css.toColor('#06989a'),\n    css.toColor('#d3d7cf'),\n    // bright:\n    css.toColor('#555753'),\n    css.toColor('#ef2929'),\n    css.toColor('#8ae234'),\n    css.toColor('#fce94f'),\n    css.toColor('#729fcf'),\n    css.toColor('#ad7fa8'),\n    css.toColor('#34e2e2'),\n    css.toColor('#eeeeec')\n  ];\n\n  // Fill in the remaining 240 ANSI colors.\n  // Generate colors (16-231)\n  const v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\n  for (let i = 0; i < 216; i++) {\n    const r = v[(i / 36) % 6 | 0];\n    const g = v[(i / 6) % 6 | 0];\n    const b = v[i % 6];\n    colors.push({\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    });\n  }\n\n  // Generate greys (232-255)\n  for (let i = 0; i < 24; i++) {\n    const c = 8 + i * 10;\n    colors.push({\n      css: channels.toCss(c, c, c),\n      rgba: channels.toRgba(c, c, c)\n    });\n  }\n\n  return colors;\n})());\n\n/**\n * Manages the source of truth for a terminal's colors.\n */\nexport class ColorManager implements IColorManager {\n  public colors: IColorSet;\n  private _ctx: CanvasRenderingContext2D;\n  private _litmusColor: CanvasGradient;\n  private _contrastCache: IColorContrastCache;\n  private _restoreColors!: IRestoreColorSet;\n\n  constructor(document: Document, public allowTransparency: boolean) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Could not get rendering context');\n    }\n    this._ctx = ctx;\n    this._ctx.globalCompositeOperation = 'copy';\n    this._litmusColor = this._ctx.createLinearGradient(0, 0, 1, 1);\n    this._contrastCache = new ColorContrastCache();\n    this.colors = {\n      foreground: DEFAULT_FOREGROUND,\n      background: DEFAULT_BACKGROUND,\n      cursor: DEFAULT_CURSOR,\n      cursorAccent: DEFAULT_CURSOR_ACCENT,\n      selectionForeground: undefined,\n      selectionBackgroundTransparent: DEFAULT_SELECTION,\n      selectionBackgroundOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      selectionInactiveBackgroundTransparent: DEFAULT_SELECTION,\n      selectionInactiveBackgroundOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      ansi: DEFAULT_ANSI_COLORS.slice(),\n      contrastCache: this._contrastCache\n    };\n    this._updateRestoreColors();\n  }\n\n  public onOptionsChange(key: string, value: any): void {\n    switch (key) {\n      case 'minimumContrastRatio':\n        this._contrastCache.clear();\n        break;\n      case 'allowTransparency':\n        this.allowTransparency = value;\n        break;\n    }\n  }\n\n  /**\n   * Sets the terminal's theme.\n   * @param theme The  theme to use. If a partial theme is provided then default\n   * colors will be used where colors are not defined.\n   */\n  public setTheme(theme: ITheme = {}): void {\n    this.colors.foreground = this._parseColor(theme.foreground, DEFAULT_FOREGROUND);\n    this.colors.background = this._parseColor(theme.background, DEFAULT_BACKGROUND);\n    this.colors.cursor = this._parseColor(theme.cursor, DEFAULT_CURSOR, true);\n    this.colors.cursorAccent = this._parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT, true);\n    this.colors.selectionBackgroundTransparent = this._parseColor(theme.selectionBackground, DEFAULT_SELECTION, true);\n    this.colors.selectionBackgroundOpaque = color.blend(this.colors.background, this.colors.selectionBackgroundTransparent);\n    this.colors.selectionInactiveBackgroundTransparent = this._parseColor(theme.selectionInactiveBackground, this.colors.selectionBackgroundTransparent, true);\n    this.colors.selectionInactiveBackgroundOpaque = color.blend(this.colors.background, this.colors.selectionInactiveBackgroundTransparent);\n    const nullColor: IColor = {\n      css: '',\n      rgba: 0\n    };\n    this.colors.selectionForeground = theme.selectionForeground ? this._parseColor(theme.selectionForeground, nullColor) : undefined;\n    if (this.colors.selectionForeground === nullColor) {\n      this.colors.selectionForeground = undefined;\n    }\n\n    /**\n     * If selection color is opaque, blend it with background with 0.3 opacity\n     * Issue #2737\n     */\n    if (color.isOpaque(this.colors.selectionBackgroundTransparent)) {\n      const opacity = 0.3;\n      this.colors.selectionBackgroundTransparent = color.opacity(this.colors.selectionBackgroundTransparent, opacity);\n    }\n    if (color.isOpaque(this.colors.selectionInactiveBackgroundTransparent)) {\n      const opacity = 0.3;\n      this.colors.selectionInactiveBackgroundTransparent = color.opacity(this.colors.selectionInactiveBackgroundTransparent, opacity);\n    }\n    this.colors.ansi = DEFAULT_ANSI_COLORS.slice();\n    this.colors.ansi[0] = this._parseColor(theme.black, DEFAULT_ANSI_COLORS[0]);\n    this.colors.ansi[1] = this._parseColor(theme.red, DEFAULT_ANSI_COLORS[1]);\n    this.colors.ansi[2] = this._parseColor(theme.green, DEFAULT_ANSI_COLORS[2]);\n    this.colors.ansi[3] = this._parseColor(theme.yellow, DEFAULT_ANSI_COLORS[3]);\n    this.colors.ansi[4] = this._parseColor(theme.blue, DEFAULT_ANSI_COLORS[4]);\n    this.colors.ansi[5] = this._parseColor(theme.magenta, DEFAULT_ANSI_COLORS[5]);\n    this.colors.ansi[6] = this._parseColor(theme.cyan, DEFAULT_ANSI_COLORS[6]);\n    this.colors.ansi[7] = this._parseColor(theme.white, DEFAULT_ANSI_COLORS[7]);\n    this.colors.ansi[8] = this._parseColor(theme.brightBlack, DEFAULT_ANSI_COLORS[8]);\n    this.colors.ansi[9] = this._parseColor(theme.brightRed, DEFAULT_ANSI_COLORS[9]);\n    this.colors.ansi[10] = this._parseColor(theme.brightGreen, DEFAULT_ANSI_COLORS[10]);\n    this.colors.ansi[11] = this._parseColor(theme.brightYellow, DEFAULT_ANSI_COLORS[11]);\n    this.colors.ansi[12] = this._parseColor(theme.brightBlue, DEFAULT_ANSI_COLORS[12]);\n    this.colors.ansi[13] = this._parseColor(theme.brightMagenta, DEFAULT_ANSI_COLORS[13]);\n    this.colors.ansi[14] = this._parseColor(theme.brightCyan, DEFAULT_ANSI_COLORS[14]);\n    this.colors.ansi[15] = this._parseColor(theme.brightWhite, DEFAULT_ANSI_COLORS[15]);\n    if (theme.extendedAnsi) {\n      const colorCount = Math.min(this.colors.ansi.length - 16, theme.extendedAnsi.length);\n      for (let i = 0; i < colorCount; i++) {\n        this.colors.ansi[i + 16] = this._parseColor(theme.extendedAnsi[i], DEFAULT_ANSI_COLORS[i + 16]);\n      }\n    }\n    // Clear our the cache\n    this._contrastCache.clear();\n    this._updateRestoreColors();\n  }\n\n  public restoreColor(slot?: ColorIndex): void {\n    // unset slot restores all ansi colors\n    if (slot === undefined) {\n      for (let i = 0; i < this._restoreColors.ansi.length; ++i) {\n        this.colors.ansi[i] = this._restoreColors.ansi[i];\n      }\n      return;\n    }\n    switch (slot) {\n      case ColorIndex.FOREGROUND:\n        this.colors.foreground = this._restoreColors.foreground;\n        break;\n      case ColorIndex.BACKGROUND:\n        this.colors.background = this._restoreColors.background;\n        break;\n      case ColorIndex.CURSOR:\n        this.colors.cursor = this._restoreColors.cursor;\n        break;\n      default:\n        this.colors.ansi[slot] = this._restoreColors.ansi[slot];\n    }\n  }\n\n  private _updateRestoreColors(): void {\n    this._restoreColors = {\n      foreground: this.colors.foreground,\n      background: this.colors.background,\n      cursor: this.colors.cursor,\n      ansi: this.colors.ansi.slice()\n    };\n  }\n\n  private _parseColor(\n    css: string | undefined,\n    fallback: IColor,\n    allowTransparency: boolean = this.allowTransparency\n  ): IColor {\n    if (css === undefined) {\n      return fallback;\n    }\n\n    // If parsing the value results in failure, then it must be ignored, and the attribute must\n    // retain its previous value.\n    // -- https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\n    this._ctx.fillStyle = this._litmusColor;\n    this._ctx.fillStyle = css;\n    if (typeof this._ctx.fillStyle !== 'string') {\n      console.warn(`Color: ${css} is invalid using fallback ${fallback.css}`);\n      return fallback;\n    }\n\n    this._ctx.fillRect(0, 0, 1, 1);\n    const data = this._ctx.getImageData(0, 0, 1, 1).data;\n\n    // Check if the printed color was transparent\n    if (data[3] !== 0xFF) {\n      if (!allowTransparency) {\n        // Ideally we'd just ignore the alpha channel, but...\n        //\n        // Browsers may not give back exactly the same RGB values we put in, because most/all\n        // convert the color to a pre-multiplied representation. getImageData converts that back to\n        // a un-premultipled representation, but the precision loss may make the RGB channels unuable\n        // on their own.\n        //\n        // E.g. In Chrome #12345610 turns into #10305010, and in the extreme case, 0xFFFFFF00 turns\n        // into 0x00000000.\n        //\n        // \"Note: Due to the lossy nature of converting to and from premultiplied alpha color values,\n        // pixels that have just been set using putImageData() might be returned to an equivalent\n        // getImageData() as different values.\"\n        // -- https://html.spec.whatwg.org/multipage/canvas.html#pixel-manipulation\n        //\n        // So let's just use the fallback color in this case instead.\n        console.warn(\n          `Color: ${css} is using transparency, but allowTransparency is false. ` +\n          `Using fallback ${fallback.css}.`\n        );\n        return fallback;\n      }\n\n      // https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n      // the color value has alpha less than 1.0, and the string is the color value in the CSS rgba()\n      const [r, g, b, a] = this._ctx.fillStyle.substring(5, this._ctx.fillStyle.length - 1).split(',').map(component => Number(component));\n      const alpha = Math.round(a * 255);\n      const rgba: number = channels.toRgba(r, g, b, alpha);\n      return {\n        rgba,\n        css\n      };\n    }\n\n    return {\n      // https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n      // if it has alpha equal to 1.0, then the string is a lowercase six-digit hex value, prefixed with a \"#\" character\n      css: this._ctx.fillStyle,\n      rgba: channels.toRgba(data[0], data[1], data[2], data[3])\n    };\n  }\n}\n","/**\n * Copyright (c) 2020 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function removeElementFromParent(...elements: (HTMLElement | undefined)[]): void {\n  for (const e of elements) {\n    e?.parentElement?.removeChild(e);\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\n\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge would\n// result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { throwIfFalsy } from 'browser/renderer/RendererUtils';\n\ninterface IBlockVector {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\nexport const blockElementDefinitions: { [index: string]: IBlockVector[] | undefined } = {\n  // Block elements (0x2580-0x2590)\n  '▀': [{ x: 0, y: 0, w: 8, h: 4 }], // UPPER HALF BLOCK\n  '▁': [{ x: 0, y: 7, w: 8, h: 1 }], // LOWER ONE EIGHTH BLOCK\n  '▂': [{ x: 0, y: 6, w: 8, h: 2 }], // LOWER ONE QUARTER BLOCK\n  '▃': [{ x: 0, y: 5, w: 8, h: 3 }], // LOWER THREE EIGHTHS BLOCK\n  '▄': [{ x: 0, y: 4, w: 8, h: 4 }], // LOWER HALF BLOCK\n  '▅': [{ x: 0, y: 3, w: 8, h: 5 }], // LOWER FIVE EIGHTHS BLOCK\n  '▆': [{ x: 0, y: 2, w: 8, h: 6 }], // LOWER THREE QUARTERS BLOCK\n  '▇': [{ x: 0, y: 1, w: 8, h: 7 }], // LOWER SEVEN EIGHTHS BLOCK\n  '█': [{ x: 0, y: 0, w: 8, h: 8 }], // FULL BLOCK\n  '▉': [{ x: 0, y: 0, w: 7, h: 8 }], // LEFT SEVEN EIGHTHS BLOCK\n  '▊': [{ x: 0, y: 0, w: 6, h: 8 }], // LEFT THREE QUARTERS BLOCK\n  '▋': [{ x: 0, y: 0, w: 5, h: 8 }], // LEFT FIVE EIGHTHS BLOCK\n  '▌': [{ x: 0, y: 0, w: 4, h: 8 }], // LEFT HALF BLOCK\n  '▍': [{ x: 0, y: 0, w: 3, h: 8 }], // LEFT THREE EIGHTHS BLOCK\n  '▎': [{ x: 0, y: 0, w: 2, h: 8 }], // LEFT ONE QUARTER BLOCK\n  '▏': [{ x: 0, y: 0, w: 1, h: 8 }], // LEFT ONE EIGHTH BLOCK\n  '▐': [{ x: 4, y: 0, w: 4, h: 8 }], // RIGHT HALF BLOCK\n\n  // Block elements (0x2594-0x2595)\n  '▔': [{ x: 0, y: 0, w: 9, h: 1 }], // UPPER ONE EIGHTH BLOCK\n  '▕': [{ x: 7, y: 0, w: 1, h: 8 }], // RIGHT ONE EIGHTH BLOCK\n\n  // Terminal graphic characters (0x2596-0x259F)\n  '▖': [{ x: 0, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER LEFT\n  '▗': [{ x: 4, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER RIGHT\n  '▘': [{ x: 0, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER LEFT\n  '▙': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT\n  '▚': [{ x: 0, y: 0, w: 4, h: 4 }, { x: 4, y: 4, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND LOWER RIGHT\n  '▛': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 4, y: 0, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT\n  '▜': [{ x: 0, y: 0, w: 8, h: 4 }, { x: 4, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT\n  '▝': [{ x: 4, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER RIGHT\n  '▞': [{ x: 4, y: 0, w: 4, h: 4 }, { x: 0, y: 4, w: 4, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT\n  '▟': [{ x: 4, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT\n\n  // VERTICAL ONE EIGHTH BLOCK-2 through VERTICAL ONE EIGHTH BLOCK-7\n  '\\u{1FB70}': [{ x: 1, y: 0, w: 1, h: 8 }],\n  '\\u{1FB71}': [{ x: 2, y: 0, w: 1, h: 8 }],\n  '\\u{1FB72}': [{ x: 3, y: 0, w: 1, h: 8 }],\n  '\\u{1FB73}': [{ x: 4, y: 0, w: 1, h: 8 }],\n  '\\u{1FB74}': [{ x: 5, y: 0, w: 1, h: 8 }],\n  '\\u{1FB75}': [{ x: 6, y: 0, w: 1, h: 8 }],\n\n  // HORIZONTAL ONE EIGHTH BLOCK-2 through HORIZONTAL ONE EIGHTH BLOCK-7\n  '\\u{1FB76}': [{ x: 0, y: 1, w: 8, h: 1 }],\n  '\\u{1FB77}': [{ x: 0, y: 2, w: 8, h: 1 }],\n  '\\u{1FB78}': [{ x: 0, y: 3, w: 8, h: 1 }],\n  '\\u{1FB79}': [{ x: 0, y: 4, w: 8, h: 1 }],\n  '\\u{1FB7A}': [{ x: 0, y: 5, w: 8, h: 1 }],\n  '\\u{1FB7B}': [{ x: 0, y: 6, w: 8, h: 1 }],\n\n  // LEFT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7C}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // LEFT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7D}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7E}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7F}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // UPPER AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB80}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // HORIZONTAL ONE EIGHTH BLOCK-1358\n  '\\u{1FB81}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 2, w: 8, h: 1 }, { x: 0, y: 4, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n\n  // UPPER ONE QUARTER BLOCK\n  '\\u{1FB82}': [{ x: 0, y: 0, w: 8, h: 2 }],\n  // UPPER THREE EIGHTHS BLOCK\n  '\\u{1FB83}': [{ x: 0, y: 0, w: 8, h: 3 }],\n  // UPPER FIVE EIGHTHS BLOCK\n  '\\u{1FB84}': [{ x: 0, y: 0, w: 8, h: 5 }],\n  // UPPER THREE QUARTERS BLOCK\n  '\\u{1FB85}': [{ x: 0, y: 0, w: 8, h: 6 }],\n  // UPPER SEVEN EIGHTHS BLOCK\n  '\\u{1FB86}': [{ x: 0, y: 0, w: 8, h: 7 }],\n\n  // RIGHT ONE QUARTER BLOCK\n  '\\u{1FB87}': [{ x: 6, y: 0, w: 2, h: 8 }],\n  // RIGHT THREE EIGHTHS B0OCK\n  '\\u{1FB88}': [{ x: 5, y: 0, w: 3, h: 8 }],\n  // RIGHT FIVE EIGHTHS BL0CK\n  '\\u{1FB89}': [{ x: 3, y: 0, w: 5, h: 8 }],\n  // RIGHT THREE QUARTERS 0LOCK\n  '\\u{1FB8A}': [{ x: 2, y: 0, w: 6, h: 8 }],\n  // RIGHT SEVEN EIGHTHS B0OCK\n  '\\u{1FB8B}': [{ x: 1, y: 0, w: 7, h: 8 }],\n\n  // CHECKER BOARD FILL\n  '\\u{1FB95}': [\n    { x: 0, y: 0, w: 2, h: 2 }, { x: 4, y: 0, w: 2, h: 2 },\n    { x: 2, y: 2, w: 2, h: 2 }, { x: 6, y: 2, w: 2, h: 2 },\n    { x: 0, y: 4, w: 2, h: 2 }, { x: 4, y: 4, w: 2, h: 2 },\n    { x: 2, y: 6, w: 2, h: 2 }, { x: 6, y: 6, w: 2, h: 2 }\n  ],\n  // INVERSE CHECKER BOARD FILL\n  '\\u{1FB96}': [\n    { x: 2, y: 0, w: 2, h: 2 }, { x: 6, y: 0, w: 2, h: 2 },\n    { x: 0, y: 2, w: 2, h: 2 }, { x: 4, y: 2, w: 2, h: 2 },\n    { x: 2, y: 4, w: 2, h: 2 }, { x: 6, y: 4, w: 2, h: 2 },\n    { x: 0, y: 6, w: 2, h: 2 }, { x: 4, y: 6, w: 2, h: 2 }\n  ],\n  // HEAVY HORIZONTAL FILL (upper middle and lower one quarter block)\n  '\\u{1FB97}': [{ x: 0, y: 2, w: 8, h: 2 }, { x: 0, y: 6, w: 8, h: 2 }]\n};\n\ntype PatternDefinition = number[][];\n\n/**\n * Defines the repeating pattern used by special characters, the pattern is made up of a 2d array of\n * pixel values to be filled (1) or not filled (0).\n */\nconst patternCharacterDefinitions: { [key: string]: PatternDefinition | undefined } = {\n  // Shade characters (0x2591-0x2593)\n  '░': [ // LIGHT SHADE (25%)\n    [1, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 0]\n  ],\n  '▒': [ // MEDIUM SHADE (50%)\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [0, 0]\n  ],\n  '▓': [ // DARK SHADE (75%)\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, 1]\n  ]\n};\n\nconst enum Shapes {\n  /** │ */ TOP_TO_BOTTOM = 'M.5,0 L.5,1',\n  /** ─ */ LEFT_TO_RIGHT = 'M0,.5 L1,.5',\n\n  /** └ */ TOP_TO_RIGHT = 'M.5,0 L.5,.5 L1,.5',\n  /** ┘ */ TOP_TO_LEFT = 'M.5,0 L.5,.5 L0,.5',\n  /** ┐ */ LEFT_TO_BOTTOM = 'M0,.5 L.5,.5 L.5,1',\n  /** ┌ */ RIGHT_TO_BOTTOM = 'M0.5,1 L.5,.5 L1,.5',\n\n  /** ╵ */ MIDDLE_TO_TOP = 'M.5,.5 L.5,0',\n  /** ╴ */ MIDDLE_TO_LEFT = 'M.5,.5 L0,.5',\n  /** ╶ */ MIDDLE_TO_RIGHT = 'M.5,.5 L1,.5',\n  /** ╷ */ MIDDLE_TO_BOTTOM = 'M.5,.5 L.5,1',\n\n  /** ┴ */ T_TOP = 'M0,.5 L1,.5 M.5,.5 L.5,0',\n  /** ┤ */ T_LEFT = 'M.5,0 L.5,1 M.5,.5 L0,.5',\n  /** ├ */ T_RIGHT = 'M.5,0 L.5,1 M.5,.5 L1,.5',\n  /** ┬ */ T_BOTTOM = 'M0,.5 L1,.5 M.5,.5 L.5,1',\n\n  /** ┼ */ CROSS = 'M0,.5 L1,.5 M.5,0 L.5,1',\n\n  /** ╌ */ TWO_DASHES_HORIZONTAL = 'M.1,.5 L.4,.5 M.6,.5 L.9,.5', // .2 empty, .3 filled\n  /** ┄ */ THREE_DASHES_HORIZONTAL = 'M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5', // .1333 empty, .2 filled\n  /** ┉ */ FOUR_DASHES_HORIZONTAL = 'M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5', // .1 empty, .15 filled\n  /** ╎ */ TWO_DASHES_VERTICAL = 'M.5,.1 L.5,.4 M.5,.6 L.5,.9',\n  /** ┆ */ THREE_DASHES_VERTICAL = 'M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333',\n  /** ┊ */ FOUR_DASHES_VERTICAL = 'M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95',\n}\n\nconst enum Style {\n  NORMAL = 1,\n  BOLD = 3\n}\n\n/**\n * @param xp The percentage of 15% of the x axis.\n * @param yp The percentage of 15% of the x axis on the y axis.\n */\ntype DrawFunctionDefinition = (xp: number, yp: number) => string;\n\n/**\n * This contains the definitions of all box drawing characters in the format of SVG paths (ie. the\n * svg d attribute).\n */\nexport const boxDrawingDefinitions: { [character: string]: { [fontWeight: number]: string | DrawFunctionDefinition } | undefined } = {\n  // Uniform normal and bold\n  '─': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT },\n  '━': { [Style.BOLD]:   Shapes.LEFT_TO_RIGHT },\n  '│': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM },\n  '┃': { [Style.BOLD]:   Shapes.TOP_TO_BOTTOM },\n  '┌': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM },\n  '┏': { [Style.BOLD]:   Shapes.RIGHT_TO_BOTTOM },\n  '┐': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM },\n  '┓': { [Style.BOLD]:   Shapes.LEFT_TO_BOTTOM },\n  '└': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT },\n  '┗': { [Style.BOLD]:   Shapes.TOP_TO_RIGHT },\n  '┘': { [Style.NORMAL]: Shapes.TOP_TO_LEFT },\n  '┛': { [Style.BOLD]:   Shapes.TOP_TO_LEFT },\n  '├': { [Style.NORMAL]: Shapes.T_RIGHT },\n  '┣': { [Style.BOLD]:   Shapes.T_RIGHT },\n  '┤': { [Style.NORMAL]: Shapes.T_LEFT },\n  '┫': { [Style.BOLD]:   Shapes.T_LEFT },\n  '┬': { [Style.NORMAL]: Shapes.T_BOTTOM },\n  '┳': { [Style.BOLD]:   Shapes.T_BOTTOM },\n  '┴': { [Style.NORMAL]: Shapes.T_TOP },\n  '┻': { [Style.BOLD]:   Shapes.T_TOP },\n  '┼': { [Style.NORMAL]: Shapes.CROSS },\n  '╋': { [Style.BOLD]:   Shapes.CROSS },\n  '╴': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT },\n  '╸': { [Style.BOLD]:   Shapes.MIDDLE_TO_LEFT },\n  '╵': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP },\n  '╹': { [Style.BOLD]:   Shapes.MIDDLE_TO_TOP },\n  '╶': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT },\n  '╺': { [Style.BOLD]:   Shapes.MIDDLE_TO_RIGHT },\n  '╷': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM },\n  '╻': { [Style.BOLD]:   Shapes.MIDDLE_TO_BOTTOM },\n\n  // Double border\n  '═': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '║': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╒': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╓': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},1 L${.5 - xp},.5 L1,.5 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╔': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╕': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L.5,${.5 - yp} L.5,1 M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╖': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},1 L${.5 + xp},.5 L0,.5 M${.5 - xp},.5 L${.5 - xp},1` },\n  '╗': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},1` },\n  '╘': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 + yp} L1,${.5 + yp} M.5,${.5 - yp} L1,${.5 - yp}` },\n  '╙': { [Style.NORMAL]: (xp, yp) => `M1,.5 L${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╚': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0 M1,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},0` },\n  '╛': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L.5,${.5 + yp} L.5,0 M0,${.5 - yp} L.5,${.5 - yp}` },\n  '╜': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 + xp},.5 L${.5 + xp},0 M${.5 - xp},.5 L${.5 - xp},0` },\n  '╝': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M0,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},0` },\n  '╞': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╟': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1 M${.5 + xp},.5 L1,.5` },\n  '╠': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╡': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L.5,${.5 - yp} M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╢': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 - xp},.5 M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╣': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},0 L${.5 + xp},1 M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0` },\n  '╤': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp} M.5,${.5 + yp} L.5,1` },\n  '╥': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},1 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╦': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╧': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - yp} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╨': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╩': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L1,${.5 + yp} M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╪': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╫': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╬': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n\n  // Diagonal\n  '╱': { [Style.NORMAL]: 'M1,0 L0,1' },\n  '╲': { [Style.NORMAL]: 'M0,0 L1,1' },\n  '╳': { [Style.NORMAL]: 'M1,0 L0,1 M0,0 L1,1' },\n\n  // Mixed weight\n  '╼': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '╽': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╾': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '╿': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┍': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┎': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┑': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┒': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┕': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┖': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┙': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┚': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┝': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┞': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┟': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┠': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┡': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┢': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┥': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┦': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┧': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┨': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┩': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┪': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┭': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┮': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┯': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┰': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┱': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┲': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┵': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┶': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┷': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┸': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┹': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┺': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┽': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}`,  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┾': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}`,   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┿': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '╀': { [Style.NORMAL]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}`, [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '╁': { [Style.NORMAL]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}`,    [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╂': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '╃': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '╄': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '╅': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '╆': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '╇': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}` },\n  '╈': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}` },\n  '╉': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}` },\n  '╊': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}` },\n\n  // Dashed\n  '╌': { [Style.NORMAL]: Shapes.TWO_DASHES_HORIZONTAL },\n  '╍': { [Style.BOLD]:   Shapes.TWO_DASHES_HORIZONTAL },\n  '┄': { [Style.NORMAL]: Shapes.THREE_DASHES_HORIZONTAL },\n  '┅': { [Style.BOLD]:   Shapes.THREE_DASHES_HORIZONTAL },\n  '┈': { [Style.NORMAL]: Shapes.FOUR_DASHES_HORIZONTAL },\n  '┉': { [Style.BOLD]:   Shapes.FOUR_DASHES_HORIZONTAL },\n  '╎': { [Style.NORMAL]: Shapes.TWO_DASHES_VERTICAL },\n  '╏': { [Style.BOLD]:   Shapes.TWO_DASHES_VERTICAL },\n  '┆': { [Style.NORMAL]: Shapes.THREE_DASHES_VERTICAL  },\n  '┇': { [Style.BOLD]:   Shapes.THREE_DASHES_VERTICAL },\n  '┊': { [Style.NORMAL]: Shapes.FOUR_DASHES_VERTICAL },\n  '┋': { [Style.BOLD]:   Shapes.FOUR_DASHES_VERTICAL },\n\n  // Curved\n  '╭': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,1,.5` },\n  '╮': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,0,.5` },\n  '╯': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,0,.5` },\n  '╰': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,1,.5` }\n};\n\ninterface IVectorShape {\n  d: string;\n  type: VectorType;\n  leftPadding?: number;\n  rightPadding?: number;\n}\n\nconst enum VectorType {\n  FILL,\n  STROKE\n}\n\n/**\n * This contains the definitions of the primarily used box drawing characters as vector shapes. The\n * reason these characters are defined specially is to avoid common problems if a user's font has\n * not been patched with powerline characters and also to get pixel perfect rendering as rendering\n * issues can occur around AA/SPAA.\n *\n * The line variants draw beyond the cell and get clipped to ensure the end of the line is not visible.\n *\n * Original symbols defined in https://github.com/powerline/fontpatcher\n */\nexport const powerlineDefinitions: { [index: string]: IVectorShape } = {\n  // Right triangle solid\n  '\\u{E0B0}': { d: 'M0,0 L1,.5 L0,1', type: VectorType.FILL, rightPadding: 2 },\n  // Right triangle line\n  '\\u{E0B1}': { d: 'M-1,-.5 L1,.5 L-1,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Left triangle solid\n  '\\u{E0B2}': { d: 'M1,0 L0,.5 L1,1', type: VectorType.FILL, leftPadding: 2 },\n  // Left triangle line\n  '\\u{E0B3}': { d: 'M2,-.5 L0,.5 L2,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Right semi-circle solid,\n  '\\u{E0B4}': { d: 'M0,0 L0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0', type: VectorType.FILL, rightPadding: 1 },\n  // Right semi-circle line,\n  '\\u{E0B5}': { d: 'M0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0', type: VectorType.STROKE, rightPadding: 1 },\n  // Left semi-circle solid,\n  '\\u{E0B6}': { d: 'M1,0 L1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0', type: VectorType.FILL, leftPadding: 1 },\n  // Left semi-circle line,\n  '\\u{E0B7}': { d: 'M1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0', type: VectorType.STROKE, leftPadding: 1 }\n};\n\n/**\n * Try drawing a custom block element or box drawing character, returning whether it was\n * successfully drawn.\n */\nexport function tryDrawCustomChar(\n  ctx: CanvasRenderingContext2D,\n  c: string,\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number,\n  fontSize: number,\n  devicePixelRatio: number\n): boolean {\n  const blockElementDefinition = blockElementDefinitions[c];\n  if (blockElementDefinition) {\n    drawBlockElementChar(ctx, blockElementDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const patternDefinition = patternCharacterDefinitions[c];\n  if (patternDefinition) {\n    drawPatternChar(ctx, patternDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const boxDrawingDefinition = boxDrawingDefinitions[c];\n  if (boxDrawingDefinition) {\n    drawBoxDrawingChar(ctx, boxDrawingDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight, devicePixelRatio);\n    return true;\n  }\n\n  const powerlineDefinition = powerlineDefinitions[c];\n  if (powerlineDefinition) {\n    drawPowerlineChar(ctx, powerlineDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight, fontSize, devicePixelRatio);\n    return true;\n  }\n\n  return false;\n}\n\nfunction drawBlockElementChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IBlockVector[],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  for (let i = 0; i < charDefinition.length; i++) {\n    const box = charDefinition[i];\n    const xEighth = scaledCellWidth / 8;\n    const yEighth = scaledCellHeight / 8;\n    ctx.fillRect(\n      xOffset + box.x * xEighth,\n      yOffset + box.y * yEighth,\n      box.w * xEighth,\n      box.h * yEighth\n    );\n  }\n}\n\nconst cachedPatterns: Map<PatternDefinition, Map</* fillStyle */string, CanvasPattern>> = new Map();\n\nfunction drawPatternChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: number[][],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  let patternSet = cachedPatterns.get(charDefinition);\n  if (!patternSet) {\n    patternSet = new Map();\n    cachedPatterns.set(charDefinition, patternSet);\n  }\n  const fillStyle = ctx.fillStyle;\n  if (typeof fillStyle !== 'string') {\n    throw new Error(`Unexpected fillStyle type \"${fillStyle}\"`);\n  }\n  let pattern = patternSet.get(fillStyle);\n  if (!pattern) {\n    const width = charDefinition[0].length;\n    const height = charDefinition.length;\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = width;\n    tmpCanvas.height = height;\n    const tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d'));\n    const imageData = new ImageData(width, height);\n\n    // Extract rgba from fillStyle\n    let r: number;\n    let g: number;\n    let b: number;\n    let a: number;\n    if (fillStyle.startsWith('#')) {\n      r = parseInt(fillStyle.slice(1, 3), 16);\n      g = parseInt(fillStyle.slice(3, 5), 16);\n      b = parseInt(fillStyle.slice(5, 7), 16);\n      a = fillStyle.length > 7 && parseInt(fillStyle.slice(7, 9), 16) || 1;\n    } else if (fillStyle.startsWith('rgba')) {\n      ([r, g, b, a] = fillStyle.substring(5, fillStyle.length - 1).split(',').map(e => parseFloat(e)));\n    } else {\n      throw new Error(`Unexpected fillStyle color format \"${fillStyle}\" when drawing pattern glyph`);\n    }\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        imageData.data[(y * width + x) * 4    ] = r;\n        imageData.data[(y * width + x) * 4 + 1] = g;\n        imageData.data[(y * width + x) * 4 + 2] = b;\n        imageData.data[(y * width + x) * 4 + 3] = charDefinition[y][x] * (a * 255);\n      }\n    }\n    tmpCtx.putImageData(imageData, 0, 0);\n    pattern = throwIfFalsy(ctx.createPattern(tmpCanvas, null));\n    patternSet.set(fillStyle, pattern);\n  }\n  ctx.fillStyle = pattern;\n  ctx.fillRect(xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n}\n\n/**\n * Draws the following box drawing characters by mapping a subset of SVG d attribute instructions to\n * canvas draw calls.\n *\n * Box styles:       ┎┰┒┍┯┑╓╥╖╒╤╕ ┏┳┓┌┲┓┌┬┐┏┱┐\n * ┌─┬─┐ ┏━┳━┓ ╔═╦═╗ ┠╂┨┝┿┥╟╫╢╞╪╡ ┡╇┩├╊┫┢╈┪┣╉┤\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┖┸┚┕┷┙╙╨╜╘╧╛ └┴┘└┺┛┗┻┛┗┹┘\n * ├─┼─┤ ┣━╋━┫ ╠═╬═╣ ┏┱┐┌┲┓┌┬┐┌┬┐ ┏┳┓┌┮┓┌┬┐┏┭┐\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┡╃┤├╄┩├╆┪┢╅┤ ┞╀┦├┾┫┟╁┧┣┽┤\n * └─┴─┘ ┗━┻━┛ ╚═╩═╝ └┴┘└┴┘└┺┛┗┹┘ └┴┘└┶┛┗┻┛┗┵┘\n *\n * Other:\n * ╭─╮ ╲ ╱ ╷╻╎╏┆┇┊┋ ╺╾╴ ╌╌╌ ┄┄┄ ┈┈┈\n * │ │  ╳  ╽╿╎╏┆┇┊┋ ╶╼╸ ╍╍╍ ┅┅┅ ┉┉┉\n * ╰─╯ ╱ ╲ ╹╵╎╏┆┇┊┋\n *\n * All box drawing characters:\n * ─ ━ │ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┌ ┍ ┎ ┏\n * ┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟\n * ┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯\n * ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿\n * ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏\n * ═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟\n * ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ ╭ ╮ ╯\n * ╰ ╱ ╲ ╳ ╴ ╵ ╶ ╷ ╸ ╹ ╺ ╻ ╼ ╽ ╾ ╿\n *\n * ---\n *\n * Box drawing alignment tests:                                          █\n *                                                                       ▉\n *   ╔══╦══╗  ┌──┬──┐  ╭──┬──╮  ╭──┬──╮  ┏━━┳━━┓  ┎┒┏┑   ╷  ╻ ┏┯┓ ┌┰┐    ▊ ╱╲╱╲╳╳╳\n *   ║┌─╨─┐║  │╔═╧═╗│  │╒═╪═╕│  │╓─╁─╖│  ┃┌─╂─┐┃  ┗╃╄┙  ╶┼╴╺╋╸┠┼┨ ┝╋┥    ▋ ╲╱╲╱╳╳╳\n *   ║│╲ ╱│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╿ │┃  ┍╅╆┓   ╵  ╹ ┗┷┛ └┸┘    ▌ ╱╲╱╲╳╳╳\n *   ╠╡ ╳ ╞╣  ├╢   ╟┤  ├┼─┼─┼┤  ├╫─╂─╫┤  ┣┿╾┼╼┿┫  ┕┛┖┚     ┌┄┄┐ ╎ ┏┅┅┓ ┋ ▍ ╲╱╲╱╳╳╳\n *   ║│╱ ╲│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╽ │┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▎\n *   ║└─╥─┘║  │╚═╤═╝│  │╘═╪═╛│  │╙─╀─╜│  ┃└─╂─┘┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▏\n *   ╚══╩══╝  └──┴──┘  ╰──┴──╯  ╰──┴──╯  ┗━━┻━━┛           └╌╌┘ ╎ ┗╍╍┛ ┋  ▁▂▃▄▅▆▇█\n *\n * Source: https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html\n */\nfunction drawBoxDrawingChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: { [fontWeight: number]: string | ((xp: number, yp: number) => string) },\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number,\n  devicePixelRatio: number\n): void {\n  ctx.strokeStyle = ctx.fillStyle;\n  for (const [fontWeight, instructions] of Object.entries(charDefinition)) {\n    ctx.beginPath();\n    ctx.lineWidth = devicePixelRatio * Number.parseInt(fontWeight);\n    let actualInstructions: string;\n    if (typeof instructions === 'function') {\n      const xp = .15;\n      const yp = .15 / scaledCellHeight * scaledCellWidth;\n      actualInstructions = instructions(xp, yp);\n    } else {\n      actualInstructions = instructions;\n    }\n    for (const instruction of actualInstructions.split(' ')) {\n      const type = instruction[0];\n      const f = svgToCanvasInstructionMap[type];\n      if (!f) {\n        console.error(`Could not find drawing instructions for \"${type}\"`);\n        continue;\n      }\n      const args: string[] = instruction.substring(1).split(',');\n      if (!args[0] || !args[1]) {\n        continue;\n      }\n      f(ctx, translateArgs(args, scaledCellWidth, scaledCellHeight, xOffset, yOffset, true, devicePixelRatio));\n    }\n    ctx.stroke();\n    ctx.closePath();\n  }\n}\n\nfunction drawPowerlineChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IVectorShape,\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number,\n  fontSize: number,\n  devicePixelRatio: number\n): void {\n  ctx.beginPath();\n  // Scale the stroke with DPR and font size\n  const cssLineWidth = fontSize / 12;\n  ctx.lineWidth = devicePixelRatio * cssLineWidth;\n  for (const instruction of charDefinition.d.split(' ')) {\n    const type = instruction[0];\n    const f = svgToCanvasInstructionMap[type];\n    if (!f) {\n      console.error(`Could not find drawing instructions for \"${type}\"`);\n      continue;\n    }\n    const args: string[] = instruction.substring(1).split(',');\n    if (!args[0] || !args[1]) {\n      continue;\n    }\n    f(ctx, translateArgs(\n      args,\n      scaledCellWidth,\n      scaledCellHeight,\n      xOffset,\n      yOffset,\n      false,\n      (charDefinition.leftPadding ?? 0) * (cssLineWidth / 2),\n      (charDefinition.rightPadding ?? 0) * (cssLineWidth / 2)\n    ));\n  }\n  if (charDefinition.type === VectorType.STROKE) {\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.stroke();\n  } else {\n    ctx.fill();\n  }\n  ctx.closePath();\n}\n\nfunction clamp(value: number, max: number, min: number = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst svgToCanvasInstructionMap: { [index: string]: any } = {\n  'C': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.bezierCurveTo(args[0], args[1], args[2], args[3], args[4], args[5]),\n  'L': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.lineTo(args[0], args[1]),\n  'M': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.moveTo(args[0], args[1])\n};\n\nfunction translateArgs(args: string[], cellWidth: number, cellHeight: number, xOffset: number, yOffset: number, doClamp: boolean, devicePixelRatio: number, leftPadding: number = 0, rightPadding: number = 0): number[] {\n  const result = args.map(e => parseFloat(e) || parseInt(e));\n\n  if (result.length < 2) {\n    throw new Error('Too few arguments for instruction');\n  }\n\n  for (let x = 0; x < result.length; x += 2) {\n    // Translate from 0-1 to 0-cellWidth\n    result[x] *= cellWidth - (leftPadding * devicePixelRatio) - (rightPadding * devicePixelRatio);\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (doClamp && result[x] !== 0) {\n      result[x] = clamp(Math.round(result[x] + 0.5) - 0.5, cellWidth, 0);\n    }\n    // Apply the cell's offset (ie. x*cellWidth)\n    result[x] += xOffset + (leftPadding * devicePixelRatio);\n  }\n\n  for (let y = 1; y < result.length; y += 2) {\n    // Translate from 0-1 to 0-cellHeight\n    result[y] *= cellHeight;\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (doClamp && result[y] !== 0) {\n      result[y] = clamp(Math.round(result[y] + 0.5) - 0.5, cellHeight, 0);\n    }\n    // Apply the cell's offset (ie. x*cellHeight)\n    result[y] += yOffset;\n  }\n\n  return result;\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\n\nexport function observeDevicePixelDimensions(element: HTMLElement, parentWindow: Window & typeof globalThis, callback: (deviceWidth: number, deviceHeight: number) => void): IDisposable {\n  // Observe any resizes to the element and extract the actual pixel size of the element if the\n  // devicePixelContentBoxSize API is supported. This allows correcting rounding errors when\n  // converting between CSS pixels and device pixels which causes blurry rendering when device\n  // pixel ratio is not a round number.\n  let observer: ResizeObserver | undefined = new parentWindow.ResizeObserver((entries) => {\n    const entry = entries.find((entry) => entry.target === element);\n    if (!entry) {\n      return;\n    }\n\n    // Disconnect if devicePixelContentBoxSize isn't supported by the browser\n    if (!('devicePixelContentBoxSize' in entry)) {\n      observer?.disconnect();\n      observer = undefined;\n      return;\n    }\n\n    // Fire the callback, ignore events where the dimensions are 0x0 as the canvas is likely hidden\n    const width = entry.devicePixelContentBoxSize[0].inlineSize;\n    const height = entry.devicePixelContentBoxSize[0].blockSize;\n    if (width > 0 && height > 0) {\n      callback(width, height);\n    }\n  });\n  try {\n    observer.observe(element, { box: ['device-pixel-content-box'] } as any);\n  } catch {\n    observer.disconnect();\n    observer = undefined;\n  }\n  return toDisposable(() => observer?.disconnect());\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n\nexport function isPowerlineGlyph(codepoint: number): boolean {\n  // Only return true for Powerline symbols which require\n  // different padding and should be excluded from minimum contrast\n  // ratio standards\n  return 0xE0A4 <= codepoint && codepoint <= 0xE0D6;\n}\n\nexport function isRestrictedPowerlineGlyph(codepoint: number): boolean {\n  return 0xE0B0 <= codepoint && codepoint <= 0xE0B7;\n}\n\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\n  return 0x2500 <= codepoint && codepoint <= 0x259F;\n}\n\nexport function excludeFromContrastRatioDemands(codepoint: number): boolean {\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, CharData } from 'common/Types';\nimport { ICharacterJoiner } from 'browser/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { WHITESPACE_CELL_CHAR, Content } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService } from 'common/services/Services';\nimport { ICharacterJoinerService } from 'browser/services/Services';\n\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n\nexport class CharacterJoinerService implements ICharacterJoinerService {\n  public serviceBrand: undefined;\n\n  private _characterJoiners: ICharacterJoiner[] = [];\n  private _nextCharacterJoinerId: number = 0;\n  private _workCell: CellData = new CellData();\n\n  constructor(\n    @IBufferService private _bufferService: IBufferService\n  ) { }\n\n  public register(handler: (text: string) => [number, number][]): number {\n    const joiner: ICharacterJoiner = {\n      id: this._nextCharacterJoinerId++,\n      handler\n    };\n\n    this._characterJoiners.push(joiner);\n    return joiner.id;\n  }\n\n  public deregister(joinerId: number): boolean {\n    for (let i = 0; i < this._characterJoiners.length; i++) {\n      if (this._characterJoiners[i].id === joinerId) {\n        this._characterJoiners.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getJoinedCharacters(row: number): [number, number][] {\n    if (this._characterJoiners.length === 0) {\n      return [];\n    }\n\n    const line = this._bufferService.buffer.lines.get(row);\n    if (!line || line.length === 0) {\n      return [];\n    }\n\n    const ranges: [number, number][] = [];\n    const lineStr = line.translateToString(true);\n\n    // Because some cells can be represented by multiple javascript characters,\n    // we track the cell and the string indexes separately. This allows us to\n    // translate the string ranges we get from the joiners back into cell ranges\n    // for use when rendering\n    let rangeStartColumn = 0;\n    let currentStringIndex = 0;\n    let rangeStartStringIndex = 0;\n    let rangeAttrFG = line.getFg(0);\n    let rangeAttrBG = line.getBg(0);\n\n    for (let x = 0; x < line.getTrimmedLength(); x++) {\n      line.loadCell(x, this._workCell);\n\n      if (this._workCell.getWidth() === 0) {\n        // If this character is of width 0, skip it.\n        continue;\n      }\n\n      // End of range\n      if (this._workCell.fg !== rangeAttrFG || this._workCell.bg !== rangeAttrBG) {\n        // If we ended up with a sequence of more than one character,\n        // look for ranges to join.\n        if (x - rangeStartColumn > 1) {\n          const joinedRanges = this._getJoinedRanges(\n            lineStr,\n            rangeStartStringIndex,\n            currentStringIndex,\n            line,\n            rangeStartColumn\n          );\n          for (let i = 0; i < joinedRanges.length; i++) {\n            ranges.push(joinedRanges[i]);\n          }\n        }\n\n        // Reset our markers for a new range.\n        rangeStartColumn = x;\n        rangeStartStringIndex = currentStringIndex;\n        rangeAttrFG = this._workCell.fg;\n        rangeAttrBG = this._workCell.bg;\n      }\n\n      currentStringIndex += this._workCell.getChars().length || WHITESPACE_CELL_CHAR.length;\n    }\n\n    // Process any trailing ranges.\n    if (this._bufferService.cols - rangeStartColumn > 1) {\n      const joinedRanges = this._getJoinedRanges(\n        lineStr,\n        rangeStartStringIndex,\n        currentStringIndex,\n        line,\n        rangeStartColumn\n      );\n      for (let i = 0; i < joinedRanges.length; i++) {\n        ranges.push(joinedRanges[i]);\n      }\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Given a segment of a line of text, find all ranges of text that should be\n   * joined in a single rendering unit. Ranges are internally converted to\n   * column ranges, rather than string ranges.\n   * @param line String representation of the full line of text\n   * @param startIndex Start position of the range to search in the string (inclusive)\n   * @param endIndex End position of the range to search in the string (exclusive)\n   */\n  private _getJoinedRanges(line: string, startIndex: number, endIndex: number, lineData: IBufferLine, startCol: number): [number, number][] {\n    const text = line.substring(startIndex, endIndex);\n    // At this point we already know that there is at least one joiner so\n    // we can just pull its value and assign it directly rather than\n    // merging it into an empty array, which incurs unnecessary writes.\n    let allJoinedRanges: [number, number][] = [];\n    try {\n      allJoinedRanges = this._characterJoiners[0].handler(text);\n    } catch (error) {\n      console.error(error);\n    }\n    for (let i = 1; i < this._characterJoiners.length; i++) {\n      // We merge any overlapping ranges across the different joiners\n      try {\n        const joinerRanges = this._characterJoiners[i].handler(text);\n        for (let j = 0; j < joinerRanges.length; j++) {\n          CharacterJoinerService._mergeRanges(allJoinedRanges, joinerRanges[j]);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    this._stringRangesToCellRanges(allJoinedRanges, lineData, startCol);\n    return allJoinedRanges;\n  }\n\n  /**\n   * Modifies the provided ranges in-place to adjust for variations between\n   * string length and cell width so that the range represents a cell range,\n   * rather than the string range the joiner provides.\n   * @param ranges String ranges containing start (inclusive) and end (exclusive) index\n   * @param line Cell data for the relevant line in the terminal\n   * @param startCol Offset within the line to start from\n   */\n  private _stringRangesToCellRanges(ranges: [number, number][], line: IBufferLine, startCol: number): void {\n    let currentRangeIndex = 0;\n    let currentRangeStarted = false;\n    let currentStringIndex = 0;\n    let currentRange = ranges[currentRangeIndex];\n\n    // If we got through all of the ranges, stop searching\n    if (!currentRange) {\n      return;\n    }\n\n    for (let x = startCol; x < this._bufferService.cols; x++) {\n      const width = line.getWidth(x);\n      const length = line.getString(x).length || WHITESPACE_CELL_CHAR.length;\n\n      // We skip zero-width characters when creating the string to join the text\n      // so we do the same here\n      if (width === 0) {\n        continue;\n      }\n\n      // Adjust the start of the range\n      if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\n        currentRange[0] = x;\n        currentRangeStarted = true;\n      }\n\n      // Adjust the end of the range\n      if (currentRange[1] <= currentStringIndex) {\n        currentRange[1] = x;\n\n        // We're finished with this range, so we move to the next one\n        currentRange = ranges[++currentRangeIndex];\n\n        // If there are no more ranges left, stop searching\n        if (!currentRange) {\n          break;\n        }\n\n        // Ranges can be on adjacent characters. Because the end index of the\n        // ranges are exclusive, this means that the index for the start of a\n        // range can be the same as the end index of the previous range. To\n        // account for the start of the next range, we check here just in case.\n        if (currentRange[0] <= currentStringIndex) {\n          currentRange[0] = x;\n          currentRangeStarted = true;\n        } else {\n          currentRangeStarted = false;\n        }\n      }\n\n      // Adjust the string index based on the character length to line up with\n      // the column adjustment\n      currentStringIndex += length;\n    }\n\n    // If there is still a range left at the end, it must extend all the way to\n    // the end of the line.\n    if (currentRange) {\n      currentRange[1] = this._bufferService.cols;\n    }\n  }\n\n  /**\n   * Merges the range defined by the provided start and end into the list of\n   * existing ranges. The merge is done in place on the existing range for\n   * performance and is also returned.\n   * @param ranges Existing range list\n   * @param newRange Tuple of two numbers representing the new range to merge in.\n   * @returns The ranges input with the new range merged in place\n   */\n  private static _mergeRanges(ranges: [number, number][], newRange: [number, number]): [number, number][] {\n    let inRange = false;\n    for (let i = 0; i < ranges.length; i++) {\n      const range = ranges[i];\n      if (!inRange) {\n        if (newRange[1] <= range[0]) {\n          // Case 1: New range is before the search range\n          ranges.splice(i, 0, newRange);\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 2: New range is either wholly contained within the\n          // search range or overlaps with the front of it\n          range[0] = Math.min(newRange[0], range[0]);\n          return ranges;\n        }\n\n        if (newRange[0] < range[1]) {\n          // Case 3: New range either wholly contains the search range\n          // or overlaps with the end of it\n          range[0] = Math.min(newRange[0], range[0]);\n          inRange = true;\n        }\n\n        // Case 4: New range starts after the search range\n        continue;\n      } else {\n        if (newRange[1] <= range[0]) {\n          // Case 5: New range extends from previous range but doesn't\n          // reach the current one\n          ranges[i - 1][1] = newRange[1];\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 6: New range extends from prvious range into the\n          // current range\n          ranges[i - 1][1] = Math.max(newRange[1], range[1]);\n          ranges.splice(i, 1);\n          return ranges;\n        }\n\n        // Case 7: New range extends from previous range past the\n        // end of the current range\n        ranges.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (inRange) {\n      // Case 8: New range extends past the last existing range\n      ranges[ranges.length - 1][1] = newRange[1];\n    } else {\n      // Case 9: New range starts after the last existing range\n      ranges.push(newRange);\n    }\n\n    return ranges;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor, IColorRGB } from 'common/Types';\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    const a = (fg.rgba & 0xFF) / 255;\n    if (a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    const r = bgR + Math.round((fgR - bgR) * a);\n    const g = bgG + Math.round((fgG - bgG) * a);\n    const b = bgB + Math.round((fgB - bgB) * a);\n    const css = channels.toCss(r, g, b);\n    const rgba = channels.toRgba(r, g, b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    const [r, g, b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    const a = Math.round(opacity * 0xFF);\n    const [r, g, b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n\n  export function multiplyOpacity(color: IColor, factor: number): IColor {\n    const a = color.rgba & 0xFF;\n    return opacity(color, (a * factor) / 0xFF);\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\n */\nexport namespace css {\n  export function toColor(css: string): IColor {\n    if (css.match(/#[0-9a-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          const r = parseInt(css.slice(1, 2).repeat(2), 16);\n          const g = parseInt(css.slice(2, 3).repeat(2), 16);\n          const b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return rgba.toColor(r, g, b);\n        }\n        case 5: { // #rgba\n          const r = parseInt(css.slice(1, 2).repeat(2), 16);\n          const g = parseInt(css.slice(2, 3).repeat(2), 16);\n          const b = parseInt(css.slice(3, 4).repeat(2), 16);\n          const a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return rgba.toColor(r, g, b, a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) { // rgb() or rgba()\n      const r = parseInt(rgbaMatch[1]);\n      const g = parseInt(rgbaMatch[2]);\n      const b = parseInt(rgbaMatch[3]);\n      const a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return rgba.toColor(r, g, b, a);\n    }\n    throw new Error('css.toColor: Unsupported css format');\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, fgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  // FIXME: Move this to channels NS?\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class TwoKeyMap<TFirst extends string | number, TSecond extends string | number, TValue> {\n  private _data: { [bg: string | number]: { [fg: string | number]: TValue | undefined } | undefined } = {};\n\n  public set(first: TFirst, second: TSecond, value: TValue): void {\n    if (!this._data[first]) {\n      this._data[first] = {};\n    }\n    this._data[first as string | number]![second] = value;\n  }\n\n  public get(first: TFirst, second: TSecond): TValue | undefined {\n    return this._data[first as string | number] ? this._data[first as string | number]![second] : undefined;\n  }\n\n  public clear(): void {\n    this._data = {};\n  }\n}\n\nexport class FourKeyMap<TFirst extends string | number, TSecond extends string | number, TThird extends string | number, TFourth extends string | number, TValue> {\n  private _data: TwoKeyMap<TFirst, TSecond, TwoKeyMap<TThird, TFourth, TValue>> = new TwoKeyMap();\n\n  public set(first: TFirst, second: TSecond, third: TThird, fourth: TFourth, value: TValue): void {\n    if (!this._data.get(first, second)) {\n      this._data.set(first, second, new TwoKeyMap());\n    }\n    this._data.get(first, second)!.set(third, fourth, value);\n  }\n\n  public get(first: TFirst, second: TSecond, third: TThird, fourth: TFourth): TValue | undefined {\n    return this._data.get(first, second)?.get(third, fourth);\n  }\n\n  public clear(): void {\n    this._data.clear();\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nconst isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle, ExtFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     {\n    if (this.hasExtendedAttrs() && this.extended.underlineStyle !== UnderlineStyle.NONE) {\n      return 1;\n    }\n    return this.fg & FgFlags.UNDERLINE;\n  }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n  public isProtected(): number     { return this.bg & BgFlags.PROTECTED; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this._ext, this._urlId);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\nexport const DEFAULT_EXT = 0;\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 2 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000,\n  PROTECTED = 0x20000000\n}\n\nexport const enum ExtFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  UNDERLINE_STYLE = 0x1C000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IServiceIdentifier } from 'common/services/Services';\n\nconst DI_TARGET = 'di$target';\nconst DI_DEPENDENCIES = 'di$dependencies';\n\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\n\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\n  return ctor[DI_DEPENDENCIES] || [];\n}\n\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\n  if (serviceRegistry.has(id)) {\n    return serviceRegistry.get(id)!;\n  }\n\n  const decorator: any = function (target: Function, key: string, index: number): any {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(decorator, target, index);\n  };\n\n  decorator.toString = () => id;\n\n  serviceRegistry.set(id, decorator);\n  return decorator;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n  if ((target as any)[DI_TARGET] === target) {\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\n  } else {\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\n    (target as any)[DI_TARGET] = target;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent, IEventEmitter } from 'common/EventEmitter';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource, IDisposable, IColor, CursorStyle, IOscLinkData } from 'common/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDecorationOptions, IDecoration, ILinkHandler } from 'xterm';\n\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\nexport interface IBufferService {\n  serviceBrand: undefined;\n\n  readonly cols: number;\n  readonly rows: number;\n  readonly buffer: IBuffer;\n  readonly buffers: IBufferSet;\n  isUserScrolling: boolean;\n  onResize: IEvent<{ cols: number, rows: number }>;\n  onScroll: IEvent<number>;\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\n  scrollToBottom(): void;\n  scrollToTop(): void;\n  scrollToLine(line: number): void;\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\n  scrollPages(pageCount: number): void;\n  resize(cols: number, rows: number): void;\n  reset(): void;\n}\n\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\nexport interface ICoreMouseService {\n  activeProtocol: string;\n  activeEncoding: string;\n  areMouseEventsActive: boolean;\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\n  reset(): void;\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  onProtocolChange: IEvent<CoreMouseEventType>;\n\n  /**\n   * Human readable version of mouse events.\n   */\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\n}\n\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\nexport interface ICoreService {\n  serviceBrand: undefined;\n\n  /**\n   * Initially the cursor will not be visible until the first time the terminal\n   * is focused.\n   */\n  isCursorInitialized: boolean;\n  isCursorHidden: boolean;\n\n  readonly modes: IModes;\n  readonly decPrivateModes: IDecPrivateModes;\n\n  readonly onData: IEvent<string>;\n  readonly onUserInput: IEvent<void>;\n  readonly onBinary: IEvent<string>;\n\n  reset(): void;\n\n  /**\n   * Triggers the onData event in the public API.\n   * @param data The data that is being emitted.\n   * @param wasFromUser Whether the data originated from the user (as opposed to\n   * resulting from parsing incoming data). When true this will also:\n   * - Scroll to the bottom of the buffer.s\n   * - Fire the `onUserInput` event (so selection can be cleared).\n   */\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\n\n  /**\n   * Triggers the onBinary event in the public API.\n   * @param data The data that is being emitted.\n   */\n  triggerBinaryEvent(data: string): void;\n}\n\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\nexport interface ICharsetService {\n  serviceBrand: undefined;\n\n  charset: ICharset | undefined;\n  readonly glevel: number;\n\n  reset(): void;\n\n  /**\n   * Set the G level of the terminal.\n   * @param g\n   */\n  setgLevel(g: number): void;\n\n  /**\n   * Set the charset for the given G level of the terminal.\n   * @param g\n   * @param charset\n   */\n  setgCharset(g: number, charset: ICharset | undefined): void;\n}\n\nexport const IDirtyRowService = createDecorator<IDirtyRowService>('DirtyRowService');\nexport interface IDirtyRowService {\n  serviceBrand: undefined;\n\n  readonly start: number;\n  readonly end: number;\n\n  clearRange(): void;\n  markDirty(y: number): void;\n  markRangeDirty(y1: number, y2: number): void;\n  markAllDirty(): void;\n}\n\nexport interface IServiceIdentifier<T> {\n  (...args: any[]): void;\n  type: T;\n}\n\nexport interface IBrandedService {\n  serviceBrand: undefined;\n}\n\ntype GetLeadingNonServiceArgs<Args> =\n  Args extends [...IBrandedService[]] ? []\n    : Args extends [infer A1, ...IBrandedService[]] ? [A1]\n      : Args extends [infer A1, infer A2, ...IBrandedService[]] ? [A1, A2]\n        : Args extends [infer A1, infer A2, infer A3, ...IBrandedService[]] ? [A1, A2, A3]\n          : Args extends [infer A1, infer A2, infer A3, infer A4, ...IBrandedService[]] ? [A1, A2, A3, A4]\n            : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, ...IBrandedService[]] ? [A1, A2, A3, A4, A5]\n              : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6]\n                : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7]\n                  : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, infer A8, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7, A8]\n                    : never;\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\nexport interface IInstantiationService {\n  serviceBrand: undefined;\n\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n}\n\nexport enum LogLevelEnum {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  OFF = 4\n}\n\nexport const ILogService = createDecorator<ILogService>('LogService');\nexport interface ILogService {\n  serviceBrand: undefined;\n\n  logLevel: LogLevelEnum;\n\n  debug(message: any, ...optionalParams: any[]): void;\n  info(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n}\n\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\nexport interface IOptionsService {\n  serviceBrand: undefined;\n\n  /**\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\n   * single options without any validation as we trust TypeScript to enforce correct usage\n   * internally.\n   */\n  readonly rawOptions: Required<ITerminalOptions>;\n  readonly options: Required<ITerminalOptions>;\n\n  readonly onOptionChange: IEvent<string>;\n}\n\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'off';\n\nexport interface ITerminalOptions {\n  allowProposedApi?: boolean;\n  allowTransparency?: boolean;\n  altClickMovesCursor?: boolean;\n  cols?: number;\n  convertEol?: boolean;\n  cursorBlink?: boolean;\n  cursorStyle?: CursorStyle;\n  cursorWidth?: number;\n  customGlyphs?: boolean;\n  disableStdin?: boolean;\n  drawBoldTextInBrightColors?: boolean;\n  fastScrollModifier?: 'none' | 'alt' | 'ctrl' | 'shift';\n  fastScrollSensitivity?: number;\n  fontSize?: number;\n  fontFamily?: string;\n  fontWeight?: FontWeight;\n  fontWeightBold?: FontWeight;\n  letterSpacing?: number;\n  lineHeight?: number;\n  linkHandler?: ILinkHandler | null;\n  logLevel?: LogLevel;\n  macOptionIsMeta?: boolean;\n  macOptionClickForcesSelection?: boolean;\n  minimumContrastRatio?: number;\n  rightClickSelectsWord?: boolean;\n  rows?: number;\n  screenReaderMode?: boolean;\n  scrollback?: number;\n  scrollSensitivity?: number;\n  smoothScrollDuration?: number;\n  tabStopWidth?: number;\n  theme?: ITheme;\n  windowsMode?: boolean;\n  windowOptions?: IWindowOptions;\n  wordSeparator?: string;\n  overviewRulerWidth?: number;\n\n  [key: string]: any;\n  cancelEvents: boolean;\n  termName: string;\n}\n\nexport interface ITheme {\n  foreground?: string;\n  background?: string;\n  cursor?: string;\n  cursorAccent?: string;\n  selectionForeground?: string;\n  selectionBackground?: string;\n  selectionInactiveBackground?: string;\n  black?: string;\n  red?: string;\n  green?: string;\n  yellow?: string;\n  blue?: string;\n  magenta?: string;\n  cyan?: string;\n  white?: string;\n  brightBlack?: string;\n  brightRed?: string;\n  brightGreen?: string;\n  brightYellow?: string;\n  brightBlue?: string;\n  brightMagenta?: string;\n  brightCyan?: string;\n  brightWhite?: string;\n  extendedAnsi?: string[];\n}\n\nexport const IOscLinkService = createDecorator<IOscLinkService>('OscLinkService');\nexport interface IOscLinkService {\n  serviceBrand: undefined;\n  /**\n   * Registers a link to the service, returning the link ID. The link data is managed by this\n   * service and will be freed when this current cursor position is trimmed off the buffer.\n   */\n  registerLink(linkData: IOscLinkData): number;\n  /**\n   * Adds a line to a link if needed.\n   */\n  addLineToLink(linkId: number, y: number): void;\n  /** Get the link data associated with a link ID. */\n  getLinkData(linkId: number): IOscLinkData | undefined;\n}\n\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\nexport interface IUnicodeService {\n  serviceBrand: undefined;\n  /** Register an Unicode version provider. */\n  register(provider: IUnicodeVersionProvider): void;\n  /** Registered Unicode versions. */\n  readonly versions: string[];\n  /** Currently active version. */\n  activeVersion: string;\n  /** Event triggered, when activate version changed. */\n  readonly onChange: IEvent<string>;\n\n  /**\n   * Unicode version dependent\n   */\n  wcwidth(codepoint: number): number;\n  getStringCellWidth(s: string): number;\n}\n\nexport interface IUnicodeVersionProvider {\n  readonly version: string;\n  wcwidth(ucs: number): 0 | 1 | 2;\n}\n\nexport const IDecorationService = createDecorator<IDecorationService>('DecorationService');\nexport interface IDecorationService extends IDisposable {\n  serviceBrand: undefined;\n  readonly decorations: IterableIterator<IInternalDecoration>;\n  readonly onDecorationRegistered: IEvent<IInternalDecoration>;\n  readonly onDecorationRemoved: IEvent<IInternalDecoration>;\n  registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined;\n  reset(): void;\n  /**\n   * Trigger a callback over the decoration at a cell (in no particular order). This uses a callback\n   * instead of an iterator as it's typically used in hot code paths.\n   */\n  forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void;\n}\nexport interface IInternalDecoration extends IDecoration {\n  readonly options: IDecorationOptions;\n  readonly backgroundColorRGB: IColor | undefined;\n  readonly foregroundColorRGB: IColor | undefined;\n  readonly onRenderEmitter: IEventEmitter<HTMLElement>;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharacterJoinerService, ICharSizeService, ICoreBrowserService, IRenderService } from 'browser/services/Services';\nimport { IColorSet } from 'browser/Types';\nimport { CanvasRenderer } from './CanvasRenderer';\nimport { IBufferService, ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { ITerminalAddon, Terminal } from 'xterm';\n\nexport class CanvasAddon implements ITerminalAddon {\n  private _terminal?: Terminal;\n  private _renderer?: CanvasRenderer;\n\n  public activate(terminal: Terminal): void {\n    if (!terminal.element) {\n      throw new Error('Cannot activate CanvasAddon before Terminal.open');\n    }\n    this._terminal = terminal;\n    const bufferService: IBufferService = (terminal as any)._core._bufferService;\n    const renderService: IRenderService = (terminal as any)._core._renderService;\n    const characterJoinerService: ICharacterJoinerService = (terminal as any)._core._characterJoinerService;\n    const charSizeService: ICharSizeService = (terminal as any)._core._charSizeService;\n    const coreService: ICoreService = (terminal as any)._core.coreService;\n    const coreBrowserService: ICoreBrowserService = (terminal as any)._core._coreBrowserService;\n    const decorationService: IDecorationService = (terminal as any)._core._decorationService;\n    const optionsService: IOptionsService = (terminal as any)._core.optionsService;\n    const colors: IColorSet = (terminal as any)._core._colorManager.colors;\n    const screenElement: HTMLElement = (terminal as any)._core.screenElement;\n    const linkifier = (terminal as any)._core.linkifier2;\n    this._renderer = new CanvasRenderer(colors, screenElement, linkifier, bufferService, charSizeService, optionsService, characterJoinerService, coreService, coreBrowserService, decorationService);\n    renderService.setRenderer(this._renderer);\n    renderService.onResize(bufferService.cols, bufferService.rows);\n  }\n\n  public dispose(): void {\n    if (!this._terminal) {\n      throw new Error('Cannot dispose CanvasAddon because it is activated');\n    }\n    const renderService: IRenderService = (this._terminal as any)._core._renderService;\n    renderService.setRenderer((this._terminal as any)._core._createRenderer());\n    renderService.onResize(this._terminal.cols, this._terminal.rows);\n    this._renderer?.dispose();\n    this._renderer = undefined;\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","constructor","_container","id","zIndex","_alpha","_colors","_rendererId","_bufferService","_optionsService","_decorationService","_coreBrowserService","_scaledCharWidth","_scaledCharHeight","_scaledCellWidth","_scaledCellHeight","_scaledCharLeft","_scaledCharTop","_columnSelectMode","_currentGlyphIdentifier","chars","code","bg","fg","bold","dim","italic","this","_canvas","document","createElement","classList","add","style","toString","_initCanvas","appendChild","canvas","dispose","removeElementFromParent","_charAtlas","_ctx","throwIfFalsy","getContext","alpha","_clearAll","onOptionsChanged","onBlur","onFocus","onCursorMove","onGridChanged","startRow","endRow","onSelectionChanged","start","end","columnSelectMode","_selectionStart","_selectionEnd","setColors","colorSet","_refreshCharAtlas","_setTransparency","oldCanvas","cloneNode","replaceChild","rows","acquireCharAtlas","rawOptions","dpr","warmUp","resize","scaledCellWidth","scaledCellHeight","scaledCharWidth","scaledCharHeight","scaledCharLeft","scaledCharTop","width","scaledCanvasWidth","height","scaledCanvasHeight","canvasWidth","canvasHeight","clearTextureAtlas","clear","_fillCells","x","y","fillRect","_fillMiddleLineAtCells","cellOffset","Math","ceil","_fillBottomLineAtCells","pixelOffset","_curlyUnderlineAtCell","save","beginPath","strokeStyle","fillStyle","lineWidth","xOffset","xLeft","xMid","xRight","yMid","yMidBot","yMidTop","moveTo","bezierCurveTo","stroke","restore","_dottedUnderlineAtCell","setLineDash","lineTo","closePath","_dashedUnderlineAtCell","_fillLeftLineAtCell","_strokeRectAtCell","strokeRect","clearRect","background","css","_clearCells","_fillCharTrueColor","cell","font","_getFont","textBaseline","TEXT_BASELINE","_clipRow","drawSuccess","customGlyphs","tryDrawCustomChar","getChars","fontSize","fillText","_drawChars","contrastColor","_getContrastColor","isFgRGB","isBgRGB","_drawUncachedChars","isInverse","isBgDefault","INVERTED_DEFAULT_COLOR","getBgColor","isFgDefault","getFgColor","DEFAULT_COLOR","drawBoldTextInBrightColors","isBold","WHITESPACE_CELL_CHAR","getCode","WHITESPACE_CELL_CODE","isDim","isItalic","hasOverrides","forEachDecorationAtCell","undefined","d","backgroundColorRGB","foregroundColorRGB","draw","fgOverride","color","opaque","AttributeData","toColorRGB","join","ansi","foreground","globalAlpha","DIM_OPACITY","rect","cols","clip","fontWeightBold","fontWeight","fontFamily","bgOverride","isTop","options","layer","rgba","selectionForeground","_isCellInSelection","minimumContrastRatio","excludeFromContrastRatioDemands","adjustedColor","contrastCache","getColor","fgColor","fgColorMode","getFgColorMode","bgColor","bgColorMode","getBgColorMode","temp","temp2","bgRgba","_resolveBackgroundRgba","fgRgba","_resolveForegroundRgba","result","ensureContrastRatio","setColor","channels","toCss","inverse","nextRendererId","CanvasRenderer","Disposable","_screenElement","linkifier2","_charSizeService","characterJoinerService","coreService","decorationService","super","_id","_onRequestRedraw","EventEmitter","allowTransparency","_renderLayers","TextRenderLayer","SelectionRenderLayer","LinkRenderLayer","CursorRenderLayer","dimensions","actualCellWidth","actualCellHeight","_devicePixelRatio","_updateDimensions","register","observeDevicePixelDimensions","window","w","h","_setCanvasDevicePixelDimensions","onRequestRedraw","event","l","removeTerminalFromCache","onDevicePixelRatioChange","onResize","colors","reset","onCharSizeChanged","_runOperation","fire","operation","renderRows","hasValidSize","floor","lineHeight","round","letterSpacing","_requestRedrawViewport","BaseRenderLayer","container","rendererId","bufferService","optionsService","_coreService","coreBrowserService","_cell","CellData","_state","isFocused","_cursorRenderers","_renderBarCursor","bind","_renderBlockCursor","_renderUnderlineCursor","_cursorBlinkStateManager","_clearCursor","restartBlinkAnimation","pause","buffer","resume","cursorBlink","CursorBlinkStateManager","_render","isPaused","triggeredByAnimationFrame","isCursorInitialized","isCursorHidden","cursorY","ybase","viewportRelativeCursorY","ydisp","cursorX","min","lines","get","loadCell","content","cursor","cursorStyle","_renderBlurCursor","getWidth","isCursorVisible","cursorWidth","cursorAccent","_renderCallback","_restartInterval","_blinkStartTimeout","_blinkInterval","clearInterval","clearTimeout","_animationFrame","cancelAnimationFrame","_animationTimeRestarted","Date","now","requestAnimationFrame","timeToStart","BLINK_INTERVAL","setTimeout","time","setInterval","cache","length","push","onShowLinkUnderline","e","_onShowLinkUnderline","onHideLinkUnderline","_onHideLinkUnderline","_clearCurrentLink","x1","y1","middleRowCount","y2","x2","is256Color","_clearState","_redrawSelection","_didStateChange","viewportStartRow","viewportEndRow","viewportCappedStartRow","max","viewportCappedEndRow","selectionBackgroundTransparent","selectionInactiveBackgroundTransparent","startCol","startRowEndCol","middleRowsCount","endCol","_areCoordinatesEqual","coord1","coord2","_characterJoinerService","_characterWidth","_characterFont","_characterOverlapCache","_workCell","GridCache","terminalFont","_forEachCell","firstRow","lastRow","callback","row","line","joinedRanges","getJoinedCharacters","isJoined","lastCharX","range","shift","JoinedCellData","translateToString","_isOverlapping","getCodePoint","NULL_CELL_CODE","_drawBackground","ctx","startX","startY","prevFillStyle","nextFillStyle","isBgPalette","multiplyOpacity","toColor","_drawForeground","isInvisible","isUnderline","isStrikethrough","isUnderlineColorDefault","isUnderlineColorRGB","getUnderlineColor","extended","underlineStyle","beginFrame","hasOwnProperty","overlaps","measureText","_didWarmUp","_doWarmUp","charAtlasCache","devicePixelRatio","newConfig","generateConfig","i","entry","ownedByIndex","ownedBy","indexOf","configEquals","config","atlas","splice","newEntry","DynamicCharAtlas","index","clonedColors","selectionBackground","slice","a","b","colorCode","TEXTURE_WIDTH","TEXTURE_HEIGHT","TRANSPARENT_COLOR","getGlyphCacheKey","glyph","BaseCharAtlas","_config","_drawToCacheCount","_glyphsWaitingOnBitmap","_bitmapCommitTimeout","_bitmap","_cacheCanvas","_cacheCtx","tmpCanvas","_tmpCtx","_width","_height","capacity","_cacheMap","LRUMap","prealloc","size","_canCache","glyphKey","cacheValue","_drawFromCache","peek","_drawToCache","set","_toCoordinateX","_toCoordinateY","isEmpty","cacheX","cacheY","drawImage","inBitmap","_getColorFromAnsiIndex","idx","DEFAULT_ANSI_COLORS","_getBackgroundColor","blend","_getForegroundColor","backgroundColor","globalCompositeOperation","fontStyle","imageData","getImageData","clearColor","offset","putImageData","_addGlyphToBitmap","isFirefox","isSafari","_generateBitmap","glyphsMovingToBitmap","createImageBitmap","then","bitmap","NoneCharAtlas","r","g","data","abs","_map","_head","_tail","_nodePool","_unlinkNode","node","prev","next","_appendNode","tail","count","nodePool","key","value","peekValue","head","pop","_color","TwoKeyMap","_css","setCss","getCss","DEFAULT_FOREGROUND","DEFAULT_BACKGROUND","DEFAULT_CURSOR","DEFAULT_CURSOR_ACCENT","DEFAULT_SELECTION","Object","freeze","v","toRgba","c","Error","_litmusColor","createLinearGradient","_contrastCache","ColorContrastCache","selectionBackgroundOpaque","selectionInactiveBackgroundOpaque","_updateRestoreColors","onOptionsChange","setTheme","theme","_parseColor","selectionInactiveBackground","nullColor","isOpaque","opacity","black","red","green","yellow","blue","magenta","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightMagenta","brightCyan","brightWhite","extendedAnsi","colorCount","restoreColor","slot","_restoreColors","fallback","console","warn","substring","split","map","component","Number","elements","parentElement","removeChild","isLegacyEdge","blockElementDefinitions","patternCharacterDefinitions","boxDrawingDefinitions","xp","yp","powerlineDefinitions","type","rightPadding","leftPadding","yOffset","blockElementDefinition","charDefinition","box","xEighth","yEighth","drawBlockElementChar","patternDefinition","patternSet","cachedPatterns","Map","pattern","tmpCtx","ImageData","startsWith","parseInt","parseFloat","createPattern","drawPatternChar","boxDrawingDefinition","instructions","entries","actualInstructions","instruction","f","svgToCanvasInstructionMap","error","args","translateArgs","drawBoxDrawingChar","powerlineDefinition","cssLineWidth","fill","drawPowerlineChar","clamp","cellWidth","cellHeight","doClamp","element","parentWindow","observer","ResizeObserver","find","target","disconnect","devicePixelContentBoxSize","inlineSize","blockSize","observe","toDisposable","isPowerlineGlyph","codepoint","isBoxOrBlockGlyph","firstCell","combinedData","isCombined","setFromCharData","getAsCharData","CharacterJoinerService","_characterJoiners","_nextCharacterJoinerId","handler","joiner","deregister","joinerId","ranges","lineStr","rangeStartColumn","currentStringIndex","rangeStartStringIndex","rangeAttrFG","getFg","rangeAttrBG","getBg","getTrimmedLength","_getJoinedRanges","startIndex","endIndex","lineData","text","allJoinedRanges","joinerRanges","j","_mergeRanges","_stringRangesToCellRanges","currentRangeIndex","currentRangeStarted","currentRange","getString","static","newRange","inRange","IBufferService","rgb","toPaddedHex","s","contrastRatio","l1","l2","toChannels","fgR","fgG","fgB","bgR","bgG","bgB","ratio","rgbaColor","factor","match","repeat","rgbaMatch","relativeLuminance2","rs","gs","bs","pow","relativeLuminance","reduceLuminance","cr","increaseLuminance","bgL","fgL","resultA","resultARatio","resultB","_listeners","_disposed","_event","listener","arg1","arg2","queue","call","from","to","disposeArray","disposables","_disposables","_isDisposed","unregister","array","_data","first","second","third","fourth","isNode","navigator","userAgent","platform","includes","test","isMac","isIpad","isIphone","isWindows","isLinux","ExtendedAttrs","clone","newObj","hasExtendedAttrs","isBlink","isProtected","isFgPalette","isAttributeDefault","updateExtended","underlineColor","getUnderlineColorMode","isUnderlineColorPalette","getUnderlineStyle","ext","urlId","_ext","_urlId","obj","stringFromCodePoint","charCodeAt","CHAR_DATA_ATTR_INDEX","combined","CHAR_DATA_CHAR_INDEX","CHAR_DATA_WIDTH_INDEX","DEFAULT_ATTR","DEFAULT_EXT","CHAR_DATA_CODE_INDEX","NULL_CELL_CHAR","NULL_CELL_WIDTH","WHITESPACE_CELL_WIDTH","codePoint","String","fromCharCode","_interim","decode","input","startPos","interim","Uint8Array","byte1","byte2","byte3","byte4","discardInterim","cp","tmp","pos","missing","fourStop","storeServiceDependency","serviceRegistry","ctor","has","decorator","arguments","LogLevelEnum","createDecorator","ICoreMouseService","ICoreService","ICharsetService","IDirtyRowService","IInstantiationService","ILogService","IOptionsService","IOscLinkService","IUnicodeService","IDecorationService","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","activate","terminal","_terminal","_core","renderService","_renderService","charSizeService","_colorManager","screenElement","linkifier","_renderer","setRenderer","_createRenderer"],"sourceRoot":""}