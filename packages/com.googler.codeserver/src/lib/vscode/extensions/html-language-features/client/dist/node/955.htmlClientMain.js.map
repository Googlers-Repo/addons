{"version":3,"sources":["webpack:///../node_modules/@microsoft/1ds-post-js/dist-esm/src/DataModels.js","webpack:///../node_modules/@microsoft/1ds-post-js/dist-esm/src/InternalConstants.js","webpack:///../node_modules/@microsoft/1ds-post-js/dist-esm/src/EventBatch.js","webpack:///../node_modules/@microsoft/1ds-post-js/dist-esm/src/ClockSkewManager.js","webpack:///../node_modules/@microsoft/1ds-post-js/dist-esm/src/KillSwitch.js","webpack:///../node_modules/@microsoft/1ds-post-js/dist-esm/src/RetryPolicy.js","webpack:///../node_modules/@microsoft/1ds-post-js/dist-esm/src/Serializer.js","webpack:///../node_modules/@microsoft/1ds-post-js/dist-esm/src/HttpManager.js","webpack:///../node_modules/@microsoft/1ds-post-js/dist-esm/src/TimeoutOverrideWrapper.js","webpack:///../node_modules/@microsoft/1ds-post-js/dist-esm/src/PostChannel.js"],"names":["RT_PROFILE","NRT_PROFILE","BE_PROFILE","STR_POST_METHOD","STR_DROPPED","STR_REQUEUE","DEFAULT_CONTENT_TYPE","STR_CONTENT_TYPE_HEADER","STR_CLIENT_VERSION","STR_CLIENT_ID","STR_TIME_DELTA_TO_APPLY","STR_UPLOAD_TIME","STR_API_KEY","STR_MSA_DEVICE_TICKET","STR_AUTH_XTOKEN","_getEventMsfpc","theEvent","intWeb","ext","_getMsfpc","theEvents","msfpc","lp","length","EventBatch","iKey","addEvents","events","concat","_self","this","_msfpc","Msfpc","count","addEvent","push","split","fromEvent","numEvents","cnt","splice","create","ClockSkewManager","_allowRequestSending","_shouldAddClockSkewHeaders","_isFirstRequest","_clockSkewHeaderValue","_clockSkewSet","allowRequestSending","firstRequestSent","shouldAddClockSkewHeaders","getClockSkewHeaderValue","setClockSkew","timeDeltaInMillis","__ieDyn","KillSwitch","_killedTokenDictionary","setKillSwitchTenants","killTokens","killDuration","killedTokens","values","result","value","durationMs","parseInt","i","ex","isTenantKilled","tenantToken","killDictionary","name","undefined","retryPolicyGetMillisToBackoffForRetry","retriesSoFar","waitDuration","randomBackoff","Math","floor","random","BaseBackoff","pow","min","_a","MaxRecordSize","MaxBeaconRecordSize","rCheckDot","Serializer","perfManager","valueSanitizer","stringifyObjects","enableCompoundKey","strBaseData","_checkForCompoundkey","_theSanitizer","_isReservedCache","_processPathKeys","srcObj","target","thePath","checkReserved","metadataPathKeys","metadataCallback","processSubKeys","key","srcValue","prop","path","name_1","theMetaPathKeys","destObj","test","subKeys","keyLen","slice","subKey","_isReservedField","handleField","newValue","newPath","createPayload","retryCnt","isTeardown","isSync","useSendBeacon","sendReason","sendType","apiKeys","payloadBlob","overflow","sizeExceed","failedEvts","batches","isBeacon","appendPayload","payload","theBatch","maxEventsPerBatch","canAddEvents","payloadEvents","eventsAdded","sizeExceeded","isBeaconPayload","requestMaxSize","recordMaxSize","joinCount","eventBlob","getEventBlob","blobLength","substr","apiKey","evts","max","eventData","serializedEvent","time","ver","serializedExt","eventExt","serializedData","baseType","serializedBaseData","baseData","pathKeys","_addJSONPropertyMetaData","data","JSON","stringify","item","e","json","propKeys","propertyValue","encodedTypeValue","kind","propertyType","metaData","f","metaTarget","newTarget","t","_noResponseQs","_eventActionMap","_collectorQsHeaders","_collectorHeaderToQs","_addCollectorHeaderQsMapping","qsName","headerName","allowQs","_getResponseText","xhr","responseText","_hasHeader","headers","header","hasHeader","keys","lowerHeader","toLowerCase","_addRequestDetails","details","useHeaders","hdrs","useHdrs","url","HttpManager","maxConnections","maxRequestRetriesBeforeBackoff","actions","timeoutOverride","_responseHandlers","_postManager","_logger","_sendInterfaces","_core","_cookieMgr","_xhrTimeout","_disableXhrSync","_urlString","_killSwitch","_paused","_clockSkewManager","_useBeacons","_outstandingRequests","_customHttpInterface","_queryStringParameters","_headers","_batchQueue","_serializer","_enableEventTimings","_isUnloading","_useHeaders","_sendCredentials","_getSenderInterface","transports","syncSupport","transportType","sendPostFunc","_xdrSendPost","_xhrSendPost","_fetchSendPost","_beaconSendPost","_transport","_isSync","sendPOST","oncomplete","sync","xdr","XDomainRequest","open","urlString","timeout","onload","response","_doOnComplete","_handleCollectorResponse","onerror","ontimeout","onprogress","send","set","theUrl","ignoreResponse","responseHandled","requestInit","body","method","keepalive","_sendReason","credentials","fetch","then","headerMap","text","status","error","_appendHeader","theHeaders","getResponseHeader","xhrComplete","responseTxt","getAllResponseHeaders","headersString","headersArray","headerEntry","idx","indexOf","substring","_convertAllHeadersToMap","_getAllResponseHeaders","disableXhrSync","xhrRequest","setRequestHeader","thePayload","_thePayload","nav_1","sendBeacon","droppedBatches_1","_sendBatchesNotification","_isBeaconPayload","_adjustSendType","_hasIdleConnection","_clearQueue","theQueue","_canSendPayload","theBatches","_createDebugBatches","_sendBatches","retryCount","orgBatches_1","isSynchronous_1","perfEvt","droppedBatches","serializationStart","sendInterface","isBeaconTransport","shift","_doPayloadSend","isSynchronous","_setTimingValue","timings","identifier","serializationCompleted","useSendHook_1","sendHook","sendInterface_1","useHeaders_1","requestDetails_1","requestDetails","apiQsKeys","toString","encodeURIComponent","getWParam","wParam","_buildRequestDetails","sendEventStart_1","batchLp","evtLp","telemetryItem","orgPayloadData","STR_CACHE_CONTROL","sender","onComplete","httpStatusCode","reason","isRetrying","backOffTrans","shouldRetry","STR_TIME_DELTA_HEADER","STR_KILL_DURATION_HEADER","STR_KILL_TOKENS_HEADER","killToken","removedEvents","retryCount_1","_doAction","batchReason","_backOffTransmission","_clearBackOff","sendEventCompleted_1","sendEventCompleted","_addEventCompletedTimings","_addCompleteTimings","sendQueuedRequests","_handleRequestFinished","_retryRequestIfNeeded","sendListener","hookData_1","senderCalled_1","cb","interval","responseHandlers","parse","webResult","sendSync","theAction_1","action","isSyncRequest_1","call","initialize","endpointUrl","core","postChannel","httpInterface","channelConfig","avoidOptions","getCookieMgr","config","disableEventTimings","diagLog","xhrTimeout","syncHttpInterface","beaconHttpInterface","alwaysUseXhrOverride","fetchSyncHttpInterface","location_1","protocol","theTransports","configTransports","addQueryStringParameter","addHeader","canSendRequest","isCompletelyIdle","setUnloading","addBatch","teardown","pause","resume","sendSynchronousBatch","batch","defaultSetTimeout","callback","ms","args","_i","arguments","setTimeout","defaultClearTimeout","timeoutId","clearTimeout","createTimeoutWrapper","argSetTimeout","argClearTimeout","clear","strEventsDiscarded","_super","PostChannel","_config","_this","priority","version","_xhrOverride","_httpManager","_autoFlushEventsLimit","_autoFlushBatchLimit","_delayedBatchReason","_evtNamespace","_timeoutWrapper","_isTeardownCalled","_flushCallbackQueue","_flushCallbackTimerId","_immediateQueueSize","_immediateQueueSizeLimit","_queueSize","_queueSizeLimit","_profiles","_currentProfile","_scheduledTimerId","_immediateTimerId","_currentBackoffCount","_timerCount","_batchQueues","_delayedBatchSendLatency","_optimizeObject","_isPageUnloadTriggered","_maxEventSendAttempts","_maxUnloadEventSendAttempts","_base","_handleUnloadEvents","evt","event","type","_releaseAllQueues","_handleShowEvents","_addEventToQueues","append","sendAttempt","latency","evtLatency","queueSize","queueLimit","eventDropped","_addEventToProperQueue","dropLatency","dropNumber","currentLatency","eventBatch","_getEventBatch","droppedEvents","droppedCount","_notifyBatchEvents","EventsDiscardedReason","_resetQueueCounts","_dropEventWithLatencyOrLess","_notifyEvents","_sendEventsForLatencyAndAbove","queued","_queueBatches","_hasEvents","_scheduleTimer","immediateTimeOut","_createTimer","timeOut","_initDefaults","requeue","_requeueEvents","_sendingEvent","sent","_eventsSentEvent","drop","_eventsDropped","rspFail","_eventsResponseFail","oth","_otherEvent","_initializeProfiles","iKeyMap","_setAutoLimits","theTimerFunc","timerMultiplier","_clearScheduledTimer","batchQueue","_performAutoFlush","isAsync","doFlush","flush","immediateQueue","normalQueue","_loop_1","eventsQueued","latencyToProcess","_flushImpl","_waitForIdleManager","maxSendAttempts","_callNotification","evtName","theArgs","manager","_notificationManager","notifyFunc","apply","extraArgs","isSyncRequest","disableAutoBatchFlushLimit","MaxNumberEventPerBatch","coreConfig","extensions","extendedCore","evtNamespace","ctx","_getTelCtx","extensionConfig","getExtCfg","setTimeoutOverride","clearTimeoutOverride","disableOptimizeObj","existingGetWParamMethod","wparam","ignoreMc1Ms0CookieProcessing","_hookWParam","eventsLimitInMem","immediateEventLimit","autoFlushEventsLimit","httpXHROverride","anonCookieName","payloadPreprocessor","payloadListener","overrideEndpointUrl","NotificationManager","excludePageUnloadEvents","disablePageUnloadEvents","disablePageShowEvents","setInitialized","processTelemetry","ev","itemCtx","disableTelemetry","processNext","_doTeardown","unloadCtx","unloadState","setEventQueueLimits","eventLimit","autoFlushLimit","addResponseHandler","responseHandler","_loadTransmitProfiles","profiles","profileName","profileValue","profLen","directValue","ceil","async","cleared","setMsaAuthTicket","ticket","hasEvents","_setTransmitProfile","BaseTelemetryPlugin"],"mappings":"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","file":"955.htmlClientMain.js","sourcesContent":["/*\n * 1DS JS SDK POST plugin, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n * Real Time profile (default profile). RealTime Latency events are sent every 1 sec and\r\n * Normal Latency events are sent every 2 sec.\r\n */\r\nexport var RT_PROFILE = \"REAL_TIME\";\r\n/**\r\n * Near Real Time profile. RealTime Latency events are sent every 3 sec and\r\n * Normal Latency events are sent every 6 sec.\r\n */\r\nexport var NRT_PROFILE = \"NEAR_REAL_TIME\";\r\n/**\r\n * Best Effort. RealTime Latency events are sent every 9 sec and\r\n * Normal Latency events are sent every 18 sec.\r\n */\r\nexport var BE_PROFILE = \"BEST_EFFORT\";\r\n//# sourceMappingURL=DataModels.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n\r\n// Licensed under the MIT License.\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Note: DON'T Export these const from the package as we are still targeting ES3 this will export a mutable variables that someone could change!!!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Generally you should only put values that are used more than 2 times and then only if not already exposed as a constant (such as SdkCoreNames)\r\n// as when using \"short\" named values from here they will be will be minified smaller than the SdkCoreNames[eSdkCoreNames.xxxx] value.\r\nexport var STR_POST_METHOD = \"POST\";\r\nexport var STR_DISABLED_PROPERTY_NAME = \"Microsoft_ApplicationInsights_BypassAjaxInstrumentation\";\r\nexport var STR_DROPPED = \"drop\";\r\nexport var STR_SENDING = \"send\";\r\nexport var STR_REQUEUE = \"requeue\";\r\nexport var STR_RESPONSE_FAIL = \"rspFail\";\r\nexport var STR_OTHER = \"oth\";\r\nexport var DEFAULT_CACHE_CONTROL = \"no-cache, no-store\";\r\nexport var DEFAULT_CONTENT_TYPE = \"application/x-json-stream\";\r\nexport var STR_CACHE_CONTROL = \"cache-control\";\r\nexport var STR_CONTENT_TYPE_HEADER = \"content-type\";\r\nexport var STR_KILL_TOKENS_HEADER = \"kill-tokens\";\r\nexport var STR_KILL_DURATION_HEADER = \"kill-duration\";\r\nexport var STR_KILL_DURATION_SECONDS_HEADER = \"kill-duration-seconds\";\r\nexport var STR_TIME_DELTA_HEADER = \"time-delta-millis\";\r\nexport var STR_CLIENT_VERSION = \"client-version\";\r\nexport var STR_CLIENT_ID = \"client-id\";\r\nexport var STR_TIME_DELTA_TO_APPLY = \"time-delta-to-apply-millis\";\r\nexport var STR_UPLOAD_TIME = \"upload-time\";\r\nexport var STR_API_KEY = \"apikey\";\r\nexport var STR_MSA_DEVICE_TICKET = \"AuthMsaDeviceTicket\";\r\nexport var STR_AUTH_XTOKEN = \"AuthXToken\";\r\nexport var STR_SDK_VERSION = \"sdk-version\";\r\nexport var STR_NO_RESPONSE_BODY = \"NoResponseBody\";\r\nexport var STR_MSFPC = \"msfpc\";\r\nexport var STR_TRACE = \"trace\";\r\nexport var STR_USER = \"user\";\r\n//# sourceMappingURL=InternalConstants.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n* EventBatch.ts\r\n* @author Nev Wylie (newylie)\r\n* @copyright Microsoft 2020\r\n*/\r\nimport { isNullOrUndefined, isValueAssigned } from \"@microsoft/1ds-core-js\";\r\nimport { STR_MSFPC } from \"./InternalConstants\";\r\nfunction _getEventMsfpc(theEvent) {\r\n    var intWeb = ((theEvent.ext || {})[\"intweb\"]);\r\n    if (intWeb && isValueAssigned(intWeb[STR_MSFPC])) {\r\n        return intWeb[STR_MSFPC];\r\n    }\r\n    return null;\r\n}\r\nfunction _getMsfpc(theEvents) {\r\n    var msfpc = null;\r\n    for (var lp = 0; msfpc === null && lp < theEvents.length; lp++) {\r\n        msfpc = _getEventMsfpc(theEvents[lp]);\r\n    }\r\n    return msfpc;\r\n}\r\n/**\r\n* This class defines a \"batch\" events related to a specific iKey, it is used by the PostChannel and HttpManager\r\n* to collect and transfer ownership of events without duplicating them in-memory. This reduces the previous\r\n* array duplication and shared ownership issues that occurred due to race conditions caused by the async nature\r\n* of sending requests.\r\n*/\r\nvar EventBatch = /** @class */ (function () {\r\n    /**\r\n     * Private constructor so that caller is forced to use the static create method.\r\n     * @param iKey - The iKey to associate with the events (not validated)\r\n     * @param addEvents - The optional collection of events to assign to this batch - defaults to an empty array.\r\n     */\r\n    function EventBatch(iKey, addEvents) {\r\n        var events = addEvents ? [].concat(addEvents) : [];\r\n        var _self = this;\r\n        var _msfpc = _getMsfpc(events);\r\n        _self.iKey = function () {\r\n            return iKey;\r\n        };\r\n        _self.Msfpc = function () {\r\n            // return the cached value unless it's undefined -- used to avoid cpu\r\n            return _msfpc || \"\";\r\n        };\r\n        _self.count = function () {\r\n            return events.length;\r\n        };\r\n        _self.events = function () {\r\n            return events;\r\n        };\r\n        _self.addEvent = function (theEvent) {\r\n            if (theEvent) {\r\n                events.push(theEvent);\r\n                if (!_msfpc) {\r\n                    // Not found so try and find one\r\n                    _msfpc = _getEventMsfpc(theEvent);\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        _self.split = function (fromEvent, numEvents) {\r\n            // Create a new batch with the same iKey\r\n            var theEvents;\r\n            if (fromEvent < events.length) {\r\n                var cnt = events.length - fromEvent;\r\n                if (!isNullOrUndefined(numEvents)) {\r\n                    cnt = numEvents < cnt ? numEvents : cnt;\r\n                }\r\n                theEvents = events.splice(fromEvent, cnt);\r\n                // reset the fetched msfpc value\r\n                _msfpc = _getMsfpc(events);\r\n            }\r\n            return new EventBatch(iKey, theEvents);\r\n        };\r\n    }\r\n    /**\r\n     * Creates a new Event Batch object\r\n     * @param iKey The iKey associated with this batch of events\r\n     */\r\n    EventBatch.create = function (iKey, theEvents) {\r\n        return new EventBatch(iKey, theEvents);\r\n    };\r\n    return EventBatch;\r\n}());\r\nexport { EventBatch };\r\n//# sourceMappingURL=EventBatch.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n* ClockSkewManager.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2018\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\n/**\r\n* Class to manage clock skew correction.\r\n*/\r\nvar ClockSkewManager = /** @class */ (function () {\r\n    function ClockSkewManager() {\r\n        var _allowRequestSending = true;\r\n        var _shouldAddClockSkewHeaders = true;\r\n        var _isFirstRequest = true;\r\n        var _clockSkewHeaderValue = \"use-collector-delta\";\r\n        var _clockSkewSet = false;\r\n        dynamicProto(ClockSkewManager, this, function (_self) {\r\n            /**\r\n             * Determine if requests can be sent.\r\n             * @returns True if requests can be sent, false otherwise.\r\n             */\r\n            _self.allowRequestSending = function () {\r\n                return _allowRequestSending;\r\n            };\r\n            /**\r\n             * Tells the ClockSkewManager that it should assume that the first request has now been sent,\r\n             * If this method had not yet been called AND the clock Skew had not been set this will set\r\n             * allowRequestSending to false until setClockSet() is called.\r\n             */\r\n            _self.firstRequestSent = function () {\r\n                if (_isFirstRequest) {\r\n                    _isFirstRequest = false;\r\n                    if (!_clockSkewSet) {\r\n                        // Block sending until we get the first clock Skew\r\n                        _allowRequestSending = false;\r\n                    }\r\n                }\r\n            };\r\n            /**\r\n             * Determine if clock skew headers should be added to the request.\r\n             * @returns True if clock skew headers should be added, false otherwise.\r\n             */\r\n            _self.shouldAddClockSkewHeaders = function () {\r\n                return _shouldAddClockSkewHeaders;\r\n            };\r\n            /**\r\n             * Gets the clock skew header value.\r\n             * @returns The clock skew header value.\r\n             */\r\n            _self.getClockSkewHeaderValue = function () {\r\n                return _clockSkewHeaderValue;\r\n            };\r\n            /**\r\n             * Sets the clock skew header value. Once clock skew is set this method\r\n             * is no-op.\r\n             * @param timeDeltaInMillis - Time delta to be saved as the clock skew header value.\r\n             */\r\n            _self.setClockSkew = function (timeDeltaInMillis) {\r\n                if (!_clockSkewSet) {\r\n                    if (timeDeltaInMillis) {\r\n                        _clockSkewHeaderValue = timeDeltaInMillis;\r\n                        _shouldAddClockSkewHeaders = true;\r\n                        _clockSkewSet = true;\r\n                    }\r\n                    else {\r\n                        _shouldAddClockSkewHeaders = false;\r\n                    }\r\n                    // Unblock sending\r\n                    _allowRequestSending = true;\r\n                }\r\n            };\r\n        });\r\n    }\r\n// Removed Stub for ClockSkewManager.prototype.allowRequestSending.\r\n// Removed Stub for ClockSkewManager.prototype.firstRequestSent.\r\n// Removed Stub for ClockSkewManager.prototype.shouldAddClockSkewHeaders.\r\n// Removed Stub for ClockSkewManager.prototype.getClockSkewHeaderValue.\r\n// Removed Stub for ClockSkewManager.prototype.setClockSkew.\r\n    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n    // this will be removed when ES3 support is dropped.\n    ClockSkewManager.__ieDyn=1;\n\n    return ClockSkewManager;\r\n}());\r\nexport default ClockSkewManager;\r\n//# sourceMappingURL=ClockSkewManager.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n* KillSwitch.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2018\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { arrForEach, dateNow, strTrim } from \"@microsoft/1ds-core-js\";\r\nvar SecToMsMultiplier = 1000;\r\n/**\r\n* Class to stop certain tenants sending events.\r\n*/\r\nvar KillSwitch = /** @class */ (function () {\r\n    function KillSwitch() {\r\n        var _killedTokenDictionary = {};\r\n        function _normalizeTenants(values) {\r\n            var result = [];\r\n            if (values) {\r\n                arrForEach(values, function (value) {\r\n                    result.push(strTrim(value));\r\n                });\r\n            }\r\n            return result;\r\n        }\r\n        dynamicProto(KillSwitch, this, function (_self) {\r\n            _self.setKillSwitchTenants = function (killTokens, killDuration) {\r\n                if (killTokens && killDuration) {\r\n                    try {\r\n                        var killedTokens = _normalizeTenants(killTokens.split(\",\"));\r\n                        if (killDuration === \"this-request-only\") {\r\n                            return killedTokens;\r\n                        }\r\n                        var durationMs = parseInt(killDuration, 10) * SecToMsMultiplier;\r\n                        for (var i = 0; i < killedTokens.length; ++i) {\r\n                            _killedTokenDictionary[killedTokens[i]] = dateNow() + durationMs;\r\n                        }\r\n                    }\r\n                    catch (ex) {\r\n                        return [];\r\n                    }\r\n                }\r\n                return [];\r\n            };\r\n            _self.isTenantKilled = function (tenantToken) {\r\n                var killDictionary = _killedTokenDictionary;\r\n                var name = strTrim(tenantToken);\r\n                if (killDictionary[name] !== undefined && killDictionary[name] > dateNow()) {\r\n                    return true;\r\n                }\r\n                delete killDictionary[name];\r\n                return false;\r\n            };\r\n        });\r\n    }\r\n// Removed Stub for KillSwitch.prototype.setKillSwitchTenants.\r\n// Removed Stub for KillSwitch.prototype.isTenantKilled.\r\n    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n    // this will be removed when ES3 support is dropped.\n    KillSwitch.__ieDyn=1;\n\n    return KillSwitch;\r\n}());\r\nexport default KillSwitch;\r\n//# sourceMappingURL=KillSwitch.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n* RetryPolicy.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2018\r\n*/\r\nvar RandomizationLowerThreshold = 0.8;\r\nvar RandomizationUpperThreshold = 1.2;\r\nvar BaseBackoff = 3000;\r\nvar MaxBackoff = 600000;\r\n/**\r\n * Determine if the request should be retried for the given status code.\r\n * The below expression reads that we should only retry for:\r\n *      - HttpStatusCodes that are smaller than 300.\r\n *      - HttpStatusCodes greater or equal to 500 (except for 501-NotImplement\r\n *        and 505-HttpVersionNotSupport).\r\n *      - HttpStatusCode 408-RequestTimeout.\r\n *      - HttpStatusCode 429.\r\n * This is based on Microsoft.WindowsAzure.Storage.RetryPolicies.ExponentialRetry class\r\n * @param httpStatusCode - The status code returned for the request.\r\n * @returns True if request should be retried, false otherwise.\r\n */\r\nexport function retryPolicyShouldRetryForStatus(httpStatusCode) {\r\n    /* tslint:disable:triple-equals */\r\n    // Disabling triple-equals rule to avoid httpOverrides from failing because they are returning a string value\r\n    return !((httpStatusCode >= 300 && httpStatusCode < 500 && httpStatusCode != 408 && httpStatusCode != 429)\r\n        || (httpStatusCode == 501)\r\n        || (httpStatusCode == 505));\r\n    /* tslint:enable:triple-equals */\r\n}\r\n/**\r\n * Gets the number of milliseconds to back off before retrying the request. The\r\n * back off duration is exponentially scaled based on the number of retries already\r\n * done for the request.\r\n * @param retriesSoFar - The number of times the request has already been retried.\r\n * @returns The back off duration for the request before it can be retried.\r\n */\r\nexport function retryPolicyGetMillisToBackoffForRetry(retriesSoFar) {\r\n    var waitDuration = 0;\r\n    var minBackoff = BaseBackoff * RandomizationLowerThreshold;\r\n    var maxBackoff = BaseBackoff * RandomizationUpperThreshold;\r\n    var randomBackoff = Math.floor(Math.random() * (maxBackoff - minBackoff)) + minBackoff;\r\n    waitDuration = Math.pow(2, retriesSoFar) * randomBackoff;\r\n    return Math.min(waitDuration, MaxBackoff);\r\n}\r\n//# sourceMappingURL=RetryPolicy.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n* Serializer.ts\r\n* @author Abhilash Panwar (abpanwar); Hector Hernandez (hectorh); Nev Wylie (newylie)\r\n* @copyright Microsoft 2018-2020\r\n*/\r\n// @skip-file-minify\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { arrIndexOf, doPerf, getCommonSchemaMetaData, getTenantId, isArray, isValueAssigned, objForEachKey, sanitizeProperty, strStartsWith } from \"@microsoft/1ds-core-js\";\r\nimport { EventBatch } from \"./EventBatch\";\r\n/**\r\n * Note: This is an optimization for V8-based browsers. When V8 concatenates a string,\r\n * the strings are only joined logically using a \"cons string\" or \"constructed/concatenated\r\n * string\". These containers keep references to one another and can result in very large\r\n * memory usage. For example, if a 2MB string is constructed by concatenating 4 bytes\r\n * together at a time, the memory usage will be ~44MB; so ~22x increase. The strings are\r\n * only joined together when an operation requiring their joining takes place, such as\r\n * substr(). This function is called when adding data to this buffer to ensure these\r\n * types of strings are periodically joined to reduce the memory footprint.\r\n * Setting to every 20 events as the JSON.stringify() may have joined many strings\r\n * and calling this too much causes a minor delay while processing.\r\n */\r\nvar _MAX_STRING_JOINS = 20;\r\nvar RequestSizeLimitBytes = 3984588; // approx 3.8 Mb\r\nvar BeaconRequestSizeLimitBytes = 65000; // approx 64kb (the current Edge, Firefox and Chrome max limit)\r\nvar MaxRecordSize = 2000000; // approx 2 Mb\r\nvar MaxBeaconRecordSize = Math.min(MaxRecordSize, BeaconRequestSizeLimitBytes);\r\nvar metadata = \"metadata\";\r\nvar f = \"f\";\r\nvar rCheckDot = /\\./;\r\n/**\r\n* Class to handle serialization of event and request.\r\n* Currently uses Bond for serialization. Please note that this may be subject to change.\r\n*/\r\nvar Serializer = /** @class */ (function () {\r\n    function Serializer(perfManager, valueSanitizer, stringifyObjects, enableCompoundKey) {\r\n        var strData = \"data\";\r\n        var strBaseData = \"baseData\";\r\n        var strExt = \"ext\";\r\n        var _checkForCompoundkey = !!enableCompoundKey;\r\n        var _processSubMetaData = true;\r\n        var _theSanitizer = valueSanitizer;\r\n        var _isReservedCache = {};\r\n        dynamicProto(Serializer, this, function (_self) {\r\n            _self.createPayload = function (retryCnt, isTeardown, isSync, useSendBeacon, sendReason, sendType) {\r\n                return {\r\n                    apiKeys: [],\r\n                    payloadBlob: \"\",\r\n                    overflow: null,\r\n                    sizeExceed: [],\r\n                    failedEvts: [],\r\n                    batches: [],\r\n                    numEvents: 0,\r\n                    retryCnt: retryCnt,\r\n                    isTeardown: isTeardown,\r\n                    isSync: isSync,\r\n                    isBeacon: useSendBeacon,\r\n                    sendType: sendType,\r\n                    sendReason: sendReason\r\n                };\r\n            };\r\n            _self.appendPayload = function (payload, theBatch, maxEventsPerBatch) {\r\n                var canAddEvents = payload && theBatch && !payload.overflow;\r\n                if (canAddEvents) {\r\n                    doPerf(perfManager, function () { return \"Serializer:appendPayload\"; }, function () {\r\n                        var theEvents = theBatch.events();\r\n                        var payloadBlob = payload.payloadBlob;\r\n                        var payloadEvents = payload.numEvents;\r\n                        var eventsAdded = false;\r\n                        var sizeExceeded = [];\r\n                        var failedEvts = [];\r\n                        var isBeaconPayload = payload.isBeacon;\r\n                        var requestMaxSize = isBeaconPayload ? BeaconRequestSizeLimitBytes : RequestSizeLimitBytes;\r\n                        var recordMaxSize = isBeaconPayload ? MaxBeaconRecordSize : MaxRecordSize;\r\n                        var lp = 0;\r\n                        var joinCount = 0;\r\n                        while (lp < theEvents.length) {\r\n                            var theEvent = theEvents[lp];\r\n                            if (theEvent) {\r\n                                if (payloadEvents >= maxEventsPerBatch) {\r\n                                    // Maximum events per payload reached, so don't add any more\r\n                                    payload.overflow = theBatch.split(lp);\r\n                                    break;\r\n                                }\r\n                                var eventBlob = _self.getEventBlob(theEvent);\r\n                                if (eventBlob && eventBlob.length <= recordMaxSize) {\r\n                                    // This event will fit into the payload\r\n                                    var blobLength = eventBlob.length;\r\n                                    var currentSize = payloadBlob.length;\r\n                                    if (currentSize + blobLength > requestMaxSize) {\r\n                                        // Request or batch size exceeded, so don't add any more to the payload\r\n                                        payload.overflow = theBatch.split(lp);\r\n                                        break;\r\n                                    }\r\n                                    if (payloadBlob) {\r\n                                        payloadBlob += \"\\n\";\r\n                                    }\r\n                                    payloadBlob += eventBlob;\r\n                                    joinCount++;\r\n                                    // v8 memory optimization only\r\n                                    if (joinCount > _MAX_STRING_JOINS) {\r\n                                        // this substr() should cause the constructed string to join\r\n                                        payloadBlob.substr(0, 1);\r\n                                        joinCount = 0;\r\n                                    }\r\n                                    eventsAdded = true;\r\n                                    payloadEvents++;\r\n                                }\r\n                                else {\r\n                                    if (eventBlob) {\r\n                                        // Single event size exceeded so remove from the batch\r\n                                        sizeExceeded.push(theEvent);\r\n                                    }\r\n                                    else {\r\n                                        failedEvts.push(theEvent);\r\n                                    }\r\n                                    // We also need to remove this event from the existing array, otherwise a notification will be sent\r\n                                    // indicating that it was successfully sent\r\n                                    theEvents.splice(lp, 1);\r\n                                    lp--;\r\n                                }\r\n                            }\r\n                            lp++;\r\n                        }\r\n                        if (sizeExceeded && sizeExceeded.length > 0) {\r\n                            payload.sizeExceed.push(EventBatch.create(theBatch.iKey(), sizeExceeded));\r\n                            // Remove the exceeded events from the batch\r\n                        }\r\n                        if (failedEvts && failedEvts.length > 0) {\r\n                            payload.failedEvts.push(EventBatch.create(theBatch.iKey(), failedEvts));\r\n                            // Remove the failed events from the batch\r\n                        }\r\n                        if (eventsAdded) {\r\n                            payload.batches.push(theBatch);\r\n                            payload.payloadBlob = payloadBlob;\r\n                            payload.numEvents = payloadEvents;\r\n                            var apiKey = theBatch.iKey();\r\n                            if (arrIndexOf(payload.apiKeys, apiKey) === -1) {\r\n                                payload.apiKeys.push(apiKey);\r\n                            }\r\n                        }\r\n                    }, function () { return ({ payload: payload, theBatch: { iKey: theBatch.iKey(), evts: theBatch.events() }, max: maxEventsPerBatch }); });\r\n                }\r\n                return canAddEvents;\r\n            };\r\n            _self.getEventBlob = function (eventData) {\r\n                try {\r\n                    return doPerf(perfManager, function () { return \"Serializer.getEventBlob\"; }, function () {\r\n                        var serializedEvent = {};\r\n                        // Adding as dynamic keys for v8 performance\r\n                        serializedEvent.name = eventData.name;\r\n                        serializedEvent.time = eventData.time;\r\n                        serializedEvent.ver = eventData.ver;\r\n                        serializedEvent.iKey = \"o:\" + getTenantId(eventData.iKey);\r\n                        // Assigning local var so usage in part b/c don't throw if there is no ext\r\n                        var serializedExt = {};\r\n                        // Part A\r\n                        var eventExt = eventData[strExt];\r\n                        if (eventExt) {\r\n                            // Only assign ext if the event had one (There are tests covering this use case)\r\n                            serializedEvent[strExt] = serializedExt;\r\n                            objForEachKey(eventExt, function (key, value) {\r\n                                var data = serializedExt[key] = {};\r\n                                // Don't include a metadata callback as we don't currently set metadata Part A fields\r\n                                _processPathKeys(value, data, \"ext.\" + key, true, null, null, true);\r\n                            });\r\n                        }\r\n                        var serializedData = serializedEvent[strData] = {};\r\n                        serializedData.baseType = eventData.baseType;\r\n                        var serializedBaseData = serializedData[strBaseData] = {};\r\n                        // Part B\r\n                        _processPathKeys(eventData.baseData, serializedBaseData, strBaseData, false, [strBaseData], function (pathKeys, name, value) {\r\n                            _addJSONPropertyMetaData(serializedExt, pathKeys, name, value);\r\n                        }, _processSubMetaData);\r\n                        // Part C\r\n                        _processPathKeys(eventData.data, serializedData, strData, false, [], function (pathKeys, name, value) {\r\n                            _addJSONPropertyMetaData(serializedExt, pathKeys, name, value);\r\n                        }, _processSubMetaData);\r\n                        return JSON.stringify(serializedEvent);\r\n                    }, function () { return ({ item: eventData }); });\r\n                }\r\n                catch (e) {\r\n                    return null;\r\n                }\r\n            };\r\n            function _isReservedField(path, name) {\r\n                var result = _isReservedCache[path];\r\n                if (result === undefined) {\r\n                    if (path.length >= 7) {\r\n                        // Do not allow the changing of fields located in the ext.metadata or ext.web extension\r\n                        result = strStartsWith(path, \"ext.metadata\") || strStartsWith(path, \"ext.web\");\r\n                    }\r\n                    _isReservedCache[path] = result;\r\n                }\r\n                return result;\r\n            }\r\n            function _processPathKeys(srcObj, target, thePath, checkReserved, metadataPathKeys, metadataCallback, processSubKeys) {\r\n                objForEachKey(srcObj, function (key, srcValue) {\r\n                    var prop = null;\r\n                    if (srcValue || isValueAssigned(srcValue)) {\r\n                        var path = thePath;\r\n                        var name_1 = key;\r\n                        var theMetaPathKeys = metadataPathKeys;\r\n                        var destObj = target;\r\n                        // Handle keys with embedded '.', like \"TestObject.testProperty\"\r\n                        if (_checkForCompoundkey && !checkReserved && rCheckDot.test(key)) {\r\n                            var subKeys = key.split(\".\");\r\n                            var keyLen = subKeys.length;\r\n                            if (keyLen > 1) {\r\n                                if (theMetaPathKeys) {\r\n                                    // Create a copy of the meta path keys so we can add the extra ones\r\n                                    theMetaPathKeys = theMetaPathKeys.slice();\r\n                                }\r\n                                for (var lp = 0; lp < keyLen - 1; lp++) {\r\n                                    var subKey = subKeys[lp];\r\n                                    // Add/reuse the sub key object\r\n                                    destObj = destObj[subKey] = destObj[subKey] || {};\r\n                                    path += \".\" + subKey;\r\n                                    if (theMetaPathKeys) {\r\n                                        theMetaPathKeys.push(subKey);\r\n                                    }\r\n                                }\r\n                                name_1 = subKeys[keyLen - 1];\r\n                            }\r\n                        }\r\n                        var isReserved = checkReserved && _isReservedField(path, name_1);\r\n                        if (!isReserved && _theSanitizer && _theSanitizer.handleField(path, name_1)) {\r\n                            prop = _theSanitizer.value(path, name_1, srcValue, stringifyObjects);\r\n                        }\r\n                        else {\r\n                            prop = sanitizeProperty(name_1, srcValue, stringifyObjects);\r\n                        }\r\n                        if (prop) {\r\n                            // Set the value\r\n                            var newValue = prop.value;\r\n                            destObj[name_1] = newValue;\r\n                            if (metadataCallback) {\r\n                                metadataCallback(theMetaPathKeys, name_1, prop);\r\n                            }\r\n                            if (processSubKeys && typeof newValue === \"object\" && !isArray(newValue)) {\r\n                                var newPath = theMetaPathKeys;\r\n                                if (newPath) {\r\n                                    newPath = newPath.slice();\r\n                                    newPath.push(name_1);\r\n                                }\r\n                                // Make sure we process sub objects as well (for value sanitization and metadata)\r\n                                _processPathKeys(srcValue, newValue, path + \".\" + name_1, checkReserved, newPath, metadataCallback, processSubKeys);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n// Removed Stub for Serializer.prototype.createPayload.\r\n// Removed Stub for Serializer.prototype.appendPayload.\r\n// Removed Stub for Serializer.prototype.getEventBlob.\r\n// Removed Stub for Serializer.prototype.handleField.\r\n// Removed Stub for Serializer.prototype.getSanitizer.\r\n    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n    // this will be removed when ES3 support is dropped.\n    Serializer.__ieDyn=1;\n\n    return Serializer;\r\n}());\r\nexport { Serializer };\r\n/**\r\n * @ignore\r\n */\r\nfunction _addJSONPropertyMetaData(json, propKeys, name, propertyValue) {\r\n    if (propertyValue && json) {\r\n        var encodedTypeValue = getCommonSchemaMetaData(propertyValue.value, propertyValue.kind, propertyValue.propertyType);\r\n        if (encodedTypeValue > -1) {\r\n            // Add the root metadata\r\n            var metaData = json[metadata];\r\n            if (!metaData) {\r\n                // Sets the root 'f'\r\n                metaData = json[metadata] = { f: {} };\r\n            }\r\n            var metaTarget = metaData[f];\r\n            if (!metaTarget) {\r\n                // This can occur if someone has manually added an ext.metadata object\r\n                // Such as ext.metadata.privLevel and ext.metadata.privTags\r\n                metaTarget = metaData[f] = {};\r\n            }\r\n            // Traverse the metadata path and build each object (contains an 'f' key) -- if required\r\n            if (propKeys) {\r\n                for (var lp = 0; lp < propKeys.length; lp++) {\r\n                    var key = propKeys[lp];\r\n                    if (!metaTarget[key]) {\r\n                        metaTarget[key] = { f: {} };\r\n                    }\r\n                    var newTarget = metaTarget[key][f];\r\n                    if (!newTarget) {\r\n                        // Not expected, but can occur if the metadata context was pre-created as part of the event\r\n                        newTarget = metaTarget[key][f] = {};\r\n                    }\r\n                    metaTarget = newTarget;\r\n                }\r\n            }\r\n            metaTarget = metaTarget[name] = {};\r\n            if (isArray(propertyValue.value)) {\r\n                metaTarget[\"a\"] = {\r\n                    t: encodedTypeValue\r\n                };\r\n            }\r\n            else {\r\n                metaTarget[\"t\"] = encodedTypeValue;\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Serializer.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\nvar _a;\r\n/**\r\n* HttpManager.ts\r\n* @author Abhilash Panwar (abpanwar); Hector Hernandez (hectorh); Nev Wylie (newylie)\r\n* @copyright Microsoft 2018-2020\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport EVTClockSkewManager from \"./ClockSkewManager\";\r\nimport EVTKillSwitch from \"./KillSwitch\";\r\nimport { FullVersionString, _throwInternal, _warnToConsole, arrForEach, dateNow, doPerf, dumpObj, extend, getLocation, getNavigator, getTime, hasOwnProperty, isArray, isBeaconsSupported, isFetchSupported, isNullOrUndefined, isNumber, isReactNative, isString, isUndefined, isValueAssigned, isXhrSupported, objForEachKey, objKeys, openXhr, strTrim, strUndefined, useXDomainRequest } from \"@microsoft/1ds-core-js\";\r\nimport { DEFAULT_CACHE_CONTROL, DEFAULT_CONTENT_TYPE, STR_API_KEY, STR_AUTH_XTOKEN, STR_CACHE_CONTROL, STR_CLIENT_ID, STR_CLIENT_VERSION, STR_CONTENT_TYPE_HEADER, STR_DISABLED_PROPERTY_NAME, STR_DROPPED, STR_KILL_DURATION_HEADER, STR_KILL_DURATION_SECONDS_HEADER, STR_KILL_TOKENS_HEADER, STR_MSA_DEVICE_TICKET, STR_MSFPC, STR_NO_RESPONSE_BODY, STR_OTHER, STR_POST_METHOD, STR_REQUEUE, STR_RESPONSE_FAIL, STR_SENDING, STR_TIME_DELTA_HEADER, STR_TIME_DELTA_TO_APPLY, STR_UPLOAD_TIME } from \"./InternalConstants\";\r\nimport { retryPolicyGetMillisToBackoffForRetry, retryPolicyShouldRetryForStatus } from \"./RetryPolicy\";\r\nimport { Serializer } from \"./Serializer\";\r\nvar strSendAttempt = \"sendAttempt\";\r\nvar _noResponseQs = \"&\" + STR_NO_RESPONSE_BODY + \"=true\";\r\n/**\r\n * Identifies the default notification reason to the action names\r\n */\r\nvar _eventActionMap = (_a = {},\r\n    _a[1 /* EventBatchNotificationReason.Paused */] = STR_REQUEUE,\r\n    _a[100 /* EventBatchNotificationReason.RequeueEvents */] = STR_REQUEUE,\r\n    _a[200 /* EventBatchNotificationReason.Complete */] = \"sent\",\r\n    _a[8004 /* EventBatchNotificationReason.KillSwitch */] = STR_DROPPED,\r\n    _a[8003 /* EventBatchNotificationReason.SizeLimitExceeded */] = STR_DROPPED,\r\n    _a);\r\nvar _collectorQsHeaders = {};\r\nvar _collectorHeaderToQs = {};\r\nfunction _addCollectorHeaderQsMapping(qsName, headerName, allowQs) {\r\n    _collectorQsHeaders[qsName] = headerName;\r\n    if (allowQs !== false) {\r\n        _collectorHeaderToQs[headerName] = qsName;\r\n    }\r\n}\r\n_addCollectorHeaderQsMapping(STR_MSA_DEVICE_TICKET, STR_MSA_DEVICE_TICKET, false);\r\n_addCollectorHeaderQsMapping(STR_CLIENT_VERSION, STR_CLIENT_VERSION);\r\n_addCollectorHeaderQsMapping(STR_CLIENT_ID, \"Client-Id\");\r\n_addCollectorHeaderQsMapping(STR_API_KEY, STR_API_KEY);\r\n_addCollectorHeaderQsMapping(STR_TIME_DELTA_TO_APPLY, STR_TIME_DELTA_TO_APPLY);\r\n_addCollectorHeaderQsMapping(STR_UPLOAD_TIME, STR_UPLOAD_TIME);\r\n_addCollectorHeaderQsMapping(STR_AUTH_XTOKEN, STR_AUTH_XTOKEN);\r\nfunction _getResponseText(xhr) {\r\n    try {\r\n        return xhr.responseText;\r\n    }\r\n    catch (e) {\r\n        // Best effort, as XHR may throw while XDR wont so just ignore\r\n    }\r\n    return \"\";\r\n}\r\nfunction _hasHeader(headers, header) {\r\n    var hasHeader = false;\r\n    if (headers && header) {\r\n        var keys = objKeys(headers);\r\n        if (keys && keys.length > 0) {\r\n            var lowerHeader = header.toLowerCase();\r\n            for (var lp = 0; lp < keys.length; lp++) {\r\n                var value = keys[lp];\r\n                if (value && hasOwnProperty(header, value) &&\r\n                    value.toLowerCase() === lowerHeader) {\r\n                    hasHeader = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return hasHeader;\r\n}\r\nfunction _addRequestDetails(details, name, value, useHeaders) {\r\n    if (name && value && value.length > 0) {\r\n        if (useHeaders && _collectorQsHeaders[name]) {\r\n            details.hdrs[_collectorQsHeaders[name]] = value;\r\n            details.useHdrs = true;\r\n        }\r\n        else {\r\n            details.url += \"&\" + name + \"=\" + value;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Class managing the sending of requests.\r\n */\r\nvar HttpManager = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param requestQueue   - The queue that contains the requests to be sent.\r\n     */\r\n    function HttpManager(maxEventsPerBatch, maxConnections, maxRequestRetriesBeforeBackoff, actions, timeoutOverride) {\r\n        this._responseHandlers = [];\r\n        var _urlString = \"?cors=true&\" + STR_CONTENT_TYPE_HEADER.toLowerCase() + \"=\" + DEFAULT_CONTENT_TYPE;\r\n        var _killSwitch = new EVTKillSwitch();\r\n        var _paused = false;\r\n        var _clockSkewManager = new EVTClockSkewManager();\r\n        var _useBeacons = false;\r\n        var _outstandingRequests = 0; // Holds the number of outstanding async requests that have not returned a response yet\r\n        var _postManager;\r\n        var _logger;\r\n        var _sendInterfaces;\r\n        var _core;\r\n        var _customHttpInterface = true;\r\n        var _queryStringParameters = [];\r\n        var _headers = {};\r\n        var _batchQueue = [];\r\n        var _serializer = null;\r\n        var _enableEventTimings = false;\r\n        var _cookieMgr;\r\n        var _isUnloading = false;\r\n        var _useHeaders = false;\r\n        var _xhrTimeout;\r\n        var _disableXhrSync;\r\n        dynamicProto(HttpManager, this, function (_self) {\r\n            var _sendCredentials = true;\r\n            _self.initialize = function (endpointUrl, core, postChannel, httpInterface, channelConfig) {\r\n                var _a;\r\n                if (!channelConfig) {\r\n                    channelConfig = {};\r\n                }\r\n                _urlString = endpointUrl + _urlString;\r\n                _useHeaders = !isUndefined(channelConfig.avoidOptions) ? !channelConfig.avoidOptions : true;\r\n                _core = core;\r\n                _cookieMgr = core.getCookieMgr();\r\n                _enableEventTimings = !_core.config.disableEventTimings;\r\n                var enableCompoundKey = !!_core.config.enableCompoundKey;\r\n                _postManager = postChannel;\r\n                _logger = _postManager.diagLog();\r\n                var valueSanitizer = channelConfig.valueSanitizer;\r\n                var stringifyObjects = channelConfig.stringifyObjects;\r\n                if (!isUndefined(channelConfig.enableCompoundKey)) {\r\n                    enableCompoundKey = !!channelConfig.enableCompoundKey;\r\n                }\r\n                _xhrTimeout = channelConfig.xhrTimeout;\r\n                _disableXhrSync = channelConfig.disableXhrSync;\r\n                _useBeacons = !isReactNative(); // Only use beacons if not running in React Native\r\n                _serializer = new Serializer(_core, valueSanitizer, stringifyObjects, enableCompoundKey);\r\n                var syncHttpInterface = httpInterface;\r\n                var beaconHttpInterface = channelConfig.alwaysUseXhrOverride ? httpInterface : null;\r\n                var fetchSyncHttpInterface = channelConfig.alwaysUseXhrOverride ? httpInterface : null;\r\n                if (!httpInterface) {\r\n                    _customHttpInterface = false;\r\n                    var location_1 = getLocation();\r\n                    if (location_1 && location_1.protocol && location_1.protocol.toLowerCase() === \"file:\") {\r\n                        // Special case where a local html file fails with a CORS error on Chromium browsers\r\n                        _sendCredentials = false;\r\n                    }\r\n                    var theTransports = [];\r\n                    if (isReactNative()) {\r\n                        // Use Fetch or XDR/XHR\r\n                        theTransports = [2 /* TransportType.Fetch */, 1 /* TransportType.Xhr */];\r\n                    }\r\n                    else {\r\n                        // Use XDR/XHR, Fetch or beacons\r\n                        theTransports = [1 /* TransportType.Xhr */, 2 /* TransportType.Fetch */, 3 /* TransportType.Beacon */];\r\n                    }\r\n                    // Prefix any user requested transport(s) values\r\n                    var configTransports = channelConfig.transports;\r\n                    if (configTransports) {\r\n                        if (isNumber(configTransports)) {\r\n                            theTransports = [configTransports].concat(theTransports);\r\n                        }\r\n                        else if (isArray(configTransports)) {\r\n                            theTransports = configTransports.concat(theTransports);\r\n                        }\r\n                    }\r\n                    httpInterface = _getSenderInterface(theTransports, false);\r\n                    syncHttpInterface = _getSenderInterface(theTransports, true);\r\n                    if (!httpInterface) {\r\n                        _warnToConsole(_logger, \"No available transport to send events\");\r\n                    }\r\n                }\r\n                _sendInterfaces = (_a = {},\r\n                    _a[0 /* EventSendType.Batched */] = httpInterface,\r\n                    _a[1 /* EventSendType.Synchronous */] = syncHttpInterface || _getSenderInterface([1 /* TransportType.Xhr */, 2 /* TransportType.Fetch */, 3 /* TransportType.Beacon */], true),\r\n                    _a[2 /* EventSendType.SendBeacon */] = beaconHttpInterface || _getSenderInterface([3 /* TransportType.Beacon */, 2 /* TransportType.Fetch */], true) || syncHttpInterface || _getSenderInterface([1 /* TransportType.Xhr */], true),\r\n                    _a[3 /* EventSendType.SyncFetch */] = fetchSyncHttpInterface || _getSenderInterface([2 /* TransportType.Fetch */, 3 /* TransportType.Beacon */], true) || syncHttpInterface || _getSenderInterface([1 /* TransportType.Xhr */], true),\r\n                    _a);\r\n            };\r\n            // Special internal method to allow the DebugPlugin to hook embedded objects\r\n            function _getSenderInterface(transports, syncSupport) {\r\n                var transportType = 0 /* TransportType.NotSet */;\r\n                var sendPostFunc = null;\r\n                var lp = 0;\r\n                while (sendPostFunc == null && lp < transports.length) {\r\n                    transportType = transports[lp];\r\n                    if (transportType === 1 /* TransportType.Xhr */) {\r\n                        if (useXDomainRequest()) {\r\n                            sendPostFunc = _xdrSendPost;\r\n                        }\r\n                        else if (isXhrSupported()) {\r\n                            sendPostFunc = _xhrSendPost;\r\n                        }\r\n                    }\r\n                    else if (transportType === 2 /* TransportType.Fetch */ && isFetchSupported(syncSupport)) {\r\n                        sendPostFunc = _fetchSendPost;\r\n                    }\r\n                    else if (_useBeacons && transportType === 3 /* TransportType.Beacon */ && isBeaconsSupported()) {\r\n                        sendPostFunc = _beaconSendPost;\r\n                    }\r\n                    lp++;\r\n                }\r\n                if (sendPostFunc) {\r\n                    return {\r\n                        _transport: transportType,\r\n                        _isSync: syncSupport,\r\n                        sendPOST: sendPostFunc\r\n                    };\r\n                }\r\n                return null;\r\n            }\r\n            _self[\"_getDbgPlgTargets\"] = function () {\r\n                return [_sendInterfaces[0 /* EventSendType.Batched */], _killSwitch, _serializer, _sendInterfaces];\r\n            };\r\n            function _xdrSendPost(payload, oncomplete, sync) {\r\n                // It doesn't support custom headers, so no action is taken with current requestHeaders\r\n                var xdr = new XDomainRequest();\r\n                xdr.open(STR_POST_METHOD, payload.urlString);\r\n                if (payload.timeout) {\r\n                    xdr.timeout = payload.timeout;\r\n                }\r\n                // can't get the status code in xdr.\r\n                xdr.onload = function () {\r\n                    // we will assume onload means the request succeeded.\r\n                    var response = _getResponseText(xdr);\r\n                    _doOnComplete(oncomplete, 200, {}, response);\r\n                    _handleCollectorResponse(response);\r\n                };\r\n                // we will assume onerror means we need to drop the events.\r\n                xdr.onerror = function () {\r\n                    _doOnComplete(oncomplete, 400, {});\r\n                };\r\n                // we will assume ontimeout means we need to retry the events.\r\n                xdr.ontimeout = function () {\r\n                    _doOnComplete(oncomplete, 500, {});\r\n                };\r\n                // https://cypressnorth.com/web-programming-and-development/internet-explorer-aborting-ajax-requests-fixed/\r\n                // tslint:disable-next-line:no-empty\r\n                xdr.onprogress = function () { };\r\n                if (sync) {\r\n                    xdr.send(payload.data);\r\n                }\r\n                else {\r\n                    timeoutOverride.set(function () {\r\n                        xdr.send(payload.data);\r\n                    }, 0);\r\n                }\r\n            }\r\n            function _fetchSendPost(payload, oncomplete, sync) {\r\n                var _a;\r\n                var theUrl = payload.urlString;\r\n                var ignoreResponse = false;\r\n                var responseHandled = false;\r\n                var requestInit = (_a = {\r\n                        body: payload.data,\r\n                        method: STR_POST_METHOD\r\n                    },\r\n                    _a[STR_DISABLED_PROPERTY_NAME] = true,\r\n                    _a);\r\n                if (sync) {\r\n                    requestInit.keepalive = true;\r\n                    if (payload._sendReason === 2 /* SendRequestReason.Unload */) {\r\n                        // As a sync request (during unload), it is unlikely that we will get a chance to process the response so\r\n                        // just like beacon send assume that the events have been accepted and processed\r\n                        ignoreResponse = true;\r\n                        theUrl += _noResponseQs;\r\n                    }\r\n                }\r\n                if (_sendCredentials) {\r\n                    // Don't send credentials when URL is file://\r\n                    requestInit.credentials = \"include\";\r\n                }\r\n                // Only add headers if there are headers to add, due to issue with some polyfills\r\n                if (payload.headers && objKeys(payload.headers).length > 0) {\r\n                    requestInit.headers = payload.headers;\r\n                }\r\n                fetch(theUrl, requestInit).then(function (response) {\r\n                    var headerMap = {};\r\n                    var responseText = \"\";\r\n                    var headers = response.headers;\r\n                    if (headers) {\r\n                        headers[\"forEach\"](function (value, name) {\r\n                            headerMap[name] = value;\r\n                        });\r\n                    }\r\n                    if (response.body) {\r\n                        response.text().then(function (text) {\r\n                            responseText = text;\r\n                        });\r\n                    }\r\n                    if (!responseHandled) {\r\n                        responseHandled = true;\r\n                        _doOnComplete(oncomplete, response.status, headerMap, responseText);\r\n                        _handleCollectorResponse(responseText);\r\n                    }\r\n                })[\"catch\"](function (error) {\r\n                    // In case there is an error in the request. Set the status to 0\r\n                    // so that the events can be retried later.\r\n                    if (!responseHandled) {\r\n                        responseHandled = true;\r\n                        _doOnComplete(oncomplete, 0, {});\r\n                    }\r\n                });\r\n                if (ignoreResponse && !responseHandled) {\r\n                    // Assume success during unload processing\r\n                    responseHandled = true;\r\n                    _doOnComplete(oncomplete, 200, {});\r\n                }\r\n                if (!responseHandled && payload.timeout > 0) {\r\n                    // Simulate timeout\r\n                    timeoutOverride.set(function () {\r\n                        if (!responseHandled) {\r\n                            // Assume a 500 response (which will cause a retry)\r\n                            responseHandled = true;\r\n                            _doOnComplete(oncomplete, 500, {});\r\n                        }\r\n                    }, payload.timeout);\r\n                }\r\n            }\r\n            function _xhrSendPost(payload, oncomplete, sync) {\r\n                var theUrl = payload.urlString;\r\n                function _appendHeader(theHeaders, xhr, name) {\r\n                    if (!theHeaders[name] && xhr && xhr.getResponseHeader) {\r\n                        var value = xhr.getResponseHeader(name);\r\n                        if (value) {\r\n                            theHeaders[name] = strTrim(value);\r\n                        }\r\n                    }\r\n                    return theHeaders;\r\n                }\r\n                function _getAllResponseHeaders(xhr) {\r\n                    var theHeaders = {};\r\n                    if (!xhr.getAllResponseHeaders) {\r\n                        // Firefox 2-63 doesn't have getAllResponseHeaders function but it does have getResponseHeader\r\n                        // Only call these if getAllResponseHeaders doesn't exist, otherwise we can get invalid response errors\r\n                        // as collector is not currently returning the correct header to allow JS to access these headers\r\n                        theHeaders = _appendHeader(theHeaders, xhr, STR_TIME_DELTA_HEADER);\r\n                        theHeaders = _appendHeader(theHeaders, xhr, STR_KILL_DURATION_HEADER);\r\n                        theHeaders = _appendHeader(theHeaders, xhr, STR_KILL_DURATION_SECONDS_HEADER);\r\n                    }\r\n                    else {\r\n                        theHeaders = _convertAllHeadersToMap(xhr.getAllResponseHeaders());\r\n                    }\r\n                    return theHeaders;\r\n                }\r\n                function xhrComplete(xhr, responseTxt) {\r\n                    _doOnComplete(oncomplete, xhr.status, _getAllResponseHeaders(xhr), responseTxt);\r\n                }\r\n                if (sync && payload.disableXhrSync) {\r\n                    sync = false;\r\n                }\r\n                var xhrRequest = openXhr(STR_POST_METHOD, theUrl, _sendCredentials, true, sync, payload.timeout);\r\n                // Set custom headers (e.g. gzip) here (after open())\r\n                objForEachKey(payload.headers, function (name, value) {\r\n                    xhrRequest.setRequestHeader(name, value);\r\n                });\r\n                xhrRequest.onload = function () {\r\n                    var response = _getResponseText(xhrRequest);\r\n                    xhrComplete(xhrRequest, response);\r\n                    _handleCollectorResponse(response);\r\n                };\r\n                xhrRequest.onerror = function () {\r\n                    xhrComplete(xhrRequest);\r\n                };\r\n                xhrRequest.ontimeout = function () {\r\n                    xhrComplete(xhrRequest);\r\n                };\r\n                xhrRequest.send(payload.data);\r\n            }\r\n            function _doOnComplete(oncomplete, status, headers, response) {\r\n                try {\r\n                    oncomplete(status, headers, response);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 518 /* _eExtendedInternalMessageId.SendPostOnCompleteFailure */, dumpObj(e));\r\n                }\r\n            }\r\n            function _beaconSendPost(payload, oncomplete, sync) {\r\n                // Custom headers not supported in sendBeacon payload.headers would be ignored\r\n                var internalPayloadData = payload;\r\n                var status = 200;\r\n                var thePayload = internalPayloadData._thePayload;\r\n                var theUrl = payload.urlString + _noResponseQs;\r\n                try {\r\n                    var nav_1 = getNavigator();\r\n                    if (!nav_1.sendBeacon(theUrl, payload.data)) {\r\n                        if (thePayload) {\r\n                            // Failed to send entire payload so try and split data and try to send as much events as possible\r\n                            var droppedBatches_1 = [];\r\n                            arrForEach(thePayload.batches, function (theBatch) {\r\n                                if (droppedBatches_1 && theBatch && theBatch.count() > 0) {\r\n                                    var theEvents = theBatch.events();\r\n                                    for (var lp = 0; lp < theEvents.length; lp++) {\r\n                                        if (!nav_1.sendBeacon(theUrl, _serializer.getEventBlob(theEvents[lp]))) {\r\n                                            // Can't send anymore, so split the batch and drop the rest\r\n                                            droppedBatches_1.push(theBatch.split(lp));\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // Remove all of the events from the existing batch in the payload as the copy includes the original\r\n                                    droppedBatches_1.push(theBatch.split(0));\r\n                                }\r\n                            });\r\n                            _sendBatchesNotification(droppedBatches_1, 8003 /* EventBatchNotificationReason.SizeLimitExceeded */, thePayload.sendType, true);\r\n                        }\r\n                        else {\r\n                            status = 0;\r\n                        }\r\n                    }\r\n                }\r\n                catch (ex) {\r\n                    _warnToConsole(_logger, \"Failed to send telemetry using sendBeacon API. Ex:\" + dumpObj(ex));\r\n                    status = 0;\r\n                }\r\n                finally {\r\n                    _doOnComplete(oncomplete, status, {}, \"\");\r\n                }\r\n            }\r\n            function _isBeaconPayload(sendType) {\r\n                // Sync Fetch has the same payload limitation as sendBeacon -- 64kb limit, so treat both as a beacon send\r\n                return sendType === 2 /* EventSendType.SendBeacon */ || sendType === 3 /* EventSendType.SyncFetch */;\r\n            }\r\n            function _adjustSendType(sendType) {\r\n                if (_isUnloading && _isBeaconPayload(sendType)) {\r\n                    sendType = 2 /* EventSendType.SendBeacon */;\r\n                }\r\n                return sendType;\r\n            }\r\n            _self.addQueryStringParameter = function (name, value) {\r\n                for (var i = 0; i < _queryStringParameters.length; i++) {\r\n                    if (_queryStringParameters[i].name === name) {\r\n                        _queryStringParameters[i].value = value;\r\n                        return;\r\n                    }\r\n                }\r\n                _queryStringParameters.push({ name: name, value: value });\r\n            };\r\n            _self.addHeader = function (name, value) {\r\n                _headers[name] = value;\r\n            };\r\n            _self.canSendRequest = function () {\r\n                return _hasIdleConnection() && _clockSkewManager.allowRequestSending();\r\n            };\r\n            _self.sendQueuedRequests = function (sendType, sendReason) {\r\n                if (isUndefined(sendType)) {\r\n                    sendType = 0 /* EventSendType.Batched */;\r\n                }\r\n                if (_isUnloading) {\r\n                    sendType = _adjustSendType(sendType);\r\n                    sendReason = 2 /* SendRequestReason.Unload */;\r\n                }\r\n                if (_canSendPayload(_batchQueue, sendType, 0)) {\r\n                    _sendBatches(_clearQueue(), 0, false, sendType, sendReason || 0 /* SendRequestReason.Undefined */);\r\n                }\r\n            };\r\n            _self.isCompletelyIdle = function () {\r\n                return !_paused && _outstandingRequests === 0 && _batchQueue.length === 0;\r\n            };\r\n            _self.setUnloading = function (value) {\r\n                _isUnloading = value;\r\n            };\r\n            _self.addBatch = function (theBatch) {\r\n                if (theBatch && theBatch.count() > 0) {\r\n                    // Try and kill the event faster\r\n                    if (_killSwitch.isTenantKilled(theBatch.iKey())) {\r\n                        return false;\r\n                    }\r\n                    _batchQueue.push(theBatch);\r\n                }\r\n                return true;\r\n            };\r\n            /**\r\n             * Queue all the remaining requests to be sent. The requests will be\r\n             * sent using HTML5 Beacons if they are available.\r\n             */\r\n            _self.teardown = function () {\r\n                if (_batchQueue.length > 0) {\r\n                    _sendBatches(_clearQueue(), 0, true, 2 /* EventSendType.SendBeacon */, 2 /* SendRequestReason.Unload */);\r\n                }\r\n            };\r\n            /**\r\n             * Pause the sending of requests. No new requests will be sent.\r\n             */\r\n            _self.pause = function () {\r\n                _paused = true;\r\n            };\r\n            /**\r\n             * Resume the sending of requests.\r\n             */\r\n            _self.resume = function () {\r\n                _paused = false;\r\n                _self.sendQueuedRequests(0 /* EventSendType.Batched */, 4 /* SendRequestReason.Resumed */);\r\n            };\r\n            /**\r\n             * Sends a request synchronously to the Aria collector. This api is used to send\r\n             * a request containing a single immediate event.\r\n             *\r\n             * @param batch - The request to be sent.\r\n             * @param sendReason   - The token used to send the request.\r\n             */\r\n            _self.sendSynchronousBatch = function (batch, sendType, sendReason) {\r\n                // This will not take into account the max connections restriction. Since this is sync, we can\r\n                // only send one of this request at a time and thus should not worry about multiple connections\r\n                // being used to send synchronous events.\r\n                // Increment active connection since we are still going to use a connection to send the request.\r\n                if (batch && batch.count() > 0) {\r\n                    if (isNullOrUndefined(sendType)) {\r\n                        sendType = 1 /* EventSendType.Synchronous */;\r\n                    }\r\n                    if (_isUnloading) {\r\n                        sendType = _adjustSendType(sendType);\r\n                        sendReason = 2 /* SendRequestReason.Unload */;\r\n                    }\r\n                    // For sync requests we will not wait for the clock skew.\r\n                    _sendBatches([batch], 0, false, sendType, sendReason || 0 /* SendRequestReason.Undefined */);\r\n                }\r\n            };\r\n            function _hasIdleConnection() {\r\n                return !_paused && _outstandingRequests < maxConnections;\r\n            }\r\n            function _clearQueue() {\r\n                var theQueue = _batchQueue;\r\n                _batchQueue = [];\r\n                return theQueue;\r\n            }\r\n            function _canSendPayload(theBatches, sendType, retryCnt) {\r\n                var result = false;\r\n                if (theBatches && theBatches.length > 0 && !_paused && _sendInterfaces[sendType] && _serializer) {\r\n                    // Always attempt to send synchronous events don't wait for idle or clockSkew\r\n                    // and don't block retry requests if clockSkew is not yet set\r\n                    result = (sendType !== 0 /* EventSendType.Batched */) || (_hasIdleConnection() && (retryCnt > 0 || _clockSkewManager.allowRequestSending()));\r\n                }\r\n                return result;\r\n            }\r\n            function _createDebugBatches(theBatches) {\r\n                var values = {};\r\n                if (theBatches) {\r\n                    arrForEach(theBatches, function (theBatch, idx) {\r\n                        values[idx] = {\r\n                            iKey: theBatch.iKey(),\r\n                            evts: theBatch.events()\r\n                        };\r\n                    });\r\n                }\r\n                return values;\r\n            }\r\n            function _sendBatches(theBatches, retryCount, isTeardown, sendType, sendReason) {\r\n                if (!theBatches || theBatches.length === 0) {\r\n                    // Nothing to do\r\n                    return;\r\n                }\r\n                if (_paused) {\r\n                    _sendBatchesNotification(theBatches, 1 /* EventBatchNotificationReason.Paused */, sendType);\r\n                    return;\r\n                }\r\n                // Make sure that if we are unloading the sendType is a supported version\r\n                sendType = _adjustSendType(sendType);\r\n                try {\r\n                    var orgBatches_1 = theBatches;\r\n                    var isSynchronous_1 = sendType !== 0 /* EventSendType.Batched */;\r\n                    doPerf(_core, function () { return \"HttpManager:_sendBatches\"; }, function (perfEvt) {\r\n                        if (perfEvt) {\r\n                            // Perf Monitoring is enabled, so create a \"Quick\" copy of the original batches so we still report\r\n                            // the original values as part of the perfEvent. This is because theBatches uses .shift() to remove each\r\n                            // batch as they are processed - removing from the original array, so by the time the _createDebugBatches()\r\n                            // function is called the passed in value has changed and therefore the reported value for the perfEvent is incorrect\r\n                            theBatches = theBatches.slice(0);\r\n                        }\r\n                        var droppedBatches = [];\r\n                        var thePayload = null;\r\n                        var serializationStart = getTime();\r\n                        var sendInterface = _sendInterfaces[sendType] || (isSynchronous_1 ? _sendInterfaces[1 /* EventSendType.Synchronous */] : _sendInterfaces[0 /* EventSendType.Batched */]);\r\n                        // Sync Fetch has the same payload limitation as sendBeacon -- 64kb limit\r\n                        var isBeaconTransport = (_isUnloading || _isBeaconPayload(sendType) || (sendInterface && sendInterface._transport === 3 /* TransportType.Beacon */)) && _canUseSendBeaconApi();\r\n                        while (_canSendPayload(theBatches, sendType, retryCount)) {\r\n                            var theBatch = theBatches.shift();\r\n                            if (theBatch && theBatch.count() > 0) {\r\n                                if (!_killSwitch.isTenantKilled(theBatch.iKey())) {\r\n                                    // Make sure we have a payload object\r\n                                    thePayload = thePayload || _serializer.createPayload(retryCount, isTeardown, isSynchronous_1, isBeaconTransport, sendReason, sendType);\r\n                                    // Add the batch to the current payload\r\n                                    if (!_serializer.appendPayload(thePayload, theBatch, maxEventsPerBatch)) {\r\n                                        // Entire batch was not added so send the payload and retry adding this batch\r\n                                        _doPayloadSend(thePayload, serializationStart, getTime(), sendReason);\r\n                                        serializationStart = getTime();\r\n                                        theBatches = [theBatch].concat(theBatches);\r\n                                        thePayload = null;\r\n                                    }\r\n                                    else if (thePayload.overflow !== null) {\r\n                                        // Total Payload size was exceeded so send the payload and add the unsent as the next batch to send\r\n                                        theBatches = [thePayload.overflow].concat(theBatches);\r\n                                        thePayload.overflow = null;\r\n                                        _doPayloadSend(thePayload, serializationStart, getTime(), sendReason);\r\n                                        serializationStart = getTime();\r\n                                        thePayload = null;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    droppedBatches.push(theBatch);\r\n                                }\r\n                            }\r\n                        }\r\n                        // Make sure to flush any remaining payload\r\n                        if (thePayload) {\r\n                            _doPayloadSend(thePayload, serializationStart, getTime(), sendReason);\r\n                        }\r\n                        if (theBatches.length > 0) {\r\n                            // Add any unsent batches back to the head of the queue\r\n                            _batchQueue = theBatches.concat(_batchQueue);\r\n                        }\r\n                        // Now send notification about any dropped events\r\n                        _sendBatchesNotification(droppedBatches, 8004 /* EventBatchNotificationReason.KillSwitch */, sendType);\r\n                    }, function () { return ({ batches: _createDebugBatches(orgBatches_1), retryCount: retryCount, isTeardown: isTeardown, isSynchronous: isSynchronous_1, sendReason: sendReason, useSendBeacon: _isBeaconPayload(sendType), sendType: sendType }); }, !isSynchronous_1);\r\n                }\r\n                catch (ex) {\r\n                    _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 48 /* _eInternalMessageId.CannotSerializeObject */, \"Unexpected Exception sending batch: \" + dumpObj(ex));\r\n                }\r\n            }\r\n            function _buildRequestDetails(thePayload, useHeaders) {\r\n                var requestDetails = {\r\n                    url: _urlString,\r\n                    hdrs: {},\r\n                    useHdrs: false // Assume no headers\r\n                };\r\n                if (!useHeaders) {\r\n                    // Attempt to map headers to a query string if possible\r\n                    objForEachKey(_headers, function (name, value) {\r\n                        if (_collectorHeaderToQs[name]) {\r\n                            _addRequestDetails(requestDetails, _collectorHeaderToQs[name], value, false);\r\n                        }\r\n                        else {\r\n                            // No mapping, so just include in the headers anyway (may not get sent if using sendBeacon())\r\n                            requestDetails.hdrs[name] = value;\r\n                            requestDetails.useHdrs = true;\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    // Copy the pre-defined headers into the payload headers\r\n                    requestDetails.hdrs = extend(requestDetails.hdrs, _headers);\r\n                    requestDetails.useHdrs = (objKeys(requestDetails.hdrs).length > 0);\r\n                }\r\n                _addRequestDetails(requestDetails, STR_CLIENT_ID, \"NO_AUTH\", useHeaders);\r\n                _addRequestDetails(requestDetails, STR_CLIENT_VERSION, FullVersionString, useHeaders);\r\n                var apiQsKeys = \"\";\r\n                arrForEach(thePayload.apiKeys, function (apiKey) {\r\n                    if (apiQsKeys.length > 0) {\r\n                        apiQsKeys += \",\";\r\n                    }\r\n                    apiQsKeys += apiKey;\r\n                });\r\n                _addRequestDetails(requestDetails, STR_API_KEY, apiQsKeys, useHeaders);\r\n                _addRequestDetails(requestDetails, STR_UPLOAD_TIME, dateNow().toString(), useHeaders);\r\n                var msfpc = _getMsfpc(thePayload);\r\n                if (isValueAssigned(msfpc)) {\r\n                    requestDetails.url += \"&ext.intweb.msfpc=\" + msfpc;\r\n                }\r\n                if (_clockSkewManager.shouldAddClockSkewHeaders()) {\r\n                    _addRequestDetails(requestDetails, STR_TIME_DELTA_TO_APPLY, _clockSkewManager.getClockSkewHeaderValue(), useHeaders);\r\n                }\r\n                if (_core.getWParam) {\r\n                    var wParam = _core.getWParam();\r\n                    if (wParam >= 0) {\r\n                        requestDetails.url += \"&w=\" + wParam;\r\n                    }\r\n                }\r\n                for (var i = 0; i < _queryStringParameters.length; i++) {\r\n                    requestDetails.url += \"&\" + _queryStringParameters[i].name + \"=\" + _queryStringParameters[i].value;\r\n                }\r\n                return requestDetails;\r\n            }\r\n            function _canUseSendBeaconApi() {\r\n                return !_customHttpInterface && _useBeacons && isBeaconsSupported();\r\n            }\r\n            function _setTimingValue(timings, name, value) {\r\n                timings[name] = timings[name] || {};\r\n                timings[name][_postManager.identifier] = value;\r\n            }\r\n            function _doPayloadSend(thePayload, serializationStart, serializationCompleted, sendReason) {\r\n                if (thePayload && thePayload.payloadBlob && thePayload.payloadBlob.length > 0) {\r\n                    var useSendHook_1 = !!_self.sendHook;\r\n                    var sendInterface_1 = _sendInterfaces[thePayload.sendType];\r\n                    // Send all data using a beacon style transport if closing mode is on or channel was teared down\r\n                    if (!_isBeaconPayload(thePayload.sendType) && thePayload.isBeacon && thePayload.sendReason === 2 /* SendRequestReason.Unload */) {\r\n                        sendInterface_1 = _sendInterfaces[2 /* EventSendType.SendBeacon */] || _sendInterfaces[3 /* EventSendType.SyncFetch */] || sendInterface_1;\r\n                    }\r\n                    var useHeaders_1 = _useHeaders;\r\n                    // Disable header usage if we know we are using sendBeacon as additional headers are not supported\r\n                    if (thePayload.isBeacon || sendInterface_1._transport === 3 /* TransportType.Beacon */) {\r\n                        useHeaders_1 = false;\r\n                    }\r\n                    var requestDetails_1 = _buildRequestDetails(thePayload, useHeaders_1);\r\n                    useHeaders_1 = useHeaders_1 || requestDetails_1.useHdrs;\r\n                    var sendEventStart_1 = getTime();\r\n                    doPerf(_core, function () { return \"HttpManager:_doPayloadSend\"; }, function () {\r\n                        // Increment the send attempt count and add timings after packaging (So it's not serialized in the 1st attempt)\r\n                        for (var batchLp = 0; batchLp < thePayload.batches.length; batchLp++) {\r\n                            var theBatch = thePayload.batches[batchLp];\r\n                            var theEvents = theBatch.events();\r\n                            for (var evtLp = 0; evtLp < theEvents.length; evtLp++) {\r\n                                var telemetryItem = theEvents[evtLp];\r\n                                if (_enableEventTimings) {\r\n                                    var timings = telemetryItem.timings = telemetryItem.timings || {};\r\n                                    _setTimingValue(timings, \"sendEventStart\", sendEventStart_1);\r\n                                    _setTimingValue(timings, \"serializationStart\", serializationStart);\r\n                                    _setTimingValue(timings, \"serializationCompleted\", serializationCompleted);\r\n                                }\r\n                                telemetryItem[strSendAttempt] > 0 ? telemetryItem[strSendAttempt]++ : telemetryItem[strSendAttempt] = 1;\r\n                            }\r\n                        }\r\n                        // Note: always sending this notification in a synchronous manner.\r\n                        _sendBatchesNotification(thePayload.batches, (1000 /* EventBatchNotificationReason.SendingUndefined */ + (sendReason || 0 /* SendRequestReason.Undefined */)), thePayload.sendType, true);\r\n                        // Disabling the use of const because of Issue: \r\n                        // - Task 9227844: [1DS] Some environments and packagers automatically \"freeze\" objects which are defined as const which causes any mutations to throw\r\n                        // eslint-disable-next-line prefer-const\r\n                        var orgPayloadData = {\r\n                            data: thePayload.payloadBlob,\r\n                            urlString: requestDetails_1.url,\r\n                            headers: requestDetails_1.hdrs,\r\n                            _thePayload: thePayload,\r\n                            _sendReason: sendReason,\r\n                            timeout: _xhrTimeout\r\n                        };\r\n                        if (!isUndefined(_disableXhrSync)) {\r\n                            orgPayloadData.disableXhrSync = !!_disableXhrSync;\r\n                        }\r\n                        // Only automatically add the following headers if already sending headers and we are not attempting to avoid an options call\r\n                        if (useHeaders_1) {\r\n                            if (!_hasHeader(orgPayloadData.headers, STR_CACHE_CONTROL)) {\r\n                                orgPayloadData.headers[STR_CACHE_CONTROL] = DEFAULT_CACHE_CONTROL;\r\n                            }\r\n                            if (!_hasHeader(orgPayloadData.headers, STR_CONTENT_TYPE_HEADER)) {\r\n                                orgPayloadData.headers[STR_CONTENT_TYPE_HEADER] = DEFAULT_CONTENT_TYPE;\r\n                            }\r\n                        }\r\n                        var sender = null;\r\n                        if (sendInterface_1) {\r\n                            // Send sync requests if the request is immediate or we are tearing down telemetry.\r\n                            sender = function (payload) {\r\n                                // Notify the clock skew manager that we are sending the first request (Potentially blocking all further requests)\r\n                                _clockSkewManager.firstRequestSent();\r\n                                var onComplete = function (status, headers) {\r\n                                    _retryRequestIfNeeded(status, headers, thePayload, sendReason);\r\n                                };\r\n                                var isSync = thePayload.isTeardown || thePayload.isSync;\r\n                                try {\r\n                                    sendInterface_1.sendPOST(payload, onComplete, isSync);\r\n                                    if (_self.sendListener) {\r\n                                        // Send the original payload to the listener\r\n                                        _self.sendListener(orgPayloadData, payload, isSync, thePayload.isBeacon);\r\n                                    }\r\n                                }\r\n                                catch (ex) {\r\n                                    _warnToConsole(_logger, \"Unexpected exception sending payload. Ex:\" + dumpObj(ex));\r\n                                    _doOnComplete(onComplete, 0, {});\r\n                                }\r\n                            };\r\n                        }\r\n                        doPerf(_core, function () { return \"HttpManager:_doPayloadSend.sender\"; }, function () {\r\n                            if (sender) {\r\n                                if (thePayload.sendType === 0 /* EventSendType.Batched */) {\r\n                                    _outstandingRequests++;\r\n                                }\r\n                                // Only call the hook if it's defined and we are not using sendBeacon as additional headers are not supported\r\n                                if (useSendHook_1 && !thePayload.isBeacon && sendInterface_1._transport !== 3 /* TransportType.Beacon */) {\r\n                                    // Create a new IPayloadData that is sent into the hook method, so that the hook method\r\n                                    // can't change the object references to the orgPayloadData (it can still change the content -- mainly the headers)\r\n                                    // Disabling the use of const because of Issue: \r\n                                    // - Task 9227844: [1DS] Some environments and packagers automatically \"freeze\" objects which are defined as const which causes any mutations to throw\r\n                                    // eslint-disable-next-line prefer-const\r\n                                    var hookData_1 = {\r\n                                        data: orgPayloadData.data,\r\n                                        urlString: orgPayloadData.urlString,\r\n                                        headers: extend({}, orgPayloadData.headers),\r\n                                        timeout: orgPayloadData.timeout,\r\n                                        disableXhrSync: orgPayloadData.disableXhrSync\r\n                                    };\r\n                                    var senderCalled_1 = false;\r\n                                    doPerf(_core, function () { return \"HttpManager:_doPayloadSend.sendHook\"; }, function () {\r\n                                        try {\r\n                                            _self.sendHook(hookData_1, function (payload) {\r\n                                                senderCalled_1 = true;\r\n                                                // Add back the internal properties\r\n                                                if (!_customHttpInterface && !payload._thePayload) {\r\n                                                    payload._thePayload = payload._thePayload || orgPayloadData._thePayload;\r\n                                                    payload._sendReason = payload._sendReason || orgPayloadData._sendReason;\r\n                                                }\r\n                                                sender(payload);\r\n                                            }, thePayload.isSync || thePayload.isTeardown);\r\n                                        }\r\n                                        catch (ex) {\r\n                                            if (!senderCalled_1) {\r\n                                                // The hook never called the sender -- assume that it never will\r\n                                                sender(orgPayloadData);\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    sender(orgPayloadData);\r\n                                }\r\n                            }\r\n                        });\r\n                    }, function () { return ({ thePayload: thePayload, serializationStart: serializationStart, serializationCompleted: serializationCompleted, sendReason: sendReason }); }, thePayload.isSync);\r\n                }\r\n                if (thePayload.sizeExceed && thePayload.sizeExceed.length > 0) {\r\n                    // Ensure that we send any discard events for oversize events even when there was no payload to send\r\n                    _sendBatchesNotification(thePayload.sizeExceed, 8003 /* EventBatchNotificationReason.SizeLimitExceeded */, thePayload.sendType);\r\n                }\r\n                if (thePayload.failedEvts && thePayload.failedEvts.length > 0) {\r\n                    // Ensure that we send any discard events for events that could not be serialized even when there was no payload to send\r\n                    _sendBatchesNotification(thePayload.failedEvts, 8002 /* EventBatchNotificationReason.InvalidEvent */, thePayload.sendType);\r\n                }\r\n            }\r\n            function _addEventCompletedTimings(theEvents, sendEventCompleted) {\r\n                if (_enableEventTimings) {\r\n                    arrForEach(theEvents, function (theEvent) {\r\n                        var timings = theEvent.timings = theEvent.timings || {};\r\n                        _setTimingValue(timings, \"sendEventCompleted\", sendEventCompleted);\r\n                    });\r\n                }\r\n            }\r\n            function _retryRequestIfNeeded(status, headers, thePayload, sendReason) {\r\n                var reason = 9000 /* EventBatchNotificationReason.ResponseFailure */;\r\n                var droppedBatches = null;\r\n                var isRetrying = false;\r\n                var backOffTrans = false;\r\n                try {\r\n                    var shouldRetry = true;\r\n                    if (typeof status !== strUndefined) {\r\n                        if (headers) {\r\n                            _clockSkewManager.setClockSkew(headers[STR_TIME_DELTA_HEADER]);\r\n                            var killDuration = headers[STR_KILL_DURATION_HEADER] || headers[\"kill-duration-seconds\"];\r\n                            arrForEach(_killSwitch.setKillSwitchTenants(headers[STR_KILL_TOKENS_HEADER], killDuration), function (killToken) {\r\n                                arrForEach(thePayload.batches, function (theBatch) {\r\n                                    if (theBatch.iKey() === killToken) {\r\n                                        // Make sure we have initialized the array\r\n                                        droppedBatches = droppedBatches || [];\r\n                                        // Create a copy of the batch with all of the events (and more importantly the action functions)\r\n                                        var removedEvents = theBatch.split(0);\r\n                                        // And then remove the events for the payload batch and reduce the actual number of processed\r\n                                        thePayload.numEvents -= removedEvents.count();\r\n                                        droppedBatches.push(removedEvents);\r\n                                    }\r\n                                });\r\n                            });\r\n                        }\r\n                        // Disabling triple-equals rule to avoid httpOverrides from failing because they are returning a string value\r\n                        // tslint:disable-next-line:triple-equals\r\n                        if (status == 200 || status == 204) {\r\n                            // Response was successfully sent\r\n                            reason = 200 /* EventBatchNotificationReason.Complete */;\r\n                            return;\r\n                        }\r\n                        if (!retryPolicyShouldRetryForStatus(status) || thePayload.numEvents <= 0) {\r\n                            // Only retry for specific response codes and if there is still events after kill switch processing\r\n                            shouldRetry = false;\r\n                        }\r\n                        // Derive the notification response from the HttpStatus Code\r\n                        reason = 9000 /* EventBatchNotificationReason.ResponseFailure */ + (status % 1000);\r\n                    }\r\n                    if (shouldRetry) {\r\n                        // The events should be retried -- so change notification to requeue them\r\n                        reason = 100 /* EventBatchNotificationReason.RequeueEvents */;\r\n                        var retryCount_1 = thePayload.retryCnt;\r\n                        if (thePayload.sendType === 0 /* EventSendType.Batched */) {\r\n                            // attempt to resend the entire batch\r\n                            if (retryCount_1 < maxRequestRetriesBeforeBackoff) {\r\n                                isRetrying = true;\r\n                                _doAction(function () {\r\n                                    // try to resend the same batches\r\n                                    if (thePayload.sendType === 0 /* EventSendType.Batched */) {\r\n                                        // Reduce the outstanding request count (if this was an async request) as we didn't reduce the count\r\n                                        // previously and we are about to reschedule our retry attempt and we want an attempt to send\r\n                                        // to occur, it's also required to ensure that a follow up handleRequestFinished() call occurs\r\n                                        _outstandingRequests--;\r\n                                    }\r\n                                    _sendBatches(thePayload.batches, retryCount_1 + 1, thePayload.isTeardown, _isUnloading ? 2 /* EventSendType.SendBeacon */ : thePayload.sendType, 5 /* SendRequestReason.Retry */);\r\n                                }, _isUnloading, retryPolicyGetMillisToBackoffForRetry(retryCount_1));\r\n                            }\r\n                            else {\r\n                                backOffTrans = true;\r\n                                if (_isUnloading) {\r\n                                    // we are unloading so don't try and requeue the events otherwise let the events get requeued and resent during the backoff sending\r\n                                    // This will also cause the events to be purged based on the priority (if necessary)\r\n                                    reason = 8001 /* EventBatchNotificationReason.NonRetryableStatus */;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                finally {\r\n                    if (!isRetrying) {\r\n                        // Make sure the clockSkewManager doesn't blocking further sending of requests once we have a proper response\r\n                        // This won't override any previously sent clock Skew value\r\n                        _clockSkewManager.setClockSkew();\r\n                        _handleRequestFinished(thePayload, reason, sendReason, backOffTrans);\r\n                    }\r\n                    _sendBatchesNotification(droppedBatches, 8004 /* EventBatchNotificationReason.KillSwitch */, thePayload.sendType);\r\n                }\r\n            }\r\n            function _handleRequestFinished(thePayload, batchReason, sendReason, backOffTrans) {\r\n                try {\r\n                    if (backOffTrans) {\r\n                        // Slow down the transmission requests\r\n                        _postManager._backOffTransmission();\r\n                    }\r\n                    if (batchReason === 200 /* EventBatchNotificationReason.Complete */) {\r\n                        if (!backOffTrans && !thePayload.isSync) {\r\n                            // We have a successful async response, so the lets open the floodgates\r\n                            // The reason for checking isSync is to avoid unblocking if beacon send occurred as it\r\n                            // doesn't wait for a response.\r\n                            _postManager._clearBackOff();\r\n                        }\r\n                        _addCompleteTimings(thePayload.batches);\r\n                    }\r\n                    // Send the notifications synchronously\r\n                    _sendBatchesNotification(thePayload.batches, batchReason, thePayload.sendType, true);\r\n                }\r\n                finally {\r\n                    if (thePayload.sendType === 0 /* EventSendType.Batched */) {\r\n                        // we always need to decrement this value otherwise the httpmanager locks up and won't send any more events\r\n                        _outstandingRequests--;\r\n                        // Don't try to send additional queued events if this is a retry operation as the retried\r\n                        // response will eventually call _handleRequestFinished for the retried event\r\n                        if (sendReason !== 5 /* SendRequestReason.Retry */) {\r\n                            // Try and send any other queued batched events\r\n                            _self.sendQueuedRequests(thePayload.sendType, sendReason);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function _addCompleteTimings(theBatches) {\r\n                if (_enableEventTimings) {\r\n                    var sendEventCompleted_1 = getTime();\r\n                    arrForEach(theBatches, function (theBatch) {\r\n                        if (theBatch && theBatch.count() > 0) {\r\n                            _addEventCompletedTimings(theBatch.events(), sendEventCompleted_1);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            function _doAction(cb, isSync, interval) {\r\n                if (isSync) {\r\n                    cb();\r\n                }\r\n                else {\r\n                    timeoutOverride.set(cb, interval);\r\n                }\r\n            }\r\n            /**\r\n            * Converts the XHR getAllResponseHeaders to a map containing the header key and value.\r\n            */\r\n            // tslint:disable-next-line: align\r\n            function _convertAllHeadersToMap(headersString) {\r\n                var headers = {};\r\n                if (isString(headersString)) {\r\n                    var headersArray = strTrim(headersString).split(/[\\r\\n]+/);\r\n                    arrForEach(headersArray, function (headerEntry) {\r\n                        if (headerEntry) {\r\n                            var idx = headerEntry.indexOf(\": \");\r\n                            if (idx !== -1) {\r\n                                // The new spec has the headers returning all as lowercase -- but not all browsers do this yet\r\n                                var header = strTrim(headerEntry.substring(0, idx)).toLowerCase();\r\n                                var value = strTrim(headerEntry.substring(idx + 1));\r\n                                headers[header] = value;\r\n                            }\r\n                            else {\r\n                                headers[strTrim(headerEntry)] = 1;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                return headers;\r\n            }\r\n            function _getMsfpc(thePayload) {\r\n                for (var lp = 0; lp < thePayload.batches.length; lp++) {\r\n                    var msfpc = thePayload.batches[lp].Msfpc();\r\n                    if (msfpc) {\r\n                        return encodeURIComponent(msfpc);\r\n                    }\r\n                }\r\n                return \"\";\r\n            }\r\n            function _handleCollectorResponse(responseText) {\r\n                var responseHandlers = _self._responseHandlers;\r\n                try {\r\n                    for (var i = 0; i < responseHandlers.length; i++) {\r\n                        try {\r\n                            responseHandlers[i](responseText);\r\n                        }\r\n                        catch (e) {\r\n                            _throwInternal(_logger, 1 /* eLoggingSeverity.CRITICAL */, 519 /* _eExtendedInternalMessageId.PostResponseHandler */, \"Response handler failed: \" + e);\r\n                        }\r\n                    }\r\n                    if (responseText) {\r\n                        var response = JSON.parse(responseText);\r\n                        if (isValueAssigned(response.webResult) && isValueAssigned(response.webResult[STR_MSFPC])) {\r\n                            // Set cookie\r\n                            _cookieMgr.set(\"MSFPC\", response.webResult[STR_MSFPC], 365 * 86400);\r\n                        }\r\n                    }\r\n                }\r\n                catch (ex) {\r\n                    // Doing nothing\r\n                }\r\n            }\r\n            function _sendBatchesNotification(theBatches, batchReason, sendType, sendSync) {\r\n                if (theBatches && theBatches.length > 0 && actions) {\r\n                    var theAction_1 = actions[_getNotificationAction(batchReason)];\r\n                    if (theAction_1) {\r\n                        var isSyncRequest_1 = sendType !== 0 /* EventSendType.Batched */;\r\n                        doPerf(_core, function () { return \"HttpManager:_sendBatchesNotification\"; }, function () {\r\n                            _doAction(function () {\r\n                                try {\r\n                                    theAction_1.call(actions, theBatches, batchReason, isSyncRequest_1, sendType);\r\n                                }\r\n                                catch (e) {\r\n                                    _throwInternal(_logger, 1 /* eLoggingSeverity.CRITICAL */, 74 /* _eInternalMessageId.NotificationException */, \"send request notification failed: \" + e);\r\n                                }\r\n                            }, sendSync || isSyncRequest_1, 0);\r\n                        }, function () { return ({ batches: _createDebugBatches(theBatches), reason: batchReason, isSync: isSyncRequest_1, sendSync: sendSync, sendType: sendType }); }, !isSyncRequest_1);\r\n                    }\r\n                }\r\n            }\r\n            function _getNotificationAction(reason) {\r\n                var action = _eventActionMap[reason];\r\n                if (!isValueAssigned(action)) {\r\n                    action = STR_OTHER;\r\n                    if (reason >= 9000 /* EventBatchNotificationReason.ResponseFailure */ && reason <= 9999 /* EventBatchNotificationReason.ResponseFailureMax */) {\r\n                        action = STR_RESPONSE_FAIL;\r\n                    }\r\n                    else if (reason >= 8000 /* EventBatchNotificationReason.EventsDropped */ && reason <= 8999 /* EventBatchNotificationReason.EventsDroppedMax */) {\r\n                        action = STR_DROPPED;\r\n                    }\r\n                    else if (reason >= 1000 /* EventBatchNotificationReason.SendingUndefined */ && reason <= 1999 /* EventBatchNotificationReason.SendingEventMax */) {\r\n                        action = STR_SENDING;\r\n                    }\r\n                }\r\n                return action;\r\n            }\r\n        });\r\n    }\r\n// Removed Stub for HttpManager.prototype.initialize.\r\n// Removed Stub for HttpManager.prototype.addQueryStringParameter.\r\n// Removed Stub for HttpManager.prototype.addHeader.\r\n// Removed Stub for HttpManager.prototype.addBatch.\r\n// Removed Stub for HttpManager.prototype.canSendRequest.\r\n// Removed Stub for HttpManager.prototype.sendQueuedRequests.\r\n// Removed Stub for HttpManager.prototype.isCompletelyIdle.\r\n// Removed Stub for HttpManager.prototype.setUnloading.\r\n// Removed Stub for HttpManager.prototype.teardown.\r\n// Removed Stub for HttpManager.prototype.pause.\r\n// Removed Stub for HttpManager.prototype.resume.\r\n// Removed Stub for HttpManager.prototype.sendSynchronousBatch.\r\n    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n    // this will be removed when ES3 support is dropped.\n    HttpManager.__ieDyn=1;\n\n    return HttpManager;\r\n}());\r\nexport { HttpManager };\r\n//# sourceMappingURL=HttpManager.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n* TimeoutOverrideWrapper.ts\r\n* @author  Nev Wylie (newylie)\r\n* @copyright Microsoft 2022\r\n* Simple internal timeout wrapper\r\n*/\r\nexport function defaultSetTimeout(callback, ms) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    return setTimeout(callback, ms, args);\r\n}\r\nexport function defaultClearTimeout(timeoutId) {\r\n    clearTimeout(timeoutId);\r\n}\r\nexport function createTimeoutWrapper(argSetTimeout, argClearTimeout) {\r\n    return {\r\n        set: argSetTimeout || defaultSetTimeout,\r\n        clear: argClearTimeout || defaultClearTimeout\r\n    };\r\n}\r\n//# sourceMappingURL=TimeoutOverrideWrapper.js.map","/*\n * 1DS JS SDK POST plugin, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\nimport { __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\r\n/**\r\n* PostManager.ts\r\n* @author Abhilash Panwar (abpanwar); Hector Hernandez (hectorh); Nev Wylie (newylie)\r\n* @copyright Microsoft 2018-2020\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { BaseTelemetryPlugin, EventsDiscardedReason, _throwInternal, addPageHideEventListener, addPageShowEventListener, addPageUnloadEventListener, arrForEach, createUniqueNamespace, doPerf, getWindow, isChromium, isNumber, isValueAssigned, mergeEvtNamespace, objDefineAccessors, objForEachKey, optimizeObject, removePageHideEventListener, removePageShowEventListener, removePageUnloadEventListener, setProcessTelemetryTimings } from \"@microsoft/1ds-core-js\";\r\nimport { BE_PROFILE, NRT_PROFILE, RT_PROFILE } from \"./DataModels\";\r\nimport { EventBatch } from \"./EventBatch\";\r\nimport { HttpManager } from \"./HttpManager\";\r\nimport { STR_MSA_DEVICE_TICKET, STR_TRACE, STR_USER } from \"./InternalConstants\";\r\nimport { retryPolicyGetMillisToBackoffForRetry } from \"./RetryPolicy\";\r\nimport { createTimeoutWrapper } from \"./TimeoutOverrideWrapper\";\r\nvar FlushCheckTimer = 0.250; // This needs to be in seconds, so this is 250ms\r\nvar MaxNumberEventPerBatch = 500;\r\nvar EventsDroppedAtOneTime = 20;\r\nvar MaxSendAttempts = 6;\r\nvar MaxSyncUnloadSendAttempts = 2; // Assuming 2 based on beforeunload and unload\r\nvar MaxBackoffCount = 4;\r\nvar MaxConnections = 2;\r\nvar MaxRequestRetriesBeforeBackoff = 1;\r\nvar strEventsDiscarded = \"eventsDiscarded\";\r\nvar strOverrideInstrumentationKey = \"overrideInstrumentationKey\";\r\nvar strMaxEventRetryAttempts = \"maxEventRetryAttempts\";\r\nvar strMaxUnloadEventRetryAttempts = \"maxUnloadEventRetryAttempts\";\r\nvar strAddUnloadCb = \"addUnloadCb\";\r\n/**\r\n * Class that manages adding events to inbound queues and batching of events\r\n * into requests.\r\n */\r\nvar PostChannel = /** @class */ (function (_super) {\r\n    __extends(PostChannel, _super);\r\n    function PostChannel() {\r\n        var _this = _super.call(this) || this;\r\n        _this.identifier = \"PostChannel\";\r\n        _this.priority = 1011;\r\n        _this.version = '3.2.6';\r\n        var _config;\r\n        var _isTeardownCalled = false;\r\n        var _flushCallbackQueue = [];\r\n        var _flushCallbackTimerId = null;\r\n        var _paused = false;\r\n        var _immediateQueueSize = 0;\r\n        var _immediateQueueSizeLimit = 500;\r\n        var _queueSize = 0;\r\n        var _queueSizeLimit = 10000;\r\n        var _profiles = {};\r\n        var _currentProfile = RT_PROFILE;\r\n        var _scheduledTimerId = null;\r\n        var _immediateTimerId = null;\r\n        var _currentBackoffCount = 0;\r\n        var _timerCount = 0;\r\n        var _xhrOverride;\r\n        var _httpManager;\r\n        var _batchQueues = {};\r\n        var _autoFlushEventsLimit;\r\n        // either MaxBatchSize * (1+ Max Connections) or _queueLimit / 6 (where 3 latency Queues [normal, realtime, cost deferred] * 2 [allow half full -- allow for retry])\r\n        var _autoFlushBatchLimit;\r\n        var _delayedBatchSendLatency = -1;\r\n        var _delayedBatchReason;\r\n        var _optimizeObject = true;\r\n        var _isPageUnloadTriggered = false;\r\n        var _maxEventSendAttempts = MaxSendAttempts;\r\n        var _maxUnloadEventSendAttempts = MaxSyncUnloadSendAttempts;\r\n        var _evtNamespace;\r\n        var _timeoutWrapper;\r\n        dynamicProto(PostChannel, _this, function (_self, _base) {\r\n            _initDefaults();\r\n            // Special internal method to allow the DebugPlugin to hook embedded objects\r\n            _self[\"_getDbgPlgTargets\"] = function () {\r\n                return [_httpManager];\r\n            };\r\n            _self.initialize = function (coreConfig, core, extensions) {\r\n                doPerf(core, function () { return \"PostChannel:initialize\"; }, function () {\r\n                    var extendedCore = core;\r\n                    _base.initialize(coreConfig, core, extensions);\r\n                    try {\r\n                        var hasAddUnloadCb = !!core[strAddUnloadCb];\r\n                        _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());\r\n                        var ctx = _self._getTelCtx();\r\n                        coreConfig.extensionConfig[_self.identifier] = coreConfig.extensionConfig[_self.identifier] || {};\r\n                        _config = ctx.getExtCfg(_self.identifier);\r\n                        _timeoutWrapper = createTimeoutWrapper(_config.setTimeoutOverride, _config.clearTimeoutOverride);\r\n                        // Only try and use the optimizeObject() if this appears to be a chromium based browser and it has not been explicitly disabled\r\n                        _optimizeObject = !_config.disableOptimizeObj && isChromium();\r\n                        _hookWParam(extendedCore);\r\n                        if (_config.eventsLimitInMem > 0) {\r\n                            _queueSizeLimit = _config.eventsLimitInMem;\r\n                        }\r\n                        if (_config.immediateEventLimit > 0) {\r\n                            _immediateQueueSizeLimit = _config.immediateEventLimit;\r\n                        }\r\n                        if (_config.autoFlushEventsLimit > 0) {\r\n                            _autoFlushEventsLimit = _config.autoFlushEventsLimit;\r\n                        }\r\n                        if (isNumber(_config[strMaxEventRetryAttempts])) {\r\n                            _maxEventSendAttempts = _config[strMaxEventRetryAttempts];\r\n                        }\r\n                        if (isNumber(_config[strMaxUnloadEventRetryAttempts])) {\r\n                            _maxUnloadEventSendAttempts = _config[strMaxUnloadEventRetryAttempts];\r\n                        }\r\n                        _setAutoLimits();\r\n                        if (_config.httpXHROverride && _config.httpXHROverride.sendPOST) {\r\n                            _xhrOverride = _config.httpXHROverride;\r\n                        }\r\n                        if (isValueAssigned(coreConfig.anonCookieName)) {\r\n                            _httpManager.addQueryStringParameter(\"anoncknm\", coreConfig.anonCookieName);\r\n                        }\r\n                        _httpManager.sendHook = _config.payloadPreprocessor;\r\n                        _httpManager.sendListener = _config.payloadListener;\r\n                        // Override endpointUrl if provided in Post config\r\n                        var endpointUrl = _config.overrideEndpointUrl ? _config.overrideEndpointUrl : coreConfig.endpointUrl;\r\n                        _self._notificationManager = coreConfig.extensionConfig.NotificationManager;\r\n                        _httpManager.initialize(endpointUrl, _self.core, _self, _xhrOverride, _config);\r\n                        var excludePageUnloadEvents = coreConfig.disablePageUnloadEvents || [];\r\n                        // When running in Web browsers try to send all telemetry if page is unloaded\r\n                        addPageUnloadEventListener(_handleUnloadEvents, excludePageUnloadEvents, _evtNamespace);\r\n                        addPageHideEventListener(_handleUnloadEvents, excludePageUnloadEvents, _evtNamespace);\r\n                        addPageShowEventListener(_handleShowEvents, coreConfig.disablePageShowEvents, _evtNamespace);\r\n                    }\r\n                    catch (e) {\r\n                        // resetting the initialized state because of failure\r\n                        _self.setInitialized(false);\r\n                        throw e;\r\n                    }\r\n                }, function () { return ({ coreConfig: coreConfig, core: core, extensions: extensions }); });\r\n            };\r\n            _self.processTelemetry = function (ev, itemCtx) {\r\n                setProcessTelemetryTimings(ev, _self.identifier);\r\n                itemCtx = _self._getTelCtx(itemCtx);\r\n                // Get the channel instance from the current request/instance\r\n                var channelConfig = itemCtx.getExtCfg(_self.identifier);\r\n                // DisableTelemetry was defined in the config provided during initialization\r\n                var disableTelemetry = !!_config.disableTelemetry;\r\n                if (channelConfig) {\r\n                    // DisableTelemetry is defined in the config for this request/instance\r\n                    disableTelemetry = disableTelemetry || !!channelConfig.disableTelemetry;\r\n                }\r\n                var event = ev;\r\n                if (!disableTelemetry && !_isTeardownCalled) {\r\n                    // Override iKey if provided in Post config if provided for during initialization\r\n                    if (_config[strOverrideInstrumentationKey]) {\r\n                        event.iKey = _config[strOverrideInstrumentationKey];\r\n                    }\r\n                    // Override iKey if provided in Post config if provided for this instance\r\n                    if (channelConfig && channelConfig[strOverrideInstrumentationKey]) {\r\n                        event.iKey = channelConfig[strOverrideInstrumentationKey];\r\n                    }\r\n                    _addEventToQueues(event, true);\r\n                    if (_isPageUnloadTriggered) {\r\n                        // Unload event has been received so we need to try and flush new events\r\n                        _releaseAllQueues(2 /* EventSendType.SendBeacon */, 2 /* SendRequestReason.Unload */);\r\n                    }\r\n                    else {\r\n                        _scheduleTimer();\r\n                    }\r\n                }\r\n                _self.processNext(event, itemCtx);\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState) {\r\n                _releaseAllQueues(2 /* EventSendType.SendBeacon */, 2 /* SendRequestReason.Unload */);\r\n                _isTeardownCalled = true;\r\n                _httpManager.teardown();\r\n                removePageUnloadEventListener(null, _evtNamespace);\r\n                removePageHideEventListener(null, _evtNamespace);\r\n                removePageShowEventListener(null, _evtNamespace);\r\n                // Just register to remove all events associated with this namespace\r\n                _initDefaults();\r\n            };\r\n            function _hookWParam(extendedCore) {\r\n                var existingGetWParamMethod = extendedCore.getWParam;\r\n                extendedCore.getWParam = function () {\r\n                    var wparam = 0;\r\n                    if (_config.ignoreMc1Ms0CookieProcessing) {\r\n                        wparam = wparam | 2;\r\n                    }\r\n                    return wparam | existingGetWParamMethod();\r\n                };\r\n            }\r\n            // Moving event handlers out from the initialize closure so that any local variables can be garbage collected\r\n            function _handleUnloadEvents(evt) {\r\n                var theEvt = evt || getWindow().event; // IE 8 does not pass the event\r\n                if (theEvt.type !== \"beforeunload\") {\r\n                    // Only set the unload trigger if not beforeunload event as beforeunload can be cancelled while the other events can't\r\n                    _isPageUnloadTriggered = true;\r\n                    _httpManager.setUnloading(_isPageUnloadTriggered);\r\n                }\r\n                _releaseAllQueues(2 /* EventSendType.SendBeacon */, 2 /* SendRequestReason.Unload */);\r\n            }\r\n            function _handleShowEvents(evt) {\r\n                // Handle the page becoming visible again\r\n                _isPageUnloadTriggered = false;\r\n                _httpManager.setUnloading(_isPageUnloadTriggered);\r\n            }\r\n            function _addEventToQueues(event, append) {\r\n                // If send attempt field is undefined we should set it to 0.\r\n                if (!event.sendAttempt) {\r\n                    event.sendAttempt = 0;\r\n                }\r\n                // Add default latency\r\n                if (!event.latency) {\r\n                    event.latency = 1 /* EventLatencyValue.Normal */;\r\n                }\r\n                // Remove extra AI properties if present\r\n                if (event.ext && event.ext[STR_TRACE]) {\r\n                    delete (event.ext[STR_TRACE]);\r\n                }\r\n                if (event.ext && event.ext[STR_USER] && event.ext[STR_USER][\"id\"]) {\r\n                    delete (event.ext[STR_USER][\"id\"]);\r\n                }\r\n                // v8 performance optimization for iterating over the keys\r\n                if (_optimizeObject) {\r\n                    setProcessTelemetryTimings;\r\n                    event.ext = optimizeObject(event.ext);\r\n                    if (event.baseData) {\r\n                        event.baseData = optimizeObject(event.baseData);\r\n                    }\r\n                    if (event.data) {\r\n                        event.data = optimizeObject(event.data);\r\n                    }\r\n                }\r\n                if (event.sync) {\r\n                    // If the transmission is backed off then do not send synchronous events.\r\n                    // We will convert these events to Real time latency instead.\r\n                    if (_currentBackoffCount || _paused) {\r\n                        event.latency = 3 /* EventLatencyValue.RealTime */;\r\n                        event.sync = false;\r\n                    }\r\n                    else {\r\n                        // Log the event synchronously\r\n                        if (_httpManager) {\r\n                            // v8 performance optimization for iterating over the keys\r\n                            if (_optimizeObject) {\r\n                                event = optimizeObject(event);\r\n                            }\r\n                            _httpManager.sendSynchronousBatch(EventBatch.create(event.iKey, [event]), event.sync === true ? 1 /* EventSendType.Synchronous */ : event.sync, 3 /* SendRequestReason.SyncEvent */);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                var evtLatency = event.latency;\r\n                var queueSize = _queueSize;\r\n                var queueLimit = _queueSizeLimit;\r\n                if (evtLatency === 4 /* EventLatencyValue.Immediate */) {\r\n                    queueSize = _immediateQueueSize;\r\n                    queueLimit = _immediateQueueSizeLimit;\r\n                }\r\n                var eventDropped = false;\r\n                // Only add the event if the queue isn't full or it's a direct event (which don't add to the queue sizes)\r\n                if (queueSize < queueLimit) {\r\n                    eventDropped = !_addEventToProperQueue(event, append);\r\n                }\r\n                else {\r\n                    var dropLatency = 1 /* EventLatencyValue.Normal */;\r\n                    var dropNumber = EventsDroppedAtOneTime;\r\n                    if (evtLatency === 4 /* EventLatencyValue.Immediate */) {\r\n                        // Only drop other immediate events as they are not technically sharing the general queue\r\n                        dropLatency = 4 /* EventLatencyValue.Immediate */;\r\n                        dropNumber = 1;\r\n                    }\r\n                    // Drop old event from lower or equal latency\r\n                    eventDropped = true;\r\n                    if (_dropEventWithLatencyOrLess(event.iKey, event.latency, dropLatency, dropNumber)) {\r\n                        eventDropped = !_addEventToProperQueue(event, append);\r\n                    }\r\n                }\r\n                if (eventDropped) {\r\n                    // Can't drop events from current queues because the all the slots are taken by queues that are being flushed.\r\n                    _notifyEvents(strEventsDiscarded, [event], EventsDiscardedReason.QueueFull);\r\n                }\r\n            }\r\n            _self.setEventQueueLimits = function (eventLimit, autoFlushLimit) {\r\n                _queueSizeLimit = eventLimit > 0 ? eventLimit : 10000;\r\n                _autoFlushEventsLimit = autoFlushLimit > 0 ? autoFlushLimit : 0;\r\n                _setAutoLimits();\r\n                // We only do this check here as during normal event addition if the queue is > then events start getting dropped\r\n                var doFlush = _queueSize > eventLimit;\r\n                if (!doFlush && _autoFlushBatchLimit > 0) {\r\n                    // Check the auto flush max batch size\r\n                    for (var latency = 1 /* EventLatencyValue.Normal */; !doFlush && latency <= 3 /* EventLatencyValue.RealTime */; latency++) {\r\n                        var batchQueue = _batchQueues[latency];\r\n                        if (batchQueue && batchQueue.batches) {\r\n                            arrForEach(batchQueue.batches, function (theBatch) {\r\n                                if (theBatch && theBatch.count() >= _autoFlushBatchLimit) {\r\n                                    // If any 1 batch is > than the limit then trigger an auto flush\r\n                                    doFlush = true;\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                _performAutoFlush(true, doFlush);\r\n            };\r\n            _self.pause = function () {\r\n                _clearScheduledTimer();\r\n                _paused = true;\r\n                _httpManager.pause();\r\n            };\r\n            _self.resume = function () {\r\n                _paused = false;\r\n                _httpManager.resume();\r\n                _scheduleTimer();\r\n            };\r\n            _self.addResponseHandler = function (responseHandler) {\r\n                _httpManager._responseHandlers.push(responseHandler);\r\n            };\r\n            _self._loadTransmitProfiles = function (profiles) {\r\n                _resetTransmitProfiles();\r\n                objForEachKey(profiles, function (profileName, profileValue) {\r\n                    var profLen = profileValue.length;\r\n                    if (profLen >= 2) {\r\n                        var directValue = (profLen > 2 ? profileValue[2] : 0);\r\n                        profileValue.splice(0, profLen - 2);\r\n                        // Make sure if a higher latency is set to not send then don't send lower latency\r\n                        if (profileValue[1] < 0) {\r\n                            profileValue[0] = -1;\r\n                        }\r\n                        // Make sure each latency is multiple of the latency higher then it. If not a multiple\r\n                        // we round up so that it becomes a multiple.\r\n                        if (profileValue[1] > 0 && profileValue[0] > 0) {\r\n                            var timerMultiplier = profileValue[0] / profileValue[1];\r\n                            profileValue[0] = Math.ceil(timerMultiplier) * profileValue[1];\r\n                        }\r\n                        // Add back the direct profile timeout\r\n                        if (directValue >= 0 && profileValue[1] >= 0 && directValue > profileValue[1]) {\r\n                            // Make sure if it's not disabled (< 0) then make sure it's not larger than RealTime\r\n                            directValue = profileValue[1];\r\n                        }\r\n                        profileValue.push(directValue);\r\n                        _profiles[profileName] = profileValue;\r\n                    }\r\n                });\r\n            };\r\n            _self.flush = function (async, callback, sendReason) {\r\n                if (async === void 0) { async = true; }\r\n                if (!_paused) {\r\n                    sendReason = sendReason || 1 /* SendRequestReason.ManualFlush */;\r\n                    if (async) {\r\n                        if (_flushCallbackTimerId == null) {\r\n                            // Clear the normal schedule timer as we are going to try and flush ASAP\r\n                            _clearScheduledTimer();\r\n                            // Move all queued events to the HttpManager so that we don't discard new events (Auto flush scenario)\r\n                            _queueBatches(1 /* EventLatencyValue.Normal */, 0 /* EventSendType.Batched */, sendReason);\r\n                            _flushCallbackTimerId = _createTimer(function () {\r\n                                _flushCallbackTimerId = null;\r\n                                _flushImpl(callback, sendReason);\r\n                            }, 0);\r\n                        }\r\n                        else {\r\n                            // Even if null (no callback) this will ensure after the flushImpl finishes waiting\r\n                            // for a completely idle connection it will attempt to re-flush any queued events on the next cycle\r\n                            _flushCallbackQueue.push(callback);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Clear the normal schedule timer as we are going to try and flush ASAP\r\n                        var cleared = _clearScheduledTimer();\r\n                        // Now cause all queued events to be sent synchronously\r\n                        _sendEventsForLatencyAndAbove(1 /* EventLatencyValue.Normal */, 1 /* EventSendType.Synchronous */, sendReason);\r\n                        if (callback !== null && callback !== undefined) {\r\n                            callback();\r\n                        }\r\n                        if (cleared) {\r\n                            // restart the normal event timer if it was cleared\r\n                            _scheduleTimer();\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            _self.setMsaAuthTicket = function (ticket) {\r\n                _httpManager.addHeader(STR_MSA_DEVICE_TICKET, ticket);\r\n            };\r\n            _self.hasEvents = _hasEvents;\r\n            _self._setTransmitProfile = function (profileName) {\r\n                if (_currentProfile !== profileName && _profiles[profileName] !== undefined) {\r\n                    _clearScheduledTimer();\r\n                    _currentProfile = profileName;\r\n                    _scheduleTimer();\r\n                }\r\n            };\r\n            /**\r\n             * Batch and send events currently in the queue for the given latency.\r\n             * @param latency - Latency for which to send events.\r\n             */\r\n            function _sendEventsForLatencyAndAbove(latency, sendType, sendReason) {\r\n                var queued = _queueBatches(latency, sendType, sendReason);\r\n                // Always trigger the request as while the post channel may not have queued additional events, the httpManager may already have waiting events\r\n                _httpManager.sendQueuedRequests(sendType, sendReason);\r\n                return queued;\r\n            }\r\n            function _hasEvents() {\r\n                return _queueSize > 0;\r\n            }\r\n            /**\r\n             * Try to schedule the timer after which events will be sent. If there are\r\n             * no events to be sent, or there is already a timer scheduled, or the\r\n             * http manager doesn't have any idle connections this method is no-op.\r\n             */\r\n            function _scheduleTimer() {\r\n                // If we had previously attempted to send requests, but the http manager didn't have any idle connections then the requests where delayed\r\n                // so try and requeue then again now\r\n                if (_delayedBatchSendLatency >= 0 && _queueBatches(_delayedBatchSendLatency, 0 /* EventSendType.Batched */, _delayedBatchReason)) {\r\n                    _httpManager.sendQueuedRequests(0 /* EventSendType.Batched */, _delayedBatchReason);\r\n                }\r\n                if (_immediateQueueSize > 0 && !_immediateTimerId && !_paused) {\r\n                    // During initialization _profiles enforce that the direct [2] is less than real time [1] timer value\r\n                    // If the immediateTimeout is disabled the immediate events will be sent with Real Time events\r\n                    var immediateTimeOut = _profiles[_currentProfile][2];\r\n                    if (immediateTimeOut >= 0) {\r\n                        _immediateTimerId = _createTimer(function () {\r\n                            _immediateTimerId = null;\r\n                            // Only try to send direct events\r\n                            _sendEventsForLatencyAndAbove(4 /* EventLatencyValue.Immediate */, 0 /* EventSendType.Batched */, 1 /* SendRequestReason.NormalSchedule */);\r\n                            _scheduleTimer();\r\n                        }, immediateTimeOut);\r\n                    }\r\n                }\r\n                // During initialization the _profiles enforce that the normal [0] is a multiple of the real time [1] timer value\r\n                var timeOut = _profiles[_currentProfile][1];\r\n                if (!_scheduledTimerId && !_flushCallbackTimerId && timeOut >= 0 && !_paused) {\r\n                    if (_hasEvents()) {\r\n                        _scheduledTimerId = _createTimer(function () {\r\n                            _scheduledTimerId = null;\r\n                            _sendEventsForLatencyAndAbove(_timerCount === 0 ? 3 /* EventLatencyValue.RealTime */ : 1 /* EventLatencyValue.Normal */, 0 /* EventSendType.Batched */, 1 /* SendRequestReason.NormalSchedule */);\r\n                            // Increment the count for next cycle\r\n                            _timerCount++;\r\n                            _timerCount %= 2;\r\n                            _scheduleTimer();\r\n                        }, timeOut);\r\n                    }\r\n                    else {\r\n                        _timerCount = 0;\r\n                    }\r\n                }\r\n            }\r\n            _self._backOffTransmission = function () {\r\n                if (_currentBackoffCount < MaxBackoffCount) {\r\n                    _currentBackoffCount++;\r\n                    _clearScheduledTimer();\r\n                    _scheduleTimer();\r\n                }\r\n            };\r\n            _self._clearBackOff = function () {\r\n                if (_currentBackoffCount) {\r\n                    _currentBackoffCount = 0;\r\n                    _clearScheduledTimer();\r\n                    _scheduleTimer();\r\n                }\r\n            };\r\n            function _initDefaults() {\r\n                _config = null;\r\n                _isTeardownCalled = false;\r\n                _flushCallbackQueue = [];\r\n                _flushCallbackTimerId = null;\r\n                _paused = false;\r\n                _immediateQueueSize = 0;\r\n                _immediateQueueSizeLimit = 500;\r\n                _queueSize = 0;\r\n                _queueSizeLimit = 10000;\r\n                _profiles = {};\r\n                _currentProfile = RT_PROFILE;\r\n                _scheduledTimerId = null;\r\n                _immediateTimerId = null;\r\n                _currentBackoffCount = 0;\r\n                _timerCount = 0;\r\n                _xhrOverride = null;\r\n                _batchQueues = {};\r\n                _autoFlushEventsLimit = undefined;\r\n                // either MaxBatchSize * (1+ Max Connections) or _queueLimit / 6 (where 3 latency Queues [normal, realtime, cost deferred] * 2 [allow half full -- allow for retry])\r\n                _autoFlushBatchLimit = 0;\r\n                _delayedBatchSendLatency = -1;\r\n                _delayedBatchReason = null;\r\n                _optimizeObject = true;\r\n                _isPageUnloadTriggered = false;\r\n                _maxEventSendAttempts = MaxSendAttempts;\r\n                _maxUnloadEventSendAttempts = MaxSyncUnloadSendAttempts;\r\n                _evtNamespace = null;\r\n                _timeoutWrapper = createTimeoutWrapper();\r\n                _httpManager = new HttpManager(MaxNumberEventPerBatch, MaxConnections, MaxRequestRetriesBeforeBackoff, {\r\n                    requeue: _requeueEvents,\r\n                    send: _sendingEvent,\r\n                    sent: _eventsSentEvent,\r\n                    drop: _eventsDropped,\r\n                    rspFail: _eventsResponseFail,\r\n                    oth: _otherEvent\r\n                }, _timeoutWrapper);\r\n                _initializeProfiles();\r\n                _clearQueues();\r\n                _setAutoLimits();\r\n            }\r\n            function _createTimer(theTimerFunc, timeOut) {\r\n                // If the transmission is backed off make the timer at least 1 sec to allow for back off.\r\n                if (timeOut === 0 && _currentBackoffCount) {\r\n                    timeOut = 1;\r\n                }\r\n                var timerMultiplier = 1000;\r\n                if (_currentBackoffCount) {\r\n                    timerMultiplier = retryPolicyGetMillisToBackoffForRetry(_currentBackoffCount - 1);\r\n                }\r\n                return _timeoutWrapper.set(theTimerFunc, timeOut * timerMultiplier);\r\n            }\r\n            function _clearScheduledTimer() {\r\n                if (_scheduledTimerId !== null) {\r\n                    _timeoutWrapper.clear(_scheduledTimerId);\r\n                    _scheduledTimerId = null;\r\n                    _timerCount = 0;\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            // Try to send all queued events using beacons if available\r\n            function _releaseAllQueues(sendType, sendReason) {\r\n                _clearScheduledTimer();\r\n                // Cancel all flush callbacks\r\n                if (_flushCallbackTimerId) {\r\n                    _timeoutWrapper.clear(_flushCallbackTimerId);\r\n                    _flushCallbackTimerId = null;\r\n                }\r\n                if (!_paused) {\r\n                    // Queue all the remaining requests to be sent. The requests will be sent using HTML5 Beacons if they are available.\r\n                    _sendEventsForLatencyAndAbove(1 /* EventLatencyValue.Normal */, sendType, sendReason);\r\n                }\r\n            }\r\n            /**\r\n             * Add empty queues for all latencies in the inbound queues map. This is called\r\n             * when Transmission Manager is being flushed. This ensures that new events added\r\n             * after flush are stored separately till we flush the current events.\r\n             */\r\n            function _clearQueues() {\r\n                _batchQueues[4 /* EventLatencyValue.Immediate */] = {\r\n                    batches: [],\r\n                    iKeyMap: {}\r\n                };\r\n                _batchQueues[3 /* EventLatencyValue.RealTime */] = {\r\n                    batches: [],\r\n                    iKeyMap: {}\r\n                };\r\n                _batchQueues[2 /* EventLatencyValue.CostDeferred */] = {\r\n                    batches: [],\r\n                    iKeyMap: {}\r\n                };\r\n                _batchQueues[1 /* EventLatencyValue.Normal */] = {\r\n                    batches: [],\r\n                    iKeyMap: {}\r\n                };\r\n            }\r\n            function _getEventBatch(iKey, latency, create) {\r\n                var batchQueue = _batchQueues[latency];\r\n                if (!batchQueue) {\r\n                    latency = 1 /* EventLatencyValue.Normal */;\r\n                    batchQueue = _batchQueues[latency];\r\n                }\r\n                var eventBatch = batchQueue.iKeyMap[iKey];\r\n                if (!eventBatch && create) {\r\n                    eventBatch = EventBatch.create(iKey);\r\n                    batchQueue.batches.push(eventBatch);\r\n                    batchQueue.iKeyMap[iKey] = eventBatch;\r\n                }\r\n                return eventBatch;\r\n            }\r\n            function _performAutoFlush(isAsync, doFlush) {\r\n                // Only perform the auto flush check if the httpManager has an idle connection and we are not in a backoff situation\r\n                if (_httpManager.canSendRequest() && !_currentBackoffCount) {\r\n                    if (_autoFlushEventsLimit > 0 && _queueSize > _autoFlushEventsLimit) {\r\n                        // Force flushing\r\n                        doFlush = true;\r\n                    }\r\n                    if (doFlush && _flushCallbackTimerId == null) {\r\n                        // Auto flush the queue\r\n                        _self.flush(isAsync, null, 20 /* SendRequestReason.MaxQueuedEvents */);\r\n                    }\r\n                }\r\n            }\r\n            function _addEventToProperQueue(event, append) {\r\n                // v8 performance optimization for iterating over the keys\r\n                if (_optimizeObject) {\r\n                    event = optimizeObject(event);\r\n                }\r\n                var latency = event.latency;\r\n                var eventBatch = _getEventBatch(event.iKey, latency, true);\r\n                if (eventBatch.addEvent(event)) {\r\n                    if (latency !== 4 /* EventLatencyValue.Immediate */) {\r\n                        _queueSize++;\r\n                        // Check for auto flushing based on total events in the queue, but not for requeued or retry events\r\n                        if (append && event.sendAttempt === 0) {\r\n                            // Force the flushing of the batch if the batch (specific iKey / latency combination) reaches it's auto flush limit\r\n                            _performAutoFlush(!event.sync, _autoFlushBatchLimit > 0 && eventBatch.count() >= _autoFlushBatchLimit);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Direct events don't need auto flushing as they are scheduled (by default) for immediate delivery\r\n                        _immediateQueueSize++;\r\n                    }\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            function _dropEventWithLatencyOrLess(iKey, latency, currentLatency, dropNumber) {\r\n                while (currentLatency <= latency) {\r\n                    var eventBatch = _getEventBatch(iKey, latency, true);\r\n                    if (eventBatch && eventBatch.count() > 0) {\r\n                        // Dropped oldest events from lowest possible latency\r\n                        var droppedEvents = eventBatch.split(0, dropNumber);\r\n                        var droppedCount = droppedEvents.count();\r\n                        if (droppedCount > 0) {\r\n                            if (currentLatency === 4 /* EventLatencyValue.Immediate */) {\r\n                                _immediateQueueSize -= droppedCount;\r\n                            }\r\n                            else {\r\n                                _queueSize -= droppedCount;\r\n                            }\r\n                            _notifyBatchEvents(strEventsDiscarded, [droppedEvents], EventsDiscardedReason.QueueFull);\r\n                            return true;\r\n                        }\r\n                    }\r\n                    currentLatency++;\r\n                }\r\n                // Unable to drop any events -- lets just make sure the queue counts are correct to avoid exhaustion\r\n                _resetQueueCounts();\r\n                return false;\r\n            }\r\n            /**\r\n             * Internal helper to reset the queue counts, used as a backstop to avoid future queue exhaustion errors\r\n             * that might occur because of counting issues.\r\n             */\r\n            function _resetQueueCounts() {\r\n                var immediateQueue = 0;\r\n                var normalQueue = 0;\r\n                var _loop_1 = function (latency) {\r\n                    var batchQueue = _batchQueues[latency];\r\n                    if (batchQueue && batchQueue.batches) {\r\n                        arrForEach(batchQueue.batches, function (theBatch) {\r\n                            if (latency === 4 /* EventLatencyValue.Immediate */) {\r\n                                immediateQueue += theBatch.count();\r\n                            }\r\n                            else {\r\n                                normalQueue += theBatch.count();\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n                for (var latency = 1 /* EventLatencyValue.Normal */; latency <= 4 /* EventLatencyValue.Immediate */; latency++) {\r\n                    _loop_1(latency);\r\n                }\r\n                _queueSize = normalQueue;\r\n                _immediateQueueSize = immediateQueue;\r\n            }\r\n            function _queueBatches(latency, sendType, sendReason) {\r\n                var eventsQueued = false;\r\n                var isAsync = sendType === 0 /* EventSendType.Batched */;\r\n                // Only queue batches (to the HttpManager) if this is a sync request or the httpManager has an idle connection\r\n                // Thus keeping the events within the PostChannel until the HttpManager has a connection available\r\n                // This is so we can drop \"old\" events if the queue is getting full because we can't successfully send events\r\n                if (!isAsync || _httpManager.canSendRequest()) {\r\n                    doPerf(_self.core, function () { return \"PostChannel._queueBatches\"; }, function () {\r\n                        var droppedEvents = [];\r\n                        var latencyToProcess = 4 /* EventLatencyValue.Immediate */;\r\n                        while (latencyToProcess >= latency) {\r\n                            var batchQueue = _batchQueues[latencyToProcess];\r\n                            if (batchQueue && batchQueue.batches && batchQueue.batches.length > 0) {\r\n                                arrForEach(batchQueue.batches, function (theBatch) {\r\n                                    // Add the batch to the http manager to send the requests\r\n                                    if (!_httpManager.addBatch(theBatch)) {\r\n                                        // The events from this iKey are being dropped (killed)\r\n                                        droppedEvents = droppedEvents.concat(theBatch.events());\r\n                                    }\r\n                                    else {\r\n                                        eventsQueued = eventsQueued || (theBatch && theBatch.count() > 0);\r\n                                    }\r\n                                    if (latencyToProcess === 4 /* EventLatencyValue.Immediate */) {\r\n                                        _immediateQueueSize -= theBatch.count();\r\n                                    }\r\n                                    else {\r\n                                        _queueSize -= theBatch.count();\r\n                                    }\r\n                                });\r\n                                // Remove all batches from this Queue\r\n                                batchQueue.batches = [];\r\n                                batchQueue.iKeyMap = {};\r\n                            }\r\n                            latencyToProcess--;\r\n                        }\r\n                        if (droppedEvents.length > 0) {\r\n                            _notifyEvents(strEventsDiscarded, droppedEvents, EventsDiscardedReason.KillSwitch);\r\n                        }\r\n                        if (eventsQueued && _delayedBatchSendLatency >= latency) {\r\n                            // We have queued events at the same level as the delayed values so clear the setting\r\n                            _delayedBatchSendLatency = -1;\r\n                            _delayedBatchReason = 0 /* SendRequestReason.Undefined */;\r\n                        }\r\n                    }, function () { return ({ latency: latency, sendType: sendType, sendReason: sendReason }); }, !isAsync);\r\n                }\r\n                else {\r\n                    // remember the min latency so that we can re-trigger later\r\n                    _delayedBatchSendLatency = _delayedBatchSendLatency >= 0 ? Math.min(_delayedBatchSendLatency, latency) : latency;\r\n                    _delayedBatchReason = Math.max(_delayedBatchReason, sendReason);\r\n                }\r\n                return eventsQueued;\r\n            }\r\n            /**\r\n             * This is the callback method is called as part of the manual flushing process.\r\n             * @param callback\r\n             * @param sendReason\r\n             */\r\n            function _flushImpl(callback, sendReason) {\r\n                // Add any additional queued events and cause all queued events to be sent asynchronously\r\n                _sendEventsForLatencyAndAbove(1 /* EventLatencyValue.Normal */, 0 /* EventSendType.Batched */, sendReason);\r\n                // All events (should) have been queue -- lets just make sure the queue counts are correct to avoid queue exhaustion (previous bug #9685112)\r\n                _resetQueueCounts();\r\n                _waitForIdleManager(function () {\r\n                    // Only called AFTER the httpManager does not have any outstanding requests\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                    if (_flushCallbackQueue.length > 0) {\r\n                        _flushCallbackTimerId = _createTimer(function () {\r\n                            _flushCallbackTimerId = null;\r\n                            _flushImpl(_flushCallbackQueue.shift(), sendReason);\r\n                        }, 0);\r\n                    }\r\n                    else {\r\n                        // No more flush requests\r\n                        _flushCallbackTimerId = null;\r\n                        // Restart the normal timer schedule\r\n                        _scheduleTimer();\r\n                    }\r\n                });\r\n            }\r\n            function _waitForIdleManager(callback) {\r\n                if (_httpManager.isCompletelyIdle()) {\r\n                    callback();\r\n                }\r\n                else {\r\n                    _flushCallbackTimerId = _createTimer(function () {\r\n                        _flushCallbackTimerId = null;\r\n                        _waitForIdleManager(callback);\r\n                    }, FlushCheckTimer);\r\n                }\r\n            }\r\n            /**\r\n             * Resets the transmit profiles to the default profiles of Real Time, Near Real Time\r\n             * and Best Effort. This removes all the custom profiles that were loaded.\r\n             */\r\n            function _resetTransmitProfiles() {\r\n                _clearScheduledTimer();\r\n                _initializeProfiles();\r\n                _currentProfile = RT_PROFILE;\r\n                _scheduleTimer();\r\n            }\r\n            function _initializeProfiles() {\r\n                _profiles = {};\r\n                _profiles[RT_PROFILE] = [2, 1, 0];\r\n                _profiles[NRT_PROFILE] = [6, 3, 0];\r\n                _profiles[BE_PROFILE] = [18, 9, 0];\r\n            }\r\n            /**\r\n             * The notification handler for requeue events\r\n             * @ignore\r\n             */\r\n            function _requeueEvents(batches, reason) {\r\n                var droppedEvents = [];\r\n                var maxSendAttempts = _maxEventSendAttempts;\r\n                if (_isPageUnloadTriggered) {\r\n                    // If a page unlaod has been triggered reduce the number of times we try to \"retry\"\r\n                    maxSendAttempts = _maxUnloadEventSendAttempts;\r\n                }\r\n                arrForEach(batches, function (theBatch) {\r\n                    if (theBatch && theBatch.count() > 0) {\r\n                        arrForEach(theBatch.events(), function (theEvent) {\r\n                            if (theEvent) {\r\n                                // Check if the request being added back is for a sync event in which case mark it no longer a sync event\r\n                                if (theEvent.sync) {\r\n                                    theEvent.latency = 4 /* EventLatencyValue.Immediate */;\r\n                                    theEvent.sync = false;\r\n                                }\r\n                                if (theEvent.sendAttempt < maxSendAttempts) {\r\n                                    // Reset the event timings\r\n                                    setProcessTelemetryTimings(theEvent, _self.identifier);\r\n                                    _addEventToQueues(theEvent, false);\r\n                                }\r\n                                else {\r\n                                    droppedEvents.push(theEvent);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                if (droppedEvents.length > 0) {\r\n                    _notifyEvents(strEventsDiscarded, droppedEvents, EventsDiscardedReason.NonRetryableStatus);\r\n                }\r\n                if (_isPageUnloadTriggered) {\r\n                    // Unload event has been received so we need to try and flush new events\r\n                    _releaseAllQueues(2 /* EventSendType.SendBeacon */, 2 /* SendRequestReason.Unload */);\r\n                }\r\n            }\r\n            function _callNotification(evtName, theArgs) {\r\n                var manager = (_self._notificationManager || {});\r\n                var notifyFunc = manager[evtName];\r\n                if (notifyFunc) {\r\n                    try {\r\n                        notifyFunc.apply(manager, theArgs);\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternal(_self.diagLog(), 1 /* eLoggingSeverity.CRITICAL */, 74 /* _eInternalMessageId.NotificationException */, evtName + \" notification failed: \" + e);\r\n                    }\r\n                }\r\n            }\r\n            function _notifyEvents(evtName, theEvents) {\r\n                var extraArgs = [];\r\n                for (var _i = 2; _i < arguments.length; _i++) {\r\n                    extraArgs[_i - 2] = arguments[_i];\r\n                }\r\n                if (theEvents && theEvents.length > 0) {\r\n                    _callNotification(evtName, [theEvents].concat(extraArgs));\r\n                }\r\n            }\r\n            function _notifyBatchEvents(evtName, batches) {\r\n                var extraArgs = [];\r\n                for (var _i = 2; _i < arguments.length; _i++) {\r\n                    extraArgs[_i - 2] = arguments[_i];\r\n                }\r\n                if (batches && batches.length > 0) {\r\n                    arrForEach(batches, function (theBatch) {\r\n                        if (theBatch && theBatch.count() > 0) {\r\n                            _callNotification(evtName, [theBatch.events()].concat(extraArgs));\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            /**\r\n             * The notification handler for when batches are about to be sent\r\n             * @ignore\r\n             */\r\n            function _sendingEvent(batches, reason, isSyncRequest) {\r\n                if (batches && batches.length > 0) {\r\n                    _callNotification(\"eventsSendRequest\", [(reason >= 1000 /* EventBatchNotificationReason.SendingUndefined */ && reason <= 1999 /* EventBatchNotificationReason.SendingEventMax */ ?\r\n                            reason - 1000 /* EventBatchNotificationReason.SendingUndefined */ :\r\n                            0 /* SendRequestReason.Undefined */), isSyncRequest !== true]);\r\n                }\r\n            }\r\n            /**\r\n             * This event represents that a batch of events have been successfully sent and a response received\r\n             * @param batches The notification handler for when the batches have been successfully sent\r\n             * @param reason For this event the reason will always be EventBatchNotificationReason.Complete\r\n             */\r\n            function _eventsSentEvent(batches, reason) {\r\n                _notifyBatchEvents(\"eventsSent\", batches, reason);\r\n                // Try and schedule the processing timer if we have events\r\n                _scheduleTimer();\r\n            }\r\n            function _eventsDropped(batches, reason) {\r\n                _notifyBatchEvents(strEventsDiscarded, batches, (reason >= 8000 /* EventBatchNotificationReason.EventsDropped */ && reason <= 8999 /* EventBatchNotificationReason.EventsDroppedMax */ ?\r\n                    reason - 8000 /* EventBatchNotificationReason.EventsDropped */ :\r\n                    EventsDiscardedReason.Unknown));\r\n            }\r\n            function _eventsResponseFail(batches) {\r\n                _notifyBatchEvents(strEventsDiscarded, batches, EventsDiscardedReason.NonRetryableStatus);\r\n                // Try and schedule the processing timer if we have events\r\n                _scheduleTimer();\r\n            }\r\n            function _otherEvent(batches, reason) {\r\n                _notifyBatchEvents(strEventsDiscarded, batches, EventsDiscardedReason.Unknown);\r\n                // Try and schedule the processing timer if we have events\r\n                _scheduleTimer();\r\n            }\r\n            function _setAutoLimits() {\r\n                if (!_config || !_config.disableAutoBatchFlushLimit) {\r\n                    _autoFlushBatchLimit = Math.max(MaxNumberEventPerBatch * (MaxConnections + 1), _queueSizeLimit / 6);\r\n                }\r\n                else {\r\n                    _autoFlushBatchLimit = 0;\r\n                }\r\n            }\r\n            // Provided for backward compatibility they are not \"expected\" to be in current use but they are public\r\n            objDefineAccessors(_self, \"_setTimeoutOverride\", function () { return _timeoutWrapper.set; }, function (value) {\r\n                // Recreate the timeout wrapper\r\n                _timeoutWrapper = createTimeoutWrapper(value, _timeoutWrapper.clear);\r\n            });\r\n            objDefineAccessors(_self, \"_clearTimeoutOverride\", function () { return _timeoutWrapper.clear; }, function (value) {\r\n                // Recreate the timeout wrapper\r\n                _timeoutWrapper = createTimeoutWrapper(_timeoutWrapper.set, value);\r\n            });\r\n        });\r\n        return _this;\r\n    }\r\n// Removed Stub for PostChannel.prototype.initialize.\r\n// Removed Stub for PostChannel.prototype.processTelemetry.\r\n// Removed Stub for PostChannel.prototype.setEventQueueLimits.\r\n// Removed Stub for PostChannel.prototype.pause.\r\n// Removed Stub for PostChannel.prototype.resume.\r\n// Removed Stub for PostChannel.prototype.addResponseHandler.\r\n// Removed Stub for PostChannel.prototype.flush.\r\n// Removed Stub for PostChannel.prototype.setMsaAuthTicket.\r\n// Removed Stub for PostChannel.prototype.hasEvents.\r\n// Removed Stub for PostChannel.prototype._loadTransmitProfiles.\r\n// Removed Stub for PostChannel.prototype._setTransmitProfile.\r\n// Removed Stub for PostChannel.prototype._backOffTransmission.\r\n// Removed Stub for PostChannel.prototype._clearBackOff.\r\n    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n    // this will be removed when ES3 support is dropped.\n    PostChannel.__ieDyn=1;\n\n    return PostChannel;\r\n}(BaseTelemetryPlugin));\r\nexport default PostChannel;\r\n//# sourceMappingURL=PostChannel.js.map"],"sourceRoot":""}