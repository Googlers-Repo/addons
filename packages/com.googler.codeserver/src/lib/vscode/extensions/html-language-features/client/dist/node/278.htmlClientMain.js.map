{"version":3,"sources":["webpack:///../node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js","webpack:///../node_modules/@microsoft/1ds-core-js/dist-esm/src/Enums.js","webpack:///../node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ChannelController.js","webpack:///../node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/TelemetryInitializerPlugin.js","webpack:///../node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseCore.js","webpack:///../node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/NotificationManager.js","webpack:///../node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/AppInsightsCore.js","webpack:///../node_modules/@microsoft/1ds-core-js/dist-esm/src/AppInsightsCore.js","webpack:///../node_modules/@microsoft/1ds-core-js/dist-esm/src/BaseCore.js","webpack:///../node_modules/@microsoft/1ds-core-js/dist-esm/src/ESPromise.js","webpack:///../node_modules/@microsoft/1ds-core-js/dist-esm/src/ESPromiseScheduler.js","webpack:///../node_modules/@microsoft/1ds-core-js/dist-esm/src/ValueSanitizer.js","webpack:///../node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Interfaces/IChannelControls.js"],"names":["_a","LoggingSeverity","CRITICAL","WARNING","_InternalMessageId","ClientPerformanceMathError","ErrorPVCalc","MessageLimitPerPVExceeded","MissingRequiredFieldSpecification","NavigationTimingNotSupported","OnError","SenderNotInitialized","TelemetrySampledAndNotSent","InvalidBackendResponse","InvalidDurationValue","TelemetryEnvelopeInvalid","CreateEnvelopeError","CircularReferenceDetected","IllegalCharsInName","ItemNotInArray","MaxAjaxPerPVExceeded","MessageTruncated","NameTooLong","SampleRateOutOfRange","StringValueTooLong","StartCalledMoreThanOnce","StopCalledWithoutStart","TrackArgumentsNotSpecified","UrlTooLong","IdTooLong","InvalidEvent","SnippetScriptLoadFailure","InvalidContentBlob","ValueKind","NotSet","Pii_DistinguishedName","Pii_GenericData","Pii_IPV4Address","Pii_IPv6Address","Pii_MailSubject","Pii_PhoneNumber","Pii_QueryString","Pii_SipAddress","Pii_SmtpAddress","Pii_Identity","Pii_Uri","Pii_Fqdn","Pii_IPV4AddressLegacy","CustomerContent_GenericContent","EventLatency","Normal","CostDeferred","RealTime","Immediate","EventPropertyType","Unspecified","String","Int32","UInt32","Int64","UInt64","Double","Bool","Guid","DateTime","EventPersistence","Critical","TraceLevel","NONE","ERROR","INFORMATION","_ExtendedInternalMessageId","AuthHandShakeError","AuthRedirectFail","BrowserCannotReadLocalStorage","BrowserCannotWriteLocalStorage","BrowserDoesNotSupportLocalStorage","CannotParseBiBlobValue","CannotParseDataAttribute","CVPluginNotAvailable","DroppedEvent","ErrorParsingAISessionCookie","ErrorProvidedChannels","FailedToGetCookies","FailedToInitializeCorrelationVector","FailedToInitializeSDK","InvalidCorrelationValue","SessionRenewalDateIsZero","SendPostOnCompleteFailure","PostResponseHandler","SDKNotInitialized","ChannelControllerPriority","_addChannelQueue","channelQueue","queue","core","sort","a","b","queueItem","chain","TelemetryInitializerPlugin","_super","_id","_initializers","_this","call","this","_initDefaults","identifier","priority","_self","_base","addTelemetryInitializer","telemetryInitializer","theInitializer","id","fn","remove","initializer","idx","item","itemCtx","doNotSendItem","telemetryInitializersCount","i","e","exception","__ieDyn","BaseTelemetryPlugin","strValidationError","strSdkUnloadingError","defaultInitConfig","loggingLevelConsole","_createPerfManager","notificationMgr","PerfManager","_isPluginPresent","thePlugin","plugins","exists","plugin","BaseCore","_config","_isInitialized","_eventQueue","_notificationManager","_perfManager","_cfgPerfManager","_cookieManager","_pluginChain","_configExtensions","_coreExtensions","_channelControl","_channelConfig","_channelQueue","_isUnloading","_telemetryInitializerPlugin","_internalLogsEventName","_evtNamespace","_unloadHandlers","_debugListener","_traceCtx","_internalLogPoller","DiagnosticLogger","_createTelCtx","_getPluginChain","_initPluginChain","updateState","theExtensions","logger","channelPriority","allExtensions","coreExtensions","extPriorities","ext","extPriority","all","_validateExtensions","channels","extensions","extensionQueue_1","createChannelQueues","_setQueue","_getTelCtx","_processChannelQueue","theChannels","processFn","onComplete","waiting","_runChainOnComplete","channelChain","chainCtx","isInitialized","initialize","config","pluginChain","processTelemetry","update","updateCtx","theUpdateState","reason","pause","iterate","resume","teardown","unloadCtx","unloadState","theUnloadState","isAsync","getChannel","pluginIdentifier","flush","callBack","sendReason","cbTimeout","doneIterating","cbTimer","doCallback","clearTimeout","handled_1","setTimeout","createChannelControllerPlugin","slice","_updateHook","_doUpdate","_getPlugin","theExt","enabled","isEnabled","pluginState","removeCb","pluginsToRemove","_removePlugins","removed","thePlugins","removeComplete","unloadChain","newConfigExtensions","newChannelConfig","newQueue","channel","_flushInternalLogs","logMessage","iKey","time","Date","baseType","baseData","message","track","_flushChannels","_logOrThrowError","notificationManager","enablePerfMgr","disableDbgExt","NotificationManager","cfgExtensions","apply","releaseQueue","getTransmissionControls","controls","telemetryItem","ver","listener","events","_createDummyNotificationManager","getCookieMgr","setCookieMgr","cookieMgr","createPerfMgr","setPerfMgr","perfMgr","eventCnt","eventQueue","event","pollInternalLogs","eventName","interval","diagnosticLogInterval","clearInterval","setInterval","unload","unloadComplete","flushComplete","processUnloadCtx","_doUnload","run","addPlugin","replaceExisting","addCb","existingPlugin","_addPlugin","added","removedPlugins_1","evtNamespace","getTraceCtx","createNew","setTraceCtx","traceCtx","_runListeners","listeners","name","callback","perfEvtsSendAll","index","perfEvent","AppInsightsCore","_notifyInvalidEvent","manager","_validateTelemetryItem","pluginVersionStringArr","_pluginVersionStringArr","endpointUrl","propertyStorageOverride","getProperty","setProperty","version","push","getWParam","document","enableWParam","pluginVersionString","join","logger_1","indexOf","timings","trackStart","latency","itemExt","sdk","itemProperties","_isFunction","_createPromiseAllOnResolvedFunction","values","resolvedCallback","value","ESPromise","resolverFunc","_state","_settledValue","_queue","_processQueue","length","pending_1","len","_resolve","_reject","then","onResolved","onRejected","resolve","reject","error","_enqueue","TypeError","iterable","values_1","pending_2","lp","race","_loop_1","_schedulerId","_running","_waiting","_timedOut","_getTime","getTime","ESPromiseScheduler","diagLog","_promiseId","_scheduledName","_debugLog","global","console","log","_warnLog","_lastEvent","_eventCount","_removeQueuedEvent","eventId","splice","scheduleEvent","startEventAction","timeout","uniqueId","uniqueEventId","eventDetails","waitForEvent","waitEvent","newScheduledEvent","evt","tm","isRunning","isAborted","waitResolve","waitReject","runTime","prevId","abort","Error","_startWaitingEvent","_schId","_abortAndRemoveOldEvents","now","expired","_cleanup","completed","toQueue","to","_removeScheduledEvent","_waitForFinalResult","startResult","schEventResolve","schEventReject","_createScheduledEvent","startEvent","wTm","theResult","incomplete","waitingToStart","ValueSanitizer","fieldSanitizerProvider","_sanitizerMap","_sanitizers","_fieldSanitizers","_getFieldSanitizer","path","result","fieldLookup","handleField","canHandle","fieldHandler","handler","_handleProperty","mapValue","fieldType","property","stringifyObjects","kind","toString","_callFieldSanitizer","_convertToProperty","fieldProvider","theType","sanitizer","getSanitizer","propertyType","newValue_1","propValue","propKey","theValue","newPath","newProp","details","type","prop","addSanitizer","newSanitizer","addFieldSanitizer","fieldSanitizer","subType","JSON","stringify","getFieldType","MinChannelPriorty"],"mappings":"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","file":"278.htmlClientMain.js","sourcesContent":["/*\n * Application Insights JavaScript SDK - Core, 2.8.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\n//  @skip-file-minify\r\nvar _a;\r\nimport { createEnumStyle } from \"../JavaScriptSDK.Enums/EnumHelperFuncs\";\r\nvar FAILED = \"Failed\";\r\nvar FAILED_MONITOR_AJAX = FAILED + \"MonitorAjax\";\r\nvar TRACK = \"Track\";\r\nvar START = \"Start\";\r\nvar STOP = \"Stop\";\r\nvar EVENT = \"Event\";\r\nvar AUTH_CONTEXT = \"AuthContext\";\r\nvar EXCEPTION = \"Exception\";\r\nvar LOCAL = \"Local\";\r\nvar SESSION = \"Session\";\r\nvar STORAGE = \"Storage\";\r\nvar BROWSER = \"Browser\";\r\nvar CANNOT = \"Cannot\";\r\nvar BUFFER = \"Buffer\";\r\nvar INSTRUMENTATION_KEY = \"InstrumentationKey\";\r\nexport var LoggingSeverity = createEnumStyle({\r\n    CRITICAL: 1 /* eLoggingSeverity.CRITICAL */,\r\n    WARNING: 2 /* eLoggingSeverity.WARNING */\r\n});\r\n/**\r\n * Internal message ID. Please create a new one for every conceptually different message. Please keep alphabetically ordered\r\n */\r\nexport var _InternalMessageId = createEnumStyle((_a = {},\r\n    // Non user actionable\r\n    _a[BROWSER + \"DoesNotSupport\" + LOCAL + STORAGE] = 0 /* _eInternalMessageId.BrowserDoesNotSupportLocalStorage */,\r\n    _a[BROWSER + CANNOT + \"Read\" + LOCAL + STORAGE] = 1 /* _eInternalMessageId.BrowserCannotReadLocalStorage */,\r\n    _a[BROWSER + CANNOT + \"Read\" + SESSION + STORAGE] = 2 /* _eInternalMessageId.BrowserCannotReadSessionStorage */,\r\n    _a[BROWSER + CANNOT + \"Write\" + LOCAL + STORAGE] = 3 /* _eInternalMessageId.BrowserCannotWriteLocalStorage */,\r\n    _a[BROWSER + CANNOT + \"Write\" + SESSION + STORAGE] = 4 /* _eInternalMessageId.BrowserCannotWriteSessionStorage */,\r\n    _a[BROWSER + FAILED + \"RemovalFrom\" + LOCAL + STORAGE] = 5 /* _eInternalMessageId.BrowserFailedRemovalFromLocalStorage */,\r\n    _a[BROWSER + FAILED + \"RemovalFrom\" + SESSION + STORAGE] = 6 /* _eInternalMessageId.BrowserFailedRemovalFromSessionStorage */,\r\n    _a[CANNOT + \"SendEmptyTelemetry\"] = 7 /* _eInternalMessageId.CannotSendEmptyTelemetry */,\r\n    _a.ClientPerformanceMathError = 8 /* _eInternalMessageId.ClientPerformanceMathError */,\r\n    _a[\"ErrorParsingAI\" + SESSION + \"Cookie\"] = 9 /* _eInternalMessageId.ErrorParsingAISessionCookie */,\r\n    _a.ErrorPVCalc = 10 /* _eInternalMessageId.ErrorPVCalc */,\r\n    _a[EXCEPTION + \"WhileLoggingError\"] = 11 /* _eInternalMessageId.ExceptionWhileLoggingError */,\r\n    _a[FAILED + \"AddingTelemetryTo\" + BUFFER] = 12 /* _eInternalMessageId.FailedAddingTelemetryToBuffer */,\r\n    _a[FAILED_MONITOR_AJAX + \"Abort\"] = 13 /* _eInternalMessageId.FailedMonitorAjaxAbort */,\r\n    _a[FAILED_MONITOR_AJAX + \"Dur\"] = 14 /* _eInternalMessageId.FailedMonitorAjaxDur */,\r\n    _a[FAILED_MONITOR_AJAX + \"Open\"] = 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */,\r\n    _a[FAILED_MONITOR_AJAX + \"RSC\"] = 16 /* _eInternalMessageId.FailedMonitorAjaxRSC */,\r\n    _a[FAILED_MONITOR_AJAX + \"Send\"] = 17 /* _eInternalMessageId.FailedMonitorAjaxSend */,\r\n    _a[FAILED_MONITOR_AJAX + \"GetCorrelationHeader\"] = 18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */,\r\n    _a[FAILED + \"ToAddHandlerForOnBeforeUnload\"] = 19 /* _eInternalMessageId.FailedToAddHandlerForOnBeforeUnload */,\r\n    _a[FAILED + \"ToSendQueuedTelemetry\"] = 20 /* _eInternalMessageId.FailedToSendQueuedTelemetry */,\r\n    _a[FAILED + \"ToReportDataLoss\"] = 21 /* _eInternalMessageId.FailedToReportDataLoss */,\r\n    _a[\"Flush\" + FAILED] = 22 /* _eInternalMessageId.FlushFailed */,\r\n    _a.MessageLimitPerPVExceeded = 23 /* _eInternalMessageId.MessageLimitPerPVExceeded */,\r\n    _a.MissingRequiredFieldSpecification = 24 /* _eInternalMessageId.MissingRequiredFieldSpecification */,\r\n    _a.NavigationTimingNotSupported = 25 /* _eInternalMessageId.NavigationTimingNotSupported */,\r\n    _a.OnError = 26 /* _eInternalMessageId.OnError */,\r\n    _a[SESSION + \"RenewalDateIsZero\"] = 27 /* _eInternalMessageId.SessionRenewalDateIsZero */,\r\n    _a.SenderNotInitialized = 28 /* _eInternalMessageId.SenderNotInitialized */,\r\n    _a[START + TRACK + EVENT + FAILED] = 29 /* _eInternalMessageId.StartTrackEventFailed */,\r\n    _a[STOP + TRACK + EVENT + FAILED] = 30 /* _eInternalMessageId.StopTrackEventFailed */,\r\n    _a[START + TRACK + FAILED] = 31 /* _eInternalMessageId.StartTrackFailed */,\r\n    _a[STOP + TRACK + FAILED] = 32 /* _eInternalMessageId.StopTrackFailed */,\r\n    _a.TelemetrySampledAndNotSent = 33 /* _eInternalMessageId.TelemetrySampledAndNotSent */,\r\n    _a[TRACK + EVENT + FAILED] = 34 /* _eInternalMessageId.TrackEventFailed */,\r\n    _a[TRACK + EXCEPTION + FAILED] = 35 /* _eInternalMessageId.TrackExceptionFailed */,\r\n    _a[TRACK + \"Metric\" + FAILED] = 36 /* _eInternalMessageId.TrackMetricFailed */,\r\n    _a[TRACK + \"PV\" + FAILED] = 37 /* _eInternalMessageId.TrackPVFailed */,\r\n    _a[TRACK + \"PV\" + FAILED + \"Calc\"] = 38 /* _eInternalMessageId.TrackPVFailedCalc */,\r\n    _a[TRACK + \"Trace\" + FAILED] = 39 /* _eInternalMessageId.TrackTraceFailed */,\r\n    _a[\"Transmission\" + FAILED] = 40 /* _eInternalMessageId.TransmissionFailed */,\r\n    _a[FAILED + \"ToSet\" + STORAGE + BUFFER] = 41 /* _eInternalMessageId.FailedToSetStorageBuffer */,\r\n    _a[FAILED + \"ToRestore\" + STORAGE + BUFFER] = 42 /* _eInternalMessageId.FailedToRestoreStorageBuffer */,\r\n    _a.InvalidBackendResponse = 43 /* _eInternalMessageId.InvalidBackendResponse */,\r\n    _a[FAILED + \"ToFixDepricatedValues\"] = 44 /* _eInternalMessageId.FailedToFixDepricatedValues */,\r\n    _a.InvalidDurationValue = 45 /* _eInternalMessageId.InvalidDurationValue */,\r\n    _a.TelemetryEnvelopeInvalid = 46 /* _eInternalMessageId.TelemetryEnvelopeInvalid */,\r\n    _a.CreateEnvelopeError = 47 /* _eInternalMessageId.CreateEnvelopeError */,\r\n    // User actionable\r\n    _a[CANNOT + \"SerializeObject\"] = 48 /* _eInternalMessageId.CannotSerializeObject */,\r\n    _a[CANNOT + \"SerializeObjectNonSerializable\"] = 49 /* _eInternalMessageId.CannotSerializeObjectNonSerializable */,\r\n    _a.CircularReferenceDetected = 50 /* _eInternalMessageId.CircularReferenceDetected */,\r\n    _a[\"Clear\" + AUTH_CONTEXT + FAILED] = 51 /* _eInternalMessageId.ClearAuthContextFailed */,\r\n    _a[EXCEPTION + \"Truncated\"] = 52 /* _eInternalMessageId.ExceptionTruncated */,\r\n    _a.IllegalCharsInName = 53 /* _eInternalMessageId.IllegalCharsInName */,\r\n    _a.ItemNotInArray = 54 /* _eInternalMessageId.ItemNotInArray */,\r\n    _a.MaxAjaxPerPVExceeded = 55 /* _eInternalMessageId.MaxAjaxPerPVExceeded */,\r\n    _a.MessageTruncated = 56 /* _eInternalMessageId.MessageTruncated */,\r\n    _a.NameTooLong = 57 /* _eInternalMessageId.NameTooLong */,\r\n    _a.SampleRateOutOfRange = 58 /* _eInternalMessageId.SampleRateOutOfRange */,\r\n    _a[\"Set\" + AUTH_CONTEXT + FAILED] = 59 /* _eInternalMessageId.SetAuthContextFailed */,\r\n    _a[\"Set\" + AUTH_CONTEXT + FAILED + \"AccountName\"] = 60 /* _eInternalMessageId.SetAuthContextFailedAccountName */,\r\n    _a.StringValueTooLong = 61 /* _eInternalMessageId.StringValueTooLong */,\r\n    _a.StartCalledMoreThanOnce = 62 /* _eInternalMessageId.StartCalledMoreThanOnce */,\r\n    _a.StopCalledWithoutStart = 63 /* _eInternalMessageId.StopCalledWithoutStart */,\r\n    _a[\"TelemetryInitializer\" + FAILED] = 64 /* _eInternalMessageId.TelemetryInitializerFailed */,\r\n    _a.TrackArgumentsNotSpecified = 65 /* _eInternalMessageId.TrackArgumentsNotSpecified */,\r\n    _a.UrlTooLong = 66 /* _eInternalMessageId.UrlTooLong */,\r\n    _a[SESSION + STORAGE + BUFFER + \"Full\"] = 67 /* _eInternalMessageId.SessionStorageBufferFull */,\r\n    _a[CANNOT + \"AccessCookie\"] = 68 /* _eInternalMessageId.CannotAccessCookie */,\r\n    _a.IdTooLong = 69 /* _eInternalMessageId.IdTooLong */,\r\n    _a.InvalidEvent = 70 /* _eInternalMessageId.InvalidEvent */,\r\n    _a[FAILED_MONITOR_AJAX + \"SetRequestHeader\"] = 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */,\r\n    _a[\"Send\" + BROWSER + \"InfoOnUserInit\"] = 72 /* _eInternalMessageId.SendBrowserInfoOnUserInit */,\r\n    _a[\"Plugin\" + EXCEPTION] = 73 /* _eInternalMessageId.PluginException */,\r\n    _a[\"Notification\" + EXCEPTION] = 74 /* _eInternalMessageId.NotificationException */,\r\n    _a.SnippetScriptLoadFailure = 99 /* _eInternalMessageId.SnippetScriptLoadFailure */,\r\n    _a[\"Invalid\" + INSTRUMENTATION_KEY] = 100 /* _eInternalMessageId.InvalidInstrumentationKey */,\r\n    _a[CANNOT + \"ParseAiBlobValue\"] = 101 /* _eInternalMessageId.CannotParseAiBlobValue */,\r\n    _a.InvalidContentBlob = 102 /* _eInternalMessageId.InvalidContentBlob */,\r\n    _a[TRACK + \"PageAction\" + EVENT + FAILED] = 103 /* _eInternalMessageId.TrackPageActionEventFailed */,\r\n    _a[FAILED + \"AddingCustomDefinedRequestContext\"] = 104 /* _eInternalMessageId.FailedAddingCustomDefinedRequestContext */,\r\n    _a[\"InMemory\" + STORAGE + BUFFER + \"Full\"] = 105 /* _eInternalMessageId.InMemoryStorageBufferFull */,\r\n    _a[INSTRUMENTATION_KEY + \"Deprecation\"] = 106 /* _eInternalMessageId.InstrumentationKeyDeprecation */,\r\n    _a));\r\n//# sourceMappingURL=LoggingEnums.js.map","/*\n * 1DS JS SDK Core, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n* Enums.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2018\r\n* File containing the enums as constants.\r\n*/\r\nimport { __assignFn as __assign } from \"@microsoft/applicationinsights-shims\";\r\nimport { _InternalMessageId, createEnumStyle, objFreeze } from \"@microsoft/applicationinsights-core-js\";\r\n/**\r\n * The ValueKind contains a set of values that specify value kind of the property.\r\n * Either PII (Personal Identifiable Information) or customer content.\r\n */\r\nexport var ValueKind = createEnumStyle({\r\n    NotSet: 0 /* eValueKind.NotSet */,\r\n    Pii_DistinguishedName: 1 /* eValueKind.Pii_DistinguishedName */,\r\n    Pii_GenericData: 2 /* eValueKind.Pii_GenericData */,\r\n    Pii_IPV4Address: 3 /* eValueKind.Pii_IPV4Address */,\r\n    Pii_IPv6Address: 4 /* eValueKind.Pii_IPv6Address */,\r\n    Pii_MailSubject: 5 /* eValueKind.Pii_MailSubject */,\r\n    Pii_PhoneNumber: 6 /* eValueKind.Pii_PhoneNumber */,\r\n    Pii_QueryString: 7 /* eValueKind.Pii_QueryString */,\r\n    Pii_SipAddress: 8 /* eValueKind.Pii_SipAddress */,\r\n    Pii_SmtpAddress: 9 /* eValueKind.Pii_SmtpAddress */,\r\n    Pii_Identity: 10 /* eValueKind.Pii_Identity */,\r\n    Pii_Uri: 11 /* eValueKind.Pii_Uri */,\r\n    Pii_Fqdn: 12 /* eValueKind.Pii_Fqdn */,\r\n    Pii_IPV4AddressLegacy: 13 /* eValueKind.Pii_IPV4AddressLegacy */,\r\n    CustomerContent_GenericContent: 32 /* eValueKind.CustomerContent_GenericContent */\r\n});\r\n/**\r\n * The EventLatency contains a set of values that specify the latency with which an event is sent.\r\n */\r\nexport var EventLatency = createEnumStyle({\r\n    /**\r\n     * Normal latency.\r\n     */\r\n    Normal: 1 /* EventLatencyValue.Normal */,\r\n    /**\r\n     * Cost deferred latency. At the moment this latency is treated as Normal latency.\r\n     */\r\n    CostDeferred: 2 /* EventLatencyValue.CostDeferred */,\r\n    /**\r\n     * Real time latency.\r\n     */\r\n    RealTime: 3 /* EventLatencyValue.RealTime */,\r\n    /**\r\n     * Bypass normal batching/timing and send as soon as possible, this will still send asynchronously.\r\n     * Added in v3.1.1\r\n     */\r\n    Immediate: 4 /* EventLatencyValue.Immediate */\r\n});\r\n/**\r\n * Enum for property types.\r\n */\r\nexport var EventPropertyType = createEnumStyle({\r\n    Unspecified: 0 /* eEventPropertyType.Unspecified */,\r\n    String: 1 /* eEventPropertyType.String */,\r\n    Int32: 2 /* eEventPropertyType.Int32 */,\r\n    UInt32: 3 /* eEventPropertyType.UInt32 */,\r\n    Int64: 4 /* eEventPropertyType.Int64 */,\r\n    UInt64: 5 /* eEventPropertyType.UInt64 */,\r\n    Double: 6 /* eEventPropertyType.Double */,\r\n    Bool: 7 /* eEventPropertyType.Bool */,\r\n    Guid: 8 /* eEventPropertyType.Guid */,\r\n    DateTime: 9 /* eEventPropertyType.DateTime */\r\n});\r\n/**\r\n * The EventPersistence contains a set of values that specify the event's persistence.\r\n */\r\nexport var EventPersistence = createEnumStyle({\r\n    /**\r\n     * Normal persistence.\r\n     */\r\n    Normal: 1 /* EventPersistenceValue.Normal */,\r\n    /**\r\n     * Critical persistence.\r\n     */\r\n    Critical: 2 /* EventPersistenceValue.Critical */\r\n});\r\nexport var TraceLevel = createEnumStyle({\r\n    NONE: 0 /* eTraceLevel.NONE */,\r\n    ERROR: 1 /* eTraceLevel.ERROR */,\r\n    WARNING: 2 /* eTraceLevel.WARNING */,\r\n    INFORMATION: 3 /* eTraceLevel.INFORMATION */\r\n});\r\nexport var _ExtendedInternalMessageId = objFreeze(__assign(__assign({}, _InternalMessageId), createEnumStyle({\r\n    AuthHandShakeError: 501 /* _eExtendedInternalMessageId.AuthHandShakeError */,\r\n    AuthRedirectFail: 502 /* _eExtendedInternalMessageId.AuthRedirectFail */,\r\n    BrowserCannotReadLocalStorage: 503 /* _eExtendedInternalMessageId.BrowserCannotReadLocalStorage */,\r\n    BrowserCannotWriteLocalStorage: 504 /* _eExtendedInternalMessageId.BrowserCannotWriteLocalStorage */,\r\n    BrowserDoesNotSupportLocalStorage: 505 /* _eExtendedInternalMessageId.BrowserDoesNotSupportLocalStorage */,\r\n    CannotParseBiBlobValue: 506 /* _eExtendedInternalMessageId.CannotParseBiBlobValue */,\r\n    CannotParseDataAttribute: 507 /* _eExtendedInternalMessageId.CannotParseDataAttribute */,\r\n    CVPluginNotAvailable: 508 /* _eExtendedInternalMessageId.CVPluginNotAvailable */,\r\n    DroppedEvent: 509 /* _eExtendedInternalMessageId.DroppedEvent */,\r\n    ErrorParsingAISessionCookie: 510 /* _eExtendedInternalMessageId.ErrorParsingAISessionCookie */,\r\n    ErrorProvidedChannels: 511 /* _eExtendedInternalMessageId.ErrorProvidedChannels */,\r\n    FailedToGetCookies: 512 /* _eExtendedInternalMessageId.FailedToGetCookies */,\r\n    FailedToInitializeCorrelationVector: 513 /* _eExtendedInternalMessageId.FailedToInitializeCorrelationVector */,\r\n    FailedToInitializeSDK: 514 /* _eExtendedInternalMessageId.FailedToInitializeSDK */,\r\n    InvalidContentBlob: 515 /* _eExtendedInternalMessageId.InvalidContentBlob */,\r\n    InvalidCorrelationValue: 516 /* _eExtendedInternalMessageId.InvalidCorrelationValue */,\r\n    SessionRenewalDateIsZero: 517 /* _eExtendedInternalMessageId.SessionRenewalDateIsZero */,\r\n    SendPostOnCompleteFailure: 518 /* _eExtendedInternalMessageId.SendPostOnCompleteFailure */,\r\n    PostResponseHandler: 519 /* _eExtendedInternalMessageId.PostResponseHandler */,\r\n    SDKNotInitialized: 520 /* _eExtendedInternalMessageId.SDKNotInitialized */\r\n})));\r\n//# sourceMappingURL=Enums.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n// \r\nimport { _DYN_CONFIG, _DYN_CREATE_NEW, _DYN_FLUSH, _DYN_IDENTIFIER, _DYN_LENGTH, _DYN_ON_COMPLETE, _DYN_PROCESS_NEXT, _DYN_PUSH } from \"../__DynamicConstants\";\r\nimport { arrForEach, isArray, objFreeze, throwError } from \"./HelperFuncs\";\r\nimport { STR_PRIORITY } from \"./InternalConstants\";\r\nimport { createProcessTelemetryContext, createTelemetryProxyChain } from \"./ProcessTelemetryContext\";\r\nimport { initializePlugins } from \"./TelemetryHelpers\";\r\nexport var ChannelControllerPriority = 500;\r\nvar ChannelValidationMessage = \"Channel has invalid priority - \";\r\nfunction _addChannelQueue(channelQueue, queue, core) {\r\n    if (queue && isArray(queue) && queue[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n        queue = queue.sort(function (a, b) {\r\n            return a[STR_PRIORITY /* @min:%2epriority */] - b[STR_PRIORITY /* @min:%2epriority */];\r\n        });\r\n        arrForEach(queue, function (queueItem) {\r\n            if (queueItem[STR_PRIORITY /* @min:%2epriority */] < ChannelControllerPriority) {\r\n                throwError(ChannelValidationMessage + queueItem[_DYN_IDENTIFIER /* @min:%2eidentifier */]);\r\n            }\r\n        });\r\n        channelQueue[_DYN_PUSH /* @min:%2epush */]({\r\n            queue: objFreeze(queue),\r\n            chain: createTelemetryProxyChain(queue, core[_DYN_CONFIG /* @min:%2econfig */], core)\r\n        });\r\n    }\r\n}\r\nexport function createChannelControllerPlugin(channelQueue, core) {\r\n    function _getTelCtx() {\r\n        return createProcessTelemetryContext(null, core[_DYN_CONFIG /* @min:%2econfig */], core, null);\r\n    }\r\n    function _processChannelQueue(theChannels, itemCtx, processFn, onComplete) {\r\n        var waiting = theChannels ? (theChannels[_DYN_LENGTH /* @min:%2elength */] + 1) : 1;\r\n        function _runChainOnComplete() {\r\n            waiting--;\r\n            if (waiting === 0) {\r\n                onComplete && onComplete();\r\n                onComplete = null;\r\n            }\r\n        }\r\n        if (waiting > 0) {\r\n            arrForEach(theChannels, function (channels) {\r\n                // pass on to first item in queue\r\n                if (channels && channels.queue[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                    var channelChain = channels.chain;\r\n                    var chainCtx = itemCtx[_DYN_CREATE_NEW /* @min:%2ecreateNew */](channelChain);\r\n                    chainCtx[_DYN_ON_COMPLETE /* @min:%2eonComplete */](_runChainOnComplete);\r\n                    // Cause this chain to start processing\r\n                    processFn(chainCtx);\r\n                }\r\n                else {\r\n                    waiting--;\r\n                }\r\n            });\r\n        }\r\n        _runChainOnComplete();\r\n    }\r\n    function _doUpdate(updateCtx, updateState) {\r\n        var theUpdateState = updateState || {\r\n            reason: 0 /* TelemetryUpdateReason.Unknown */\r\n        };\r\n        _processChannelQueue(channelQueue, updateCtx, function (chainCtx) {\r\n            chainCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](theUpdateState);\r\n        }, function () {\r\n            updateCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](theUpdateState);\r\n        });\r\n        return true;\r\n    }\r\n    function _doTeardown(unloadCtx, unloadState) {\r\n        var theUnloadState = unloadState || {\r\n            reason: 0 /* TelemetryUnloadReason.ManualTeardown */,\r\n            isAsync: false\r\n        };\r\n        _processChannelQueue(channelQueue, unloadCtx, function (chainCtx) {\r\n            chainCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](theUnloadState);\r\n        }, function () {\r\n            unloadCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](theUnloadState);\r\n            isInitialized = false;\r\n        });\r\n        return true;\r\n    }\r\n    function _getChannel(pluginIdentifier) {\r\n        var thePlugin = null;\r\n        if (channelQueue && channelQueue[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n            arrForEach(channelQueue, function (channels) {\r\n                // pass on to first item in queue\r\n                if (channels && channels.queue[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                    arrForEach(channels.queue, function (ext) {\r\n                        if (ext[_DYN_IDENTIFIER /* @min:%2eidentifier */] === pluginIdentifier) {\r\n                            thePlugin = ext;\r\n                            // Cause arrForEach to stop iterating\r\n                            return -1;\r\n                        }\r\n                    });\r\n                    if (thePlugin) {\r\n                        // Cause arrForEach to stop iterating\r\n                        return -1;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return thePlugin;\r\n    }\r\n    var isInitialized = false;\r\n    var channelController = {\r\n        identifier: \"ChannelControllerPlugin\",\r\n        priority: ChannelControllerPriority,\r\n        initialize: function (config, core, extensions, pluginChain) {\r\n            isInitialized = true;\r\n            arrForEach(channelQueue, function (channels) {\r\n                if (channels && channels.queue[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                    initializePlugins(createProcessTelemetryContext(channels.chain, config, core), extensions);\r\n                }\r\n            });\r\n        },\r\n        isInitialized: function () {\r\n            return isInitialized;\r\n        },\r\n        processTelemetry: function (item, itemCtx) {\r\n            _processChannelQueue(channelQueue, itemCtx || _getTelCtx(), function (chainCtx) {\r\n                chainCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](item);\r\n            }, function () {\r\n                itemCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](item);\r\n            });\r\n        },\r\n        update: _doUpdate,\r\n        pause: function () {\r\n            _processChannelQueue(channelQueue, _getTelCtx(), function (chainCtx) {\r\n                chainCtx.iterate(function (plugin) {\r\n                    plugin.pause && plugin.pause();\r\n                });\r\n            }, null);\r\n        },\r\n        resume: function () {\r\n            _processChannelQueue(channelQueue, _getTelCtx(), function (chainCtx) {\r\n                chainCtx.iterate(function (plugin) {\r\n                    plugin.resume && plugin.resume();\r\n                });\r\n            }, null);\r\n        },\r\n        teardown: _doTeardown,\r\n        getChannel: _getChannel,\r\n        flush: function (isAsync, callBack, sendReason, cbTimeout) {\r\n            // Setting waiting to one so that we don't call the callBack until we finish iterating\r\n            var waiting = 1;\r\n            var doneIterating = false;\r\n            var cbTimer = null;\r\n            cbTimeout = cbTimeout || 5000;\r\n            function doCallback() {\r\n                waiting--;\r\n                if (doneIterating && waiting === 0) {\r\n                    if (cbTimer) {\r\n                        clearTimeout(cbTimer);\r\n                        cbTimer = null;\r\n                    }\r\n                    callBack && callBack(doneIterating);\r\n                    callBack = null;\r\n                }\r\n            }\r\n            _processChannelQueue(channelQueue, _getTelCtx(), function (chainCtx) {\r\n                chainCtx.iterate(function (plugin) {\r\n                    if (plugin[_DYN_FLUSH /* @min:%2eflush */]) {\r\n                        waiting++;\r\n                        var handled_1 = false;\r\n                        // Not all channels will call this callback for every scenario\r\n                        if (!plugin[_DYN_FLUSH /* @min:%2eflush */](isAsync, function () {\r\n                            handled_1 = true;\r\n                            doCallback();\r\n                        }, sendReason)) {\r\n                            if (!handled_1) {\r\n                                // If any channel doesn't return true and it didn't call the callback, then we should assume that the callback\r\n                                // will never be called, so use a timeout to allow the channel(s) some time to \"finish\" before triggering any\r\n                                // followup function (such as unloading)\r\n                                if (isAsync && cbTimer == null) {\r\n                                    cbTimer = setTimeout(function () {\r\n                                        cbTimer = null;\r\n                                        doCallback();\r\n                                    }, cbTimeout);\r\n                                }\r\n                                else {\r\n                                    doCallback();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }, function () {\r\n                doneIterating = true;\r\n                doCallback();\r\n            });\r\n            return true;\r\n        },\r\n        _setQueue: function (queue) {\r\n            channelQueue = queue;\r\n        }\r\n    };\r\n    return channelController;\r\n}\r\nexport function createChannelQueues(channels, extensions, core) {\r\n    var channelQueue = [];\r\n    if (channels) {\r\n        // Add and sort the configuration channel queues\r\n        arrForEach(channels, function (queue) { return _addChannelQueue(channelQueue, queue, core); });\r\n    }\r\n    if (extensions) {\r\n        // Create a new channel queue for any extensions with a priority > the ChannelControllerPriority\r\n        var extensionQueue_1 = [];\r\n        arrForEach(extensions, function (plugin) {\r\n            if (plugin[STR_PRIORITY /* @min:%2epriority */] > ChannelControllerPriority) {\r\n                extensionQueue_1[_DYN_PUSH /* @min:%2epush */](plugin);\r\n            }\r\n        });\r\n        _addChannelQueue(channelQueue, extensionQueue_1, core);\r\n    }\r\n    return channelQueue;\r\n}\r\n//# sourceMappingURL=ChannelController.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n// \r\n// \r\nimport { __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { _DYN_APPLY, _DYN_DIAG_LOG, _DYN_LENGTH, _DYN_PROCESS_NEXT, _DYN_PUSH, _DYN_SPLICE, _DYN__DO_TEARDOWN } from \"../__DynamicConstants\";\r\nimport { BaseTelemetryPlugin } from \"./BaseTelemetryPlugin\";\r\nimport { _throwInternal } from \"./DiagnosticLogger\";\r\nimport { dumpObj } from \"./EnvUtils\";\r\nimport { arrForEach, getExceptionName } from \"./HelperFuncs\";\r\nimport { STR_PROCESS_TELEMETRY } from \"./InternalConstants\";\r\nvar TelemetryInitializerPlugin = /** @class */ (function (_super) {\r\n    __extends(TelemetryInitializerPlugin, _super);\r\n    function TelemetryInitializerPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.identifier = \"TelemetryInitializerPlugin\";\r\n        _this.priority = 199;\r\n        // NOTE!: DON'T set default values here, instead set them in the _initDefaults() function as it is also called during teardown()\r\n        var _id;\r\n        var _initializers;\r\n        _initDefaults();\r\n        dynamicProto(TelemetryInitializerPlugin, _this, function (_self, _base) {\r\n            _self.addTelemetryInitializer = function (telemetryInitializer) {\r\n                var theInitializer = {\r\n                    id: _id++,\r\n                    fn: telemetryInitializer\r\n                };\r\n                _initializers[_DYN_PUSH /* @min:%2epush */](theInitializer);\r\n                var handler = {\r\n                    remove: function () {\r\n                        arrForEach(_initializers, function (initializer, idx) {\r\n                            if (initializer.id === theInitializer.id) {\r\n                                _initializers[_DYN_SPLICE /* @min:%2esplice */](idx, 1);\r\n                                return -1;\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n                return handler;\r\n            };\r\n            _self[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */] = function (item, itemCtx) {\r\n                var doNotSendItem = false;\r\n                var telemetryInitializersCount = _initializers[_DYN_LENGTH /* @min:%2elength */];\r\n                for (var i = 0; i < telemetryInitializersCount; ++i) {\r\n                    var telemetryInitializer = _initializers[i];\r\n                    if (telemetryInitializer) {\r\n                        try {\r\n                            if (telemetryInitializer.fn[_DYN_APPLY /* @min:%2eapply */](null, [item]) === false) {\r\n                                doNotSendItem = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            // log error but dont stop executing rest of the telemetry initializers\r\n                            // doNotSendItem = true;\r\n                            _throwInternal(itemCtx[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 1 /* eLoggingSeverity.CRITICAL */, 64 /* _eInternalMessageId.TelemetryInitializerFailed */, \"One of telemetry initializers failed, telemetry item will not be sent: \" + getExceptionName(e), { exception: dumpObj(e) }, true);\r\n                        }\r\n                    }\r\n                }\r\n                if (!doNotSendItem) {\r\n                    _self[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](item, itemCtx);\r\n                }\r\n            };\r\n            _self[_DYN__DO_TEARDOWN /* @min:%2e_doTeardown */] = function () {\r\n                _initDefaults();\r\n            };\r\n        });\r\n        function _initDefaults() {\r\n            _id = 0;\r\n            _initializers = [];\r\n        }\r\n        return _this;\r\n    }\r\n// Removed Stub for TelemetryInitializerPlugin.prototype.addTelemetryInitializer.\r\n// Removed Stub for TelemetryInitializerPlugin.prototype.processTelemetry.\r\n    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n    // this will be removed when ES3 support is dropped.\n    TelemetryInitializerPlugin.__ieDyn=1;\n\n    return TelemetryInitializerPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport { TelemetryInitializerPlugin };\r\n//# sourceMappingURL=TelemetryInitializerPlugin.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\n\"use strict\";\r\nimport { __spreadArrayFn as __spreadArray } from \"@microsoft/applicationinsights-shims\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { objCreateFn } from \"@microsoft/applicationinsights-shims\";\r\nimport { _DYN_ADD_NOTIFICATION_LIS1, _DYN_CONFIG, _DYN_FLUSH, _DYN_GET_NOTIFY_MGR, _DYN_GET_PLUGIN, _DYN_GET_PROCESS_TEL_CONT0, _DYN_IDENTIFIER, _DYN_INITIALIZE, _DYN_INSTRUMENTATION_KEY, _DYN_IS_ASYNC, _DYN_IS_INITIALIZED, _DYN_LENGTH, _DYN_LOGGER, _DYN_MESSAGE, _DYN_MESSAGE_ID, _DYN_NAME, _DYN_ON_COMPLETE, _DYN_PROCESS_NEXT, _DYN_PUSH, _DYN_REMOVE_NOTIFICATION_2, _DYN_SET_ENABLED, _DYN_SPLICE, _DYN_STOP_POLLING_INTERNA3, _DYN_TEARDOWN, _DYN_TIME, _DYN__EXTENSIONS } from \"../__DynamicConstants\";\r\nimport { ChannelControllerPriority, createChannelControllerPlugin, createChannelQueues } from \"./ChannelController\";\r\nimport { createCookieMgr } from \"./CookieMgr\";\r\nimport { createUniqueNamespace } from \"./DataCacheHelper\";\r\nimport { getDebugListener } from \"./DbgExtensionUtils\";\r\nimport { DiagnosticLogger, _InternalLogMessage, _throwInternal, _warnToConsole } from \"./DiagnosticLogger\";\r\nimport { arrForEach, arrIndexOf, getCfgValue, getSetValue, isFunction, isNullOrUndefined, objExtend, objFreeze, proxyFunctionAs, proxyFunctions, throwError, toISOString } from \"./HelperFuncs\";\r\nimport { STR_CHANNELS, STR_CORE, STR_CREATE_PERF_MGR, STR_DISABLED, STR_EVENTS_DISCARDED, STR_EVENTS_SEND_REQUEST, STR_EVENTS_SENT, STR_EXTENSIONS, STR_EXTENSION_CONFIG, STR_GET_PERF_MGR, STR_PRIORITY } from \"./InternalConstants\";\r\nimport { PerfManager, getGblPerfMgr } from \"./PerfManager\";\r\nimport { createProcessTelemetryContext, createProcessTelemetryUnloadContext, createProcessTelemetryUpdateContext, createTelemetryProxyChain } from \"./ProcessTelemetryContext\";\r\nimport { _getPluginState, createDistributedTraceContext, initializePlugins, sortPlugins } from \"./TelemetryHelpers\";\r\nimport { TelemetryInitializerPlugin } from \"./TelemetryInitializerPlugin\";\r\nimport { createUnloadHandlerContainer } from \"./UnloadHandlerContainer\";\r\nvar strValidationError = \"Plugins must provide initialize method\";\r\nvar strNotificationManager = \"_notificationManager\";\r\nvar strSdkUnloadingError = \"SDK is still unloading...\";\r\nvar strSdkNotInitialized = \"SDK is not initialized\";\r\n// const strPluginUnloadFailed = \"Failed to unload plugin\";\r\nvar defaultInitConfig = {\r\n    // Have the Diagnostic Logger default to log critical errors to the console\r\n    loggingLevelConsole: 1 /* eLoggingSeverity.CRITICAL */\r\n};\r\n/**\r\n * Helper to create the default performance manager\r\n * @param core\r\n * @param notificationMgr\r\n */\r\nfunction _createPerfManager(core, notificationMgr) {\r\n    return new PerfManager(notificationMgr);\r\n}\r\nfunction _validateExtensions(logger, channelPriority, allExtensions) {\r\n    var _a;\r\n    // Concat all available extensions\r\n    var coreExtensions = [];\r\n    // Check if any two extensions have the same priority, then warn to console\r\n    // And extract the local extensions from the\r\n    var extPriorities = {};\r\n    // Extension validation\r\n    arrForEach(allExtensions, function (ext) {\r\n        // Check for ext.initialize\r\n        if (isNullOrUndefined(ext) || isNullOrUndefined(ext[_DYN_INITIALIZE /* @min:%2einitialize */])) {\r\n            throwError(strValidationError);\r\n        }\r\n        var extPriority = ext[STR_PRIORITY /* @min:%2epriority */];\r\n        var identifier = ext[_DYN_IDENTIFIER /* @min:%2eidentifier */];\r\n        if (ext && extPriority) {\r\n            if (!isNullOrUndefined(extPriorities[extPriority])) {\r\n                _warnToConsole(logger, \"Two extensions have same priority #\" + extPriority + \" - \" + extPriorities[extPriority] + \", \" + identifier);\r\n            }\r\n            else {\r\n                // set a value\r\n                extPriorities[extPriority] = identifier;\r\n            }\r\n        }\r\n        // Split extensions to core and channelController\r\n        if (!extPriority || extPriority < channelPriority) {\r\n            // Add to core extension that will be managed by BaseCore\r\n            coreExtensions[_DYN_PUSH /* @min:%2epush */](ext);\r\n        }\r\n    });\r\n    return _a = {\r\n            all: allExtensions\r\n        },\r\n        _a[STR_CORE /* @min:core */] = coreExtensions,\r\n        _a;\r\n}\r\nfunction _isPluginPresent(thePlugin, plugins) {\r\n    var exists = false;\r\n    arrForEach(plugins, function (plugin) {\r\n        if (plugin === thePlugin) {\r\n            exists = true;\r\n            return -1;\r\n        }\r\n    });\r\n    return exists;\r\n}\r\nfunction _createDummyNotificationManager() {\r\n    var _a;\r\n    return objCreateFn((_a = {},\r\n        _a[_DYN_ADD_NOTIFICATION_LIS1 /* @min:addNotificationListener */] = function (listener) { },\r\n        _a[_DYN_REMOVE_NOTIFICATION_2 /* @min:removeNotificationListener */] = function (listener) { },\r\n        _a[STR_EVENTS_SENT /* @min:eventsSent */] = function (events) { },\r\n        _a[STR_EVENTS_DISCARDED /* @min:eventsDiscarded */] = function (events, reason) { },\r\n        _a[STR_EVENTS_SEND_REQUEST /* @min:eventsSendRequest */] = function (sendReason, isAsync) { },\r\n        _a));\r\n}\r\nvar BaseCore = /** @class */ (function () {\r\n    function BaseCore() {\r\n        // NOTE!: DON'T set default values here, instead set them in the _initDefaults() function as it is also called during teardown()\r\n        var _config;\r\n        var _isInitialized;\r\n        var _eventQueue;\r\n        var _notificationManager;\r\n        var _perfManager;\r\n        var _cfgPerfManager;\r\n        var _cookieManager;\r\n        var _pluginChain;\r\n        var _configExtensions;\r\n        var _coreExtensions;\r\n        var _channelControl;\r\n        var _channelConfig;\r\n        var _channelQueue;\r\n        var _isUnloading;\r\n        var _telemetryInitializerPlugin;\r\n        var _internalLogsEventName;\r\n        var _evtNamespace;\r\n        var _unloadHandlers;\r\n        var _debugListener;\r\n        var _traceCtx;\r\n        /**\r\n         * Internal log poller\r\n         */\r\n        var _internalLogPoller = 0;\r\n        dynamicProto(BaseCore, this, function (_self) {\r\n            // Set the default values (also called during teardown)\r\n            _initDefaults();\r\n            _self[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */] = function () { return _isInitialized; };\r\n            // Creating the self.initialize = ()\r\n            _self[_DYN_INITIALIZE /* @min:%2einitialize */] = function (config, extensions, logger, notificationManager) {\r\n                if (_isUnloading) {\r\n                    throwError(strSdkUnloadingError);\r\n                }\r\n                // Make sure core is only initialized once\r\n                if (_self[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */]()) {\r\n                    throwError(\"Core should not be initialized more than once\");\r\n                }\r\n                _config = config || {};\r\n                _self[_DYN_CONFIG /* @min:%2econfig */] = _config;\r\n                if (isNullOrUndefined(config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */])) {\r\n                    throwError(\"Please provide instrumentation key\");\r\n                }\r\n                _notificationManager = notificationManager;\r\n                // For backward compatibility only\r\n                _self[strNotificationManager] = notificationManager;\r\n                _initDebugListener();\r\n                _initPerfManager();\r\n                // add notification to the extensions in the config so other plugins can access it\r\n                _initExtConfig();\r\n                if (logger) {\r\n                    _self[_DYN_LOGGER /* @min:%2elogger */] = logger;\r\n                }\r\n                var cfgExtensions = getSetValue(_config, STR_EXTENSIONS, []);\r\n                // Extension validation\r\n                _configExtensions = [];\r\n                _configExtensions[_DYN_PUSH /* @min:%2epush */].apply(_configExtensions, __spreadArray(__spreadArray([], extensions, false), cfgExtensions, false));\r\n                _channelConfig = getSetValue(_config, STR_CHANNELS, []);\r\n                _initPluginChain(null);\r\n                if (!_channelQueue || _channelQueue[_DYN_LENGTH /* @min:%2elength */] === 0) {\r\n                    throwError(\"No \" + STR_CHANNELS + \" available\");\r\n                }\r\n                _isInitialized = true;\r\n                _self.releaseQueue();\r\n            };\r\n            _self.getTransmissionControls = function () {\r\n                var controls = [];\r\n                if (_channelQueue) {\r\n                    arrForEach(_channelQueue, function (channels) {\r\n                        controls[_DYN_PUSH /* @min:%2epush */](channels.queue);\r\n                    });\r\n                }\r\n                return objFreeze(controls);\r\n            };\r\n            _self.track = function (telemetryItem) {\r\n                // setup default iKey if not passed in\r\n                telemetryItem.iKey = telemetryItem.iKey || _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */];\r\n                // add default timestamp if not passed in\r\n                telemetryItem[_DYN_TIME /* @min:%2etime */] = telemetryItem[_DYN_TIME /* @min:%2etime */] || toISOString(new Date());\r\n                // Common Schema 4.0\r\n                telemetryItem.ver = telemetryItem.ver || \"4.0\";\r\n                if (!_isUnloading && _self[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */]()) {\r\n                    // Process the telemetry plugin chain\r\n                    _createTelCtx()[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](telemetryItem);\r\n                }\r\n                else {\r\n                    // Queue events until all extensions are initialized\r\n                    _eventQueue[_DYN_PUSH /* @min:%2epush */](telemetryItem);\r\n                }\r\n            };\r\n            _self[_DYN_GET_PROCESS_TEL_CONT0 /* @min:%2egetProcessTelContext */] = _createTelCtx;\r\n            _self[_DYN_GET_NOTIFY_MGR /* @min:%2egetNotifyMgr */] = function () {\r\n                if (!_notificationManager) {\r\n                    // Create Dummy notification manager\r\n                    _notificationManager = _createDummyNotificationManager();\r\n                    // For backward compatibility only\r\n                    _self[strNotificationManager] = _notificationManager;\r\n                }\r\n                return _notificationManager;\r\n            };\r\n            /**\r\n             * Adds a notification listener. The SDK calls methods on the listener when an appropriate notification is raised.\r\n             * The added plugins must raise notifications. If the plugins do not implement the notifications, then no methods will be\r\n             * called.\r\n             * @param {INotificationListener} listener - An INotificationListener object.\r\n             */\r\n            _self[_DYN_ADD_NOTIFICATION_LIS1 /* @min:%2eaddNotificationListener */] = function (listener) {\r\n                if (_notificationManager) {\r\n                    _notificationManager[_DYN_ADD_NOTIFICATION_LIS1 /* @min:%2eaddNotificationListener */](listener);\r\n                }\r\n            };\r\n            /**\r\n             * Removes all instances of the listener.\r\n             * @param {INotificationListener} listener - INotificationListener to remove.\r\n             */\r\n            _self[_DYN_REMOVE_NOTIFICATION_2 /* @min:%2eremoveNotificationListener */] = function (listener) {\r\n                if (_notificationManager) {\r\n                    _notificationManager[_DYN_REMOVE_NOTIFICATION_2 /* @min:%2eremoveNotificationListener */](listener);\r\n                }\r\n            };\r\n            _self.getCookieMgr = function () {\r\n                if (!_cookieManager) {\r\n                    _cookieManager = createCookieMgr(_config, _self[_DYN_LOGGER /* @min:%2elogger */]);\r\n                }\r\n                return _cookieManager;\r\n            };\r\n            _self.setCookieMgr = function (cookieMgr) {\r\n                _cookieManager = cookieMgr;\r\n            };\r\n            _self[STR_GET_PERF_MGR /* @min:%2egetPerfMgr */] = function () {\r\n                if (!_perfManager && !_cfgPerfManager) {\r\n                    if (getCfgValue(_config.enablePerfMgr)) {\r\n                        var createPerfMgr = getCfgValue(_config[STR_CREATE_PERF_MGR /* @min:%2ecreatePerfMgr */]);\r\n                        if (isFunction(createPerfMgr)) {\r\n                            _cfgPerfManager = createPerfMgr(_self, _self[_DYN_GET_NOTIFY_MGR /* @min:%2egetNotifyMgr */]());\r\n                        }\r\n                    }\r\n                }\r\n                return _perfManager || _cfgPerfManager || getGblPerfMgr();\r\n            };\r\n            _self.setPerfMgr = function (perfMgr) {\r\n                _perfManager = perfMgr;\r\n            };\r\n            _self.eventCnt = function () {\r\n                return _eventQueue[_DYN_LENGTH /* @min:%2elength */];\r\n            };\r\n            _self.releaseQueue = function () {\r\n                if (_isInitialized && _eventQueue[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                    var eventQueue = _eventQueue;\r\n                    _eventQueue = [];\r\n                    arrForEach(eventQueue, function (event) {\r\n                        _createTelCtx()[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](event);\r\n                    });\r\n                }\r\n            };\r\n            /**\r\n             * Periodically check logger.queue for log messages to be flushed\r\n             */\r\n            _self.pollInternalLogs = function (eventName) {\r\n                _internalLogsEventName = eventName || null;\r\n                var interval = getCfgValue(_config.diagnosticLogInterval);\r\n                if (!interval || !(interval > 0)) {\r\n                    interval = 10000;\r\n                }\r\n                if (_internalLogPoller) {\r\n                    clearInterval(_internalLogPoller);\r\n                }\r\n                _internalLogPoller = setInterval(function () {\r\n                    _flushInternalLogs();\r\n                }, interval);\r\n                return _internalLogPoller;\r\n            };\r\n            /**\r\n             * Stop polling log messages from logger.queue\r\n             */\r\n            _self[_DYN_STOP_POLLING_INTERNA3 /* @min:%2estopPollingInternalLogs */] = function () {\r\n                if (_internalLogPoller) {\r\n                    clearInterval(_internalLogPoller);\r\n                    _internalLogPoller = 0;\r\n                    _flushInternalLogs();\r\n                }\r\n            };\r\n            // Add addTelemetryInitializer\r\n            proxyFunctions(_self, function () { return _telemetryInitializerPlugin; }, [\"addTelemetryInitializer\"]);\r\n            _self.unload = function (isAsync, unloadComplete, cbTimeout) {\r\n                var _a;\r\n                if (isAsync === void 0) { isAsync = true; }\r\n                if (!_isInitialized) {\r\n                    // The SDK is not initialized\r\n                    throwError(strSdkNotInitialized);\r\n                }\r\n                // Check if the SDK still unloading so throw\r\n                if (_isUnloading) {\r\n                    // The SDK is already unloading\r\n                    throwError(strSdkUnloadingError);\r\n                }\r\n                var unloadState = (_a = {\r\n                        reason: 50 /* TelemetryUnloadReason.SdkUnload */\r\n                    },\r\n                    _a[_DYN_IS_ASYNC /* @min:isAsync */] = isAsync,\r\n                    _a.flushComplete = false,\r\n                    _a);\r\n                var processUnloadCtx = createProcessTelemetryUnloadContext(_getPluginChain(), _self);\r\n                processUnloadCtx[_DYN_ON_COMPLETE /* @min:%2eonComplete */](function () {\r\n                    _initDefaults();\r\n                    unloadComplete && unloadComplete(unloadState);\r\n                }, _self);\r\n                function _doUnload(flushComplete) {\r\n                    unloadState.flushComplete = flushComplete;\r\n                    _isUnloading = true;\r\n                    // Run all of the unload handlers first (before unloading the plugins)\r\n                    _unloadHandlers.run(processUnloadCtx, unloadState);\r\n                    // Stop polling the internal logs\r\n                    _self[_DYN_STOP_POLLING_INTERNA3 /* @min:%2estopPollingInternalLogs */]();\r\n                    // Start unloading the components, from this point onwards the SDK should be considered to be in an unstable state\r\n                    processUnloadCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](unloadState);\r\n                }\r\n                if (!_flushChannels(isAsync, _doUnload, 6 /* SendRequestReason.SdkUnload */, cbTimeout)) {\r\n                    _doUnload(false);\r\n                }\r\n            };\r\n            _self[_DYN_GET_PLUGIN /* @min:%2egetPlugin */] = _getPlugin;\r\n            _self.addPlugin = function (plugin, replaceExisting, isAsync, addCb) {\r\n                if (!plugin) {\r\n                    addCb && addCb(false);\r\n                    _logOrThrowError(strValidationError);\r\n                    return;\r\n                }\r\n                var existingPlugin = _getPlugin(plugin[_DYN_IDENTIFIER /* @min:%2eidentifier */]);\r\n                if (existingPlugin && !replaceExisting) {\r\n                    addCb && addCb(false);\r\n                    _logOrThrowError(\"Plugin [\" + plugin[_DYN_IDENTIFIER /* @min:%2eidentifier */] + \"] is already loaded!\");\r\n                    return;\r\n                }\r\n                var updateState = {\r\n                    reason: 16 /* TelemetryUpdateReason.PluginAdded */\r\n                };\r\n                function _addPlugin(removed) {\r\n                    _configExtensions[_DYN_PUSH /* @min:%2epush */](plugin);\r\n                    updateState.added = [plugin];\r\n                    // Re-Initialize the plugin chain\r\n                    _initPluginChain(updateState);\r\n                    addCb && addCb(true);\r\n                }\r\n                if (existingPlugin) {\r\n                    var removedPlugins_1 = [existingPlugin.plugin];\r\n                    var unloadState = {\r\n                        reason: 2 /* TelemetryUnloadReason.PluginReplace */,\r\n                        isAsync: !!isAsync\r\n                    };\r\n                    _removePlugins(removedPlugins_1, unloadState, function (removed) {\r\n                        if (!removed) {\r\n                            // Previous plugin was successfully removed or was not installed\r\n                            addCb && addCb(false);\r\n                        }\r\n                        else {\r\n                            updateState.removed = removedPlugins_1;\r\n                            updateState.reason |= 32 /* TelemetryUpdateReason.PluginRemoved */;\r\n                            _addPlugin(true);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    _addPlugin(false);\r\n                }\r\n            };\r\n            _self.evtNamespace = function () {\r\n                return _evtNamespace;\r\n            };\r\n            _self[_DYN_FLUSH /* @min:%2eflush */] = _flushChannels;\r\n            _self.getTraceCtx = function (createNew) {\r\n                if (!_traceCtx) {\r\n                    _traceCtx = createDistributedTraceContext();\r\n                }\r\n                return _traceCtx;\r\n            };\r\n            _self.setTraceCtx = function (traceCtx) {\r\n                _traceCtx = traceCtx || null;\r\n            };\r\n            // Create the addUnloadCb\r\n            proxyFunctionAs(_self, \"addUnloadCb\", function () { return _unloadHandlers; }, \"add\");\r\n            function _initDefaults() {\r\n                _isInitialized = false;\r\n                // Use a default logger so initialization errors are not dropped on the floor with full logging\r\n                _config = objExtend(true, {}, defaultInitConfig);\r\n                _self[_DYN_CONFIG /* @min:%2econfig */] = _config;\r\n                _self[_DYN_LOGGER /* @min:%2elogger */] = new DiagnosticLogger(_config);\r\n                _self[_DYN__EXTENSIONS /* @min:%2e_extensions */] = [];\r\n                _telemetryInitializerPlugin = new TelemetryInitializerPlugin();\r\n                _eventQueue = [];\r\n                _notificationManager = null;\r\n                _perfManager = null;\r\n                _cfgPerfManager = null;\r\n                _cookieManager = null;\r\n                _pluginChain = null;\r\n                _coreExtensions = null;\r\n                _configExtensions = [];\r\n                _channelControl = null;\r\n                _channelConfig = null;\r\n                _channelQueue = null;\r\n                _isUnloading = false;\r\n                _internalLogsEventName = null;\r\n                _evtNamespace = createUniqueNamespace(\"AIBaseCore\", true);\r\n                _unloadHandlers = createUnloadHandlerContainer();\r\n                _traceCtx = null;\r\n            }\r\n            function _createTelCtx() {\r\n                return createProcessTelemetryContext(_getPluginChain(), _config, _self);\r\n            }\r\n            // Initialize or Re-initialize the plugins\r\n            function _initPluginChain(updateState) {\r\n                // Extension validation\r\n                var theExtensions = _validateExtensions(_self[_DYN_LOGGER /* @min:%2elogger */], ChannelControllerPriority, _configExtensions);\r\n                _coreExtensions = theExtensions[STR_CORE /* @min:%2ecore */];\r\n                _pluginChain = null;\r\n                // Sort the complete set of extensions by priority\r\n                var allExtensions = theExtensions.all;\r\n                // Initialize the Channel Queues and the channel plugins first\r\n                _channelQueue = objFreeze(createChannelQueues(_channelConfig, allExtensions, _self));\r\n                if (_channelControl) {\r\n                    // During add / remove of a plugin this may get called again, so don't re-add if already present\r\n                    // But we also want the controller as the last, so remove if already present\r\n                    // And reusing the existing instance, just in case an installed plugin has a reference and\r\n                    // is using it.\r\n                    var idx = arrIndexOf(allExtensions, _channelControl);\r\n                    if (idx !== -1) {\r\n                        allExtensions[_DYN_SPLICE /* @min:%2esplice */](idx, 1);\r\n                    }\r\n                    idx = arrIndexOf(_coreExtensions, _channelControl);\r\n                    if (idx !== -1) {\r\n                        _coreExtensions[_DYN_SPLICE /* @min:%2esplice */](idx, 1);\r\n                    }\r\n                    _channelControl._setQueue(_channelQueue);\r\n                }\r\n                else {\r\n                    _channelControl = createChannelControllerPlugin(_channelQueue, _self);\r\n                }\r\n                // Add on \"channelController\" as the last \"plugin\"\r\n                allExtensions[_DYN_PUSH /* @min:%2epush */](_channelControl);\r\n                _coreExtensions[_DYN_PUSH /* @min:%2epush */](_channelControl);\r\n                // Required to allow plugins to call core.getPlugin() during their own initialization\r\n                _self[_DYN__EXTENSIONS /* @min:%2e_extensions */] = sortPlugins(allExtensions);\r\n                // Initialize the controls\r\n                _channelControl[_DYN_INITIALIZE /* @min:%2einitialize */](_config, _self, allExtensions);\r\n                initializePlugins(_createTelCtx(), allExtensions);\r\n                // Now reset the extensions to just those being managed by Basecore\r\n                _self[_DYN__EXTENSIONS /* @min:%2e_extensions */] = objFreeze(sortPlugins(_coreExtensions || [])).slice();\r\n                if (updateState) {\r\n                    _doUpdate(updateState);\r\n                }\r\n            }\r\n            function _getPlugin(pluginIdentifier) {\r\n                var _a;\r\n                var theExt = null;\r\n                var thePlugin = null;\r\n                arrForEach(_self[_DYN__EXTENSIONS /* @min:%2e_extensions */], function (ext) {\r\n                    if (ext[_DYN_IDENTIFIER /* @min:%2eidentifier */] === pluginIdentifier && ext !== _channelControl && ext !== _telemetryInitializerPlugin) {\r\n                        thePlugin = ext;\r\n                        return -1;\r\n                    }\r\n                });\r\n                if (!thePlugin && _channelControl) {\r\n                    // Check the channel Controller\r\n                    thePlugin = _channelControl.getChannel(pluginIdentifier);\r\n                }\r\n                if (thePlugin) {\r\n                    theExt = (_a = {\r\n                            plugin: thePlugin\r\n                        },\r\n                        _a[_DYN_SET_ENABLED /* @min:setEnabled */] = function (enabled) {\r\n                            _getPluginState(thePlugin)[STR_DISABLED] = !enabled;\r\n                        },\r\n                        _a.isEnabled = function () {\r\n                            var pluginState = _getPluginState(thePlugin);\r\n                            return !pluginState[_DYN_TEARDOWN /* @min:%2eteardown */] && !pluginState[STR_DISABLED];\r\n                        },\r\n                        _a.remove = function (isAsync, removeCb) {\r\n                            var _a;\r\n                            if (isAsync === void 0) { isAsync = true; }\r\n                            var pluginsToRemove = [thePlugin];\r\n                            var unloadState = (_a = {\r\n                                    reason: 1 /* TelemetryUnloadReason.PluginUnload */\r\n                                },\r\n                                _a[_DYN_IS_ASYNC /* @min:isAsync */] = isAsync,\r\n                                _a);\r\n                            _removePlugins(pluginsToRemove, unloadState, function (removed) {\r\n                                if (removed) {\r\n                                    // Re-Initialize the plugin chain\r\n                                    _initPluginChain({\r\n                                        reason: 32 /* TelemetryUpdateReason.PluginRemoved */,\r\n                                        removed: pluginsToRemove\r\n                                    });\r\n                                }\r\n                                removeCb && removeCb(removed);\r\n                            });\r\n                        },\r\n                        _a);\r\n                }\r\n                return theExt;\r\n            }\r\n            function _getPluginChain() {\r\n                if (!_pluginChain) {\r\n                    // copy the collection of extensions\r\n                    var extensions = (_coreExtensions || []).slice();\r\n                    // During add / remove this may get called again, so don't readd if already present\r\n                    if (arrIndexOf(extensions, _telemetryInitializerPlugin) === -1) {\r\n                        extensions[_DYN_PUSH /* @min:%2epush */](_telemetryInitializerPlugin);\r\n                    }\r\n                    _pluginChain = createTelemetryProxyChain(sortPlugins(extensions), _config, _self);\r\n                }\r\n                return _pluginChain;\r\n            }\r\n            function _removePlugins(thePlugins, unloadState, removeComplete) {\r\n                if (thePlugins && thePlugins[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                    var unloadChain = createTelemetryProxyChain(thePlugins, _config, _self);\r\n                    var unloadCtx = createProcessTelemetryUnloadContext(unloadChain, _self);\r\n                    unloadCtx[_DYN_ON_COMPLETE /* @min:%2eonComplete */](function () {\r\n                        var removed = false;\r\n                        // Remove the listed config extensions\r\n                        var newConfigExtensions = [];\r\n                        arrForEach(_configExtensions, function (plugin, idx) {\r\n                            if (!_isPluginPresent(plugin, thePlugins)) {\r\n                                newConfigExtensions[_DYN_PUSH /* @min:%2epush */](plugin);\r\n                            }\r\n                            else {\r\n                                removed = true;\r\n                            }\r\n                        });\r\n                        _configExtensions = newConfigExtensions;\r\n                        // Re-Create the channel config\r\n                        var newChannelConfig = [];\r\n                        if (_channelConfig) {\r\n                            arrForEach(_channelConfig, function (queue, idx) {\r\n                                var newQueue = [];\r\n                                arrForEach(queue, function (channel) {\r\n                                    if (!_isPluginPresent(channel, thePlugins)) {\r\n                                        newQueue[_DYN_PUSH /* @min:%2epush */](channel);\r\n                                    }\r\n                                    else {\r\n                                        removed = true;\r\n                                    }\r\n                                });\r\n                                newChannelConfig[_DYN_PUSH /* @min:%2epush */](newQueue);\r\n                            });\r\n                            _channelConfig = newChannelConfig;\r\n                        }\r\n                        removeComplete && removeComplete(removed);\r\n                    });\r\n                    unloadCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](unloadState);\r\n                }\r\n                else {\r\n                    removeComplete(false);\r\n                }\r\n            }\r\n            function _flushInternalLogs() {\r\n                var queue = _self[_DYN_LOGGER /* @min:%2elogger */] ? _self[_DYN_LOGGER /* @min:%2elogger */].queue : [];\r\n                if (queue) {\r\n                    arrForEach(queue, function (logMessage) {\r\n                        var _a;\r\n                        var item = (_a = {},\r\n                            _a[_DYN_NAME /* @min:name */] = _internalLogsEventName ? _internalLogsEventName : \"InternalMessageId: \" + logMessage[_DYN_MESSAGE_ID /* @min:%2emessageId */],\r\n                            _a.iKey = getCfgValue(_config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */]),\r\n                            _a.time = toISOString(new Date()),\r\n                            _a.baseType = _InternalLogMessage.dataType,\r\n                            _a.baseData = { message: logMessage[_DYN_MESSAGE /* @min:%2emessage */] },\r\n                            _a);\r\n                        _self.track(item);\r\n                    });\r\n                    queue[_DYN_LENGTH /* @min:%2elength */] = 0;\r\n                }\r\n            }\r\n            function _flushChannels(isAsync, callBack, sendReason, cbTimeout) {\r\n                if (_channelControl) {\r\n                    return _channelControl[_DYN_FLUSH /* @min:%2eflush */](isAsync, callBack, sendReason || 6 /* SendRequestReason.SdkUnload */, cbTimeout);\r\n                }\r\n                callBack && callBack(false);\r\n                return true;\r\n            }\r\n            function _initDebugListener() {\r\n                var disableDbgExt = getCfgValue(_config.disableDbgExt);\r\n                if (disableDbgExt === true && _debugListener) {\r\n                    // Remove any previously loaded debug listener\r\n                    _notificationManager[_DYN_REMOVE_NOTIFICATION_2 /* @min:%2eremoveNotificationListener */](_debugListener);\r\n                    _debugListener = null;\r\n                }\r\n                if (_notificationManager && !_debugListener && disableDbgExt !== true) {\r\n                    _debugListener = getDebugListener(_config);\r\n                    _notificationManager[_DYN_ADD_NOTIFICATION_LIS1 /* @min:%2eaddNotificationListener */](_debugListener);\r\n                }\r\n            }\r\n            function _initPerfManager() {\r\n                var enablePerfMgr = getCfgValue(_config.enablePerfMgr);\r\n                if (!enablePerfMgr && _cfgPerfManager) {\r\n                    // Remove any existing config based performance manager\r\n                    _cfgPerfManager = null;\r\n                }\r\n                if (enablePerfMgr) {\r\n                    // Set the performance manager creation function if not defined\r\n                    getSetValue(_config, STR_CREATE_PERF_MGR, _createPerfManager);\r\n                }\r\n            }\r\n            function _initExtConfig() {\r\n                var extConfig = getSetValue(_config, STR_EXTENSION_CONFIG, {});\r\n                extConfig.NotificationManager = _notificationManager;\r\n            }\r\n            function _doUpdate(updateState) {\r\n                var updateCtx = createProcessTelemetryUpdateContext(_getPluginChain(), _self);\r\n                if (!_self._updateHook || _self._updateHook(updateCtx, updateState) !== true) {\r\n                    updateCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](updateState);\r\n                }\r\n            }\r\n            function _logOrThrowError(message) {\r\n                var logger = _self[_DYN_LOGGER /* @min:%2elogger */];\r\n                if (logger) {\r\n                    // there should always be a logger\r\n                    _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 73 /* _eInternalMessageId.PluginException */, message);\r\n                }\r\n                else {\r\n                    throwError(message);\r\n                }\r\n            }\r\n        });\r\n    }\r\n// Removed Stub for BaseCore.prototype.initialize.\r\n// Removed Stub for BaseCore.prototype.getTransmissionControls.\r\n// Removed Stub for BaseCore.prototype.track.\r\n// Removed Stub for BaseCore.prototype.getProcessTelContext.\r\n// Removed Stub for BaseCore.prototype.getNotifyMgr.\r\n// Removed Stub for BaseCore.prototype.addNotificationListener.\r\n// Removed Stub for BaseCore.prototype.removeNotificationListener.\r\n// Removed Stub for BaseCore.prototype.getCookieMgr.\r\n// Removed Stub for BaseCore.prototype.setCookieMgr.\r\n// Removed Stub for BaseCore.prototype.getPerfMgr.\r\n// Removed Stub for BaseCore.prototype.setPerfMgr.\r\n// Removed Stub for BaseCore.prototype.eventCnt.\r\n// Removed Stub for BaseCore.prototype.pollInternalLogs.\r\n// Removed Stub for BaseCore.prototype.stopPollingInternalLogs.\r\n// Removed Stub for BaseCore.prototype.addTelemetryInitializer.\r\n// Removed Stub for BaseCore.prototype.unload.\r\n// Removed Stub for BaseCore.prototype.getPlugin.\r\n// Removed Stub for BaseCore.prototype.addPlugin.\r\n// Removed Stub for BaseCore.prototype.evtNamespace.\r\n// Removed Stub for BaseCore.prototype.addUnloadCb.\r\n// Removed Stub for BaseCore.prototype.flush.\r\n// Removed Stub for BaseCore.prototype.getTraceCtx.\r\n// Removed Stub for BaseCore.prototype.setTraceCtx.\r\n// Removed Stub for BaseCore.prototype.releaseQueue.\r\n// Removed Stub for BaseCore.prototype._updateHook.\r\n    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n    // this will be removed when ES3 support is dropped.\n    BaseCore.__ieDyn=1;\n\n    return BaseCore;\r\n}());\r\nexport { BaseCore };\r\n//# sourceMappingURL=BaseCore.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\r\n\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { _DYN_ADD_NOTIFICATION_LIS1, _DYN_IS_ASYNC, _DYN_IS_CHILD_EVT, _DYN_LISTENERS, _DYN_PUSH, _DYN_REMOVE_NOTIFICATION_2, _DYN_SPLICE } from \"../__DynamicConstants\";\r\nimport { arrForEach, arrIndexOf } from \"./HelperFuncs\";\r\nimport { STR_EVENTS_DISCARDED, STR_EVENTS_SEND_REQUEST, STR_EVENTS_SENT, STR_PERF_EVENT } from \"./InternalConstants\";\r\nfunction _runListeners(listeners, name, isAsync, callback) {\r\n    arrForEach(listeners, function (listener) {\r\n        if (listener && listener[name]) {\r\n            if (isAsync) {\r\n                setTimeout(function () { return callback(listener); }, 0);\r\n            }\r\n            else {\r\n                try {\r\n                    callback(listener);\r\n                }\r\n                catch (e) {\r\n                    // Catch errors to ensure we don't block sending the requests\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nvar NotificationManager = /** @class */ (function () {\r\n    function NotificationManager(config) {\r\n        this.listeners = [];\r\n        var perfEvtsSendAll = !!(config || {}).perfEvtsSendAll;\r\n        dynamicProto(NotificationManager, this, function (_self) {\r\n            _self[_DYN_ADD_NOTIFICATION_LIS1 /* @min:%2eaddNotificationListener */] = function (listener) {\r\n                _self.listeners[_DYN_PUSH /* @min:%2epush */](listener);\r\n            };\r\n            /**\r\n             * Removes all instances of the listener.\r\n             * @param {INotificationListener} listener - AWTNotificationListener to remove.\r\n             */\r\n            _self[_DYN_REMOVE_NOTIFICATION_2 /* @min:%2eremoveNotificationListener */] = function (listener) {\r\n                var index = arrIndexOf(_self[_DYN_LISTENERS /* @min:%2elisteners */], listener);\r\n                while (index > -1) {\r\n                    _self.listeners[_DYN_SPLICE /* @min:%2esplice */](index, 1);\r\n                    index = arrIndexOf(_self[_DYN_LISTENERS /* @min:%2elisteners */], listener);\r\n                }\r\n            };\r\n            /**\r\n             * Notification for events sent.\r\n             * @param {ITelemetryItem[]} events - The array of events that have been sent.\r\n             */\r\n            _self[STR_EVENTS_SENT /* @min:%2eeventsSent */] = function (events) {\r\n                _runListeners(_self[_DYN_LISTENERS /* @min:%2elisteners */], STR_EVENTS_SENT, true, function (listener) {\r\n                    listener[STR_EVENTS_SENT /* @min:%2eeventsSent */](events);\r\n                });\r\n            };\r\n            /**\r\n             * Notification for events being discarded.\r\n             * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.\r\n             * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason\r\n             * constant should be used to check the different values.\r\n             */\r\n            _self[STR_EVENTS_DISCARDED /* @min:%2eeventsDiscarded */] = function (events, reason) {\r\n                _runListeners(_self[_DYN_LISTENERS /* @min:%2elisteners */], STR_EVENTS_DISCARDED, true, function (listener) {\r\n                    listener[STR_EVENTS_DISCARDED /* @min:%2eeventsDiscarded */](events, reason);\r\n                });\r\n            };\r\n            /**\r\n             * [Optional] A function called when the events have been requested to be sent to the sever.\r\n             * @param {number} sendReason - The reason why the event batch is being sent.\r\n             * @param {boolean} isAsync   - A flag which identifies whether the requests are being sent in an async or sync manner.\r\n             */\r\n            _self[STR_EVENTS_SEND_REQUEST /* @min:%2eeventsSendRequest */] = function (sendReason, isAsync) {\r\n                _runListeners(_self[_DYN_LISTENERS /* @min:%2elisteners */], STR_EVENTS_SEND_REQUEST, isAsync, function (listener) {\r\n                    listener[STR_EVENTS_SEND_REQUEST /* @min:%2eeventsSendRequest */](sendReason, isAsync);\r\n                });\r\n            };\r\n            _self[STR_PERF_EVENT /* @min:%2eperfEvent */] = function (perfEvent) {\r\n                if (perfEvent) {\r\n                    // Send all events or only parent events\r\n                    if (perfEvtsSendAll || !perfEvent[_DYN_IS_CHILD_EVT /* @min:%2eisChildEvt */]()) {\r\n                        _runListeners(_self[_DYN_LISTENERS /* @min:%2elisteners */], STR_PERF_EVENT, false, function (listener) {\r\n                            if (perfEvent[_DYN_IS_ASYNC /* @min:%2eisAsync */]) {\r\n                                setTimeout(function () { return listener[STR_PERF_EVENT /* @min:%2eperfEvent */](perfEvent); }, 0);\r\n                            }\r\n                            else {\r\n                                listener[STR_PERF_EVENT /* @min:%2eperfEvent */](perfEvent);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n        });\r\n    }\r\n// Removed Stub for NotificationManager.prototype.addNotificationListener.\r\n// Removed Stub for NotificationManager.prototype.removeNotificationListener.\r\n// Removed Stub for NotificationManager.prototype.eventsSent.\r\n// Removed Stub for NotificationManager.prototype.eventsDiscarded.\r\n// Removed Stub for NotificationManager.prototype.eventsSendRequest.\r\n    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n    // this will be removed when ES3 support is dropped.\n    NotificationManager.__ieDyn=1;\n\n    return NotificationManager;\r\n}());\r\nexport { NotificationManager };\r\n//# sourceMappingURL=NotificationManager.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nimport { __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\r\n\r\n\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { _DYN_GET_NOTIFY_MGR, _DYN_INITIALIZE, _DYN_NAME } from \"../__DynamicConstants\";\r\nimport { BaseCore } from \"./BaseCore\";\r\nimport { DiagnosticLogger } from \"./DiagnosticLogger\";\r\nimport { isNullOrUndefined, throwError } from \"./HelperFuncs\";\r\nimport { STR_EVENTS_DISCARDED, STR_GET_PERF_MGR } from \"./InternalConstants\";\r\nimport { NotificationManager } from \"./NotificationManager\";\r\nimport { doPerf } from \"./PerfManager\";\r\nvar AppInsightsCore = /** @class */ (function (_super) {\r\n    __extends(AppInsightsCore, _super);\r\n    function AppInsightsCore() {\r\n        var _this = _super.call(this) || this;\r\n        dynamicProto(AppInsightsCore, _this, function (_self, _base) {\r\n            _self[_DYN_INITIALIZE /* @min:%2einitialize */] = function (config, extensions, logger, notificationManager) {\r\n                _base[_DYN_INITIALIZE /* @min:%2einitialize */](config, extensions, logger || new DiagnosticLogger(config), notificationManager || new NotificationManager(config));\r\n            };\r\n            _self.track = function (telemetryItem) {\r\n                doPerf(_self[STR_GET_PERF_MGR /* @min:%2egetPerfMgr */](), function () { return \"AppInsightsCore:track\"; }, function () {\r\n                    if (telemetryItem === null) {\r\n                        _notifyInvalidEvent(telemetryItem);\r\n                        // throw error\r\n                        throwError(\"Invalid telemetry item\");\r\n                    }\r\n                    // do basic validation before sending it through the pipeline\r\n                    _validateTelemetryItem(telemetryItem);\r\n                    _base.track(telemetryItem);\r\n                }, function () { return ({ item: telemetryItem }); }, !(telemetryItem.sync));\r\n            };\r\n            function _validateTelemetryItem(telemetryItem) {\r\n                if (isNullOrUndefined(telemetryItem[_DYN_NAME /* @min:%2ename */])) {\r\n                    _notifyInvalidEvent(telemetryItem);\r\n                    throwError(\"telemetry name required\");\r\n                }\r\n            }\r\n            function _notifyInvalidEvent(telemetryItem) {\r\n                var manager = _self[_DYN_GET_NOTIFY_MGR /* @min:%2egetNotifyMgr */]();\r\n                if (manager) {\r\n                    manager[STR_EVENTS_DISCARDED /* @min:%2eeventsDiscarded */]([telemetryItem], 2 /* eEventsDiscardedReason.InvalidEvent */);\r\n                }\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n// Removed Stub for AppInsightsCore.prototype.initialize.\r\n// Removed Stub for AppInsightsCore.prototype.track.\r\n    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n    // this will be removed when ES3 support is dropped.\n    AppInsightsCore.__ieDyn=1;\n\n    return AppInsightsCore;\r\n}(BaseCore));\r\nexport { AppInsightsCore };\r\n//# sourceMappingURL=AppInsightsCore.js.map","/*\n * 1DS JS SDK Core, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\nimport { __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\r\n/**\r\n* AppInsightsCore.ts\r\n* @author Abhilash Panwar (abpanwar) Hector Hernandez (hectorh)\r\n* @copyright Microsoft 2018\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { AppInsightsCore as InternalCore, DiagnosticLogger, _throwInternal, arrForEach, doPerf, dumpObj, throwError } from \"@microsoft/applicationinsights-core-js\";\r\nimport { STR_DEFAULT_ENDPOINT_URL, STR_EMPTY, STR_PROPERTIES, STR_VERSION } from \"./InternalConstants\";\r\nimport { FullVersionString, getTime, isLatency } from \"./Utils\";\r\nvar AppInsightsCore = /** @class */ (function (_super) {\r\n    __extends(AppInsightsCore, _super);\r\n    function AppInsightsCore() {\r\n        var _this = _super.call(this) || this;\r\n        _this.pluginVersionStringArr = [];\r\n        dynamicProto(AppInsightsCore, _this, function (_self, _base) {\r\n            if (!_self.logger || !_self.logger.queue) {\r\n                // The AI Base can inject a No-Op logger so if not defined or the No-Op, change to use a default logger so initialization errors\r\n                // are not dropped on the floor if one is not already defined\r\n                _self.logger = new DiagnosticLogger({ loggingLevelConsole: 1 /* eLoggingSeverity.CRITICAL */ });\r\n            }\r\n            _self.initialize = function (config, extensions, logger, notificationManager) {\r\n                doPerf(_self, function () { return \"AppInsightsCore.initialize\"; }, function () {\r\n                    var _pluginVersionStringArr = _self.pluginVersionStringArr;\r\n                    // Add default collector url\r\n                    if (config) {\r\n                        if (!config.endpointUrl) {\r\n                            config.endpointUrl = STR_DEFAULT_ENDPOINT_URL;\r\n                        }\r\n                        var propertyStorageOverride = config.propertyStorageOverride;\r\n                        // Validate property storage override\r\n                        if (propertyStorageOverride && (!propertyStorageOverride.getProperty || !propertyStorageOverride.setProperty)) {\r\n                            throwError(\"Invalid property storage override passed.\");\r\n                        }\r\n                        if (config.channels) {\r\n                            arrForEach(config.channels, function (channels) {\r\n                                if (channels) {\r\n                                    arrForEach(channels, function (channel) {\r\n                                        if (channel.identifier && channel.version) {\r\n                                            var ver = channel.identifier + \"=\" + channel.version;\r\n                                            _pluginVersionStringArr.push(ver);\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    _self.getWParam = function () {\r\n                        return (typeof document !== \"undefined\" || !!config.enableWParam) ? 0 : -1;\r\n                    };\r\n                    if (extensions) {\r\n                        arrForEach(extensions, function (ext) {\r\n                            if (ext && ext.identifier && ext.version) {\r\n                                var ver = ext.identifier + \"=\" + ext.version;\r\n                                _pluginVersionStringArr.push(ver);\r\n                            }\r\n                        });\r\n                    }\r\n                    _self.pluginVersionString = _pluginVersionStringArr.join(\";\");\r\n                    _self.pluginVersionStringArr = _pluginVersionStringArr;\r\n                    try {\r\n                        _base.initialize(config, extensions, logger, notificationManager);\r\n                        _self.pollInternalLogs(\"InternalLog\");\r\n                    }\r\n                    catch (e) {\r\n                        var logger_1 = _self.logger;\r\n                        var message = dumpObj(e);\r\n                        if (message.indexOf(\"channels\") !== -1) {\r\n                            // Add some additional context to the underlying reported error\r\n                            message += \"\\n - Channels must be provided through config.channels only!\";\r\n                        }\r\n                        _throwInternal(logger_1, 1 /* eLoggingSeverity.CRITICAL */, 514 /* _eExtendedInternalMessageId.FailedToInitializeSDK */, \"SDK Initialization Failed - no telemetry will be sent: \" + message);\r\n                    }\r\n                }, function () { return ({ config: config, extensions: extensions, logger: logger, notificationManager: notificationManager }); });\r\n            };\r\n            _self.track = function (item) {\r\n                doPerf(_self, function () { return \"AppInsightsCore.track\"; }, function () {\r\n                    var telemetryItem = item;\r\n                    if (telemetryItem) {\r\n                        telemetryItem.timings = telemetryItem.timings || {};\r\n                        telemetryItem.timings.trackStart = getTime();\r\n                        if (!isLatency(telemetryItem.latency)) {\r\n                            telemetryItem.latency = 1 /* EventLatencyValue.Normal */;\r\n                        }\r\n                        var itemExt = telemetryItem.ext = telemetryItem.ext || {};\r\n                        itemExt.sdk = itemExt.sdk || {};\r\n                        itemExt.sdk.ver = FullVersionString;\r\n                        var baseData = telemetryItem.baseData = telemetryItem.baseData || {};\r\n                        baseData[STR_PROPERTIES] = baseData[STR_PROPERTIES] || {};\r\n                        var itemProperties = baseData[STR_PROPERTIES];\r\n                        itemProperties[STR_VERSION] = itemProperties[STR_VERSION] || _self.pluginVersionString || STR_EMPTY;\r\n                    }\r\n                    _base.track(telemetryItem);\r\n                }, function () { return ({ item: item }); }, !(item.sync));\r\n            };\r\n        });\r\n        return _this;\r\n    }\r\n// Removed Stub for AppInsightsCore.prototype.initialize.\r\n// Removed Stub for AppInsightsCore.prototype.track.\r\n    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n    // this will be removed when ES3 support is dropped.\n    AppInsightsCore.__ieDyn=1;\n\n    return AppInsightsCore;\r\n}(InternalCore));\r\nexport default AppInsightsCore;\r\n//# sourceMappingURL=AppInsightsCore.js.map","/*\n * 1DS JS SDK Core, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\nimport { __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\r\n/**\r\n* BaseCore.ts\r\n* Base Core is a subset of 1DS Web SDK Core. The purpose of Base Core is to generate a smaller bundle size while providing essential features of Core. Features that are not included in Base Core are:\r\n* 1. Internal logging\r\n* 2. Sending notifications on telemetry sent/discarded\r\n* @author Abhilash Panwar (abpanwar) Hector Hernandez (hectorh)\r\n* @copyright Microsoft 2018\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { BaseCore as InternalCore, _throwInternal, dumpObj } from \"@microsoft/applicationinsights-core-js\";\r\nimport { STR_DEFAULT_ENDPOINT_URL } from \"./InternalConstants\";\r\nimport { FullVersionString, isDocumentObjectAvailable } from \"./Utils\";\r\nvar BaseCore = /** @class */ (function (_super) {\r\n    __extends(BaseCore, _super);\r\n    function BaseCore() {\r\n        var _this = _super.call(this) || this;\r\n        dynamicProto(BaseCore, _this, function (_self, _base) {\r\n            _self.initialize = function (config, extensions, logger, notificationManager) {\r\n                if (config && !config.endpointUrl) {\r\n                    config.endpointUrl = STR_DEFAULT_ENDPOINT_URL;\r\n                }\r\n                _self.getWParam = function () {\r\n                    return (isDocumentObjectAvailable || !!config.enableWParam) ? 0 : -1;\r\n                };\r\n                try {\r\n                    _base.initialize(config, extensions, logger, notificationManager);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(_self.logger, 1 /* eLoggingSeverity.CRITICAL */, 514 /* _eExtendedInternalMessageId.FailedToInitializeSDK */, \"Initialization Failed: \" + dumpObj(e) + \"\\n - Note: Channels must be provided through config.channels only\");\r\n                }\r\n            };\r\n            _self.track = function (item) {\r\n                var telemetryItem = item;\r\n                if (telemetryItem) {\r\n                    var ext = telemetryItem.ext = telemetryItem.ext || {};\r\n                    ext.sdk = ext.sdk || {};\r\n                    ext.sdk.ver = FullVersionString;\r\n                }\r\n                _base.track(telemetryItem);\r\n            };\r\n        });\r\n        return _this;\r\n    }\r\n// Removed Stub for BaseCore.prototype.initialize.\r\n// Removed Stub for BaseCore.prototype.track.\r\n    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n    // this will be removed when ES3 support is dropped.\n    BaseCore.__ieDyn=1;\n\n    return BaseCore;\r\n}(InternalCore));\r\nexport default BaseCore;\r\n//# sourceMappingURL=BaseCore.js.map","/*\n * 1DS JS SDK Core, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n* ESPromise.ts\r\n* @author  Nev Wylie (newylie))\r\n* @copyright Microsoft 2019\r\n* Simplified wrapper to provide ES6 style Promise callback handling for older browsers\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { isFunction } from \"@microsoft/applicationinsights-core-js\";\r\n/**\r\n * @ignore -- Don't include in the generated documentation\r\n * Using a local variable to assist with minfication\r\n */\r\nvar _isFunction = isFunction;\r\n/**\r\n * @ignore -- Don't include in the generated documentation\r\n * This function will be used as onFulfilled handler for any Promise found in the iterable passed to Promise.all.\r\n * The goal here is to capture in a closure the index of the current item from the iterable. If we did not create\r\n * this closure, the captured index variable would be the same one that the for loop updates and thus would always\r\n * be pointing to the last index in the iterable by the time that the onFulfilled handler is called.\r\n * However, note that for the resolvedCallback callback we want the opposite. For this one we do want to capture\r\n * the same variable that the for loop updates so that we have the full count of pending promises by the time\r\n * the onFulfilled handlers start getting called.\r\n * @param values The resolving promise values\r\n * @param index The index of this callback function\r\n * @param resolvedCallback THe callback function used to check if the \"all\" promise is complete\r\n */\r\nfunction _createPromiseAllOnResolvedFunction(values, index, resolvedCallback) {\r\n    return function (value) {\r\n        values[index] = value;\r\n        resolvedCallback();\r\n    };\r\n}\r\n/**\r\n * Simplified wrapper to provide ES6 style Promise callback handling for older browsers\r\n */\r\nvar ESPromise = /** @class */ (function () {\r\n    /**\r\n     * The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.\r\n     * @param resolverFunc A function that is passed with the arguments resolve and reject. The executor function is executed\r\n     * immediately by the Promise implementation, passing resolve and reject functions (the executor is called before the Promise\r\n     * constructor even returns the created object). The resolve and reject functions, when called, resolve or reject the promise,\r\n     * respectively. The executor normally initiates some asynchronous work, and then, once that completes, either calls the resolve\r\n     * function to resolve the promise or else rejects it if an error occurred. If an error is thrown in the executor function, the\r\n     * promise is rejected. The return value of the executor is ignored.\r\n     */\r\n    function ESPromise(resolverFunc) {\r\n        var _state = 0 /* PromiseState.Pending */;\r\n        var _settledValue = null;\r\n        var _queue = [];\r\n        dynamicProto(ESPromise, this, function (_this) {\r\n            _this.then = function (onResolved, onRejected) {\r\n                return new ESPromise(function (resolve, reject) {\r\n                    // Queue the new promise returned to be resolved or rejected\r\n                    // when this promise settles.\r\n                    _enqueue(onResolved, onRejected, resolve, reject);\r\n                });\r\n            };\r\n            _this[\"catch\"] = function (onRejected) {\r\n                return _this.then(null, onRejected);\r\n            };\r\n        });\r\n        function _enqueue(onResolved, onRejected, resolve, reject) {\r\n            _queue.push(function () {\r\n                var value;\r\n                try {\r\n                    // First call the onFulfilled or onRejected handler, on the settled value\r\n                    // of this promise. If the corresponding handler does not exist, simply\r\n                    // pass through the settled value.\r\n                    if (_state === 1 /* PromiseState.Resolved */) {\r\n                        value = _isFunction(onResolved) ? onResolved(_settledValue) : _settledValue;\r\n                    }\r\n                    else {\r\n                        value = _isFunction(onRejected) ? onRejected(_settledValue) : _settledValue;\r\n                    }\r\n                    if (value instanceof ESPromise) {\r\n                        // The called handlers returned a new promise, so the chained promise\r\n                        // will follow the state of this promise.\r\n                        value.then(resolve, reject);\r\n                    }\r\n                    else if (_state === 2 /* PromiseState.Rejected */ && !_isFunction(onRejected)) {\r\n                        // If there wasn't an onRejected handler and this promise is rejected, then\r\n                        // the chained promise also rejects with the same reason.\r\n                        reject(value);\r\n                    }\r\n                    else {\r\n                        // If this promise is fulfilled, then the chained promise is also fulfilled\r\n                        // with either the settled value of this promise (if no onFulfilled handler\r\n                        // was available) or the return value of the handler. If this promise is\r\n                        // rejected and there was an onRejected handler, then the chained promise is\r\n                        // fulfilled with the return value of the handler.\r\n                        resolve(value);\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    // The chained promise will reject if there is any exception thrown while\r\n                    // calling the onFulfilled or onRejected handlers.\r\n                    reject(error);\r\n                    return;\r\n                }\r\n            });\r\n            // If this promise is already settled, then immediately process the callback we\r\n            // just added to the queue.\r\n            if (_state !== 0 /* PromiseState.Pending */) {\r\n                _processQueue();\r\n            }\r\n        }\r\n        function _processQueue() {\r\n            if (_queue.length > 0) {\r\n                // The onFulfilled and onRejected handlers must be called asynchronously. Thus,\r\n                // we make a copy of the queue and work on it once the current call stack unwinds.\r\n                var pending_1 = _queue.slice();\r\n                _queue = [];\r\n                setTimeout(function () {\r\n                    for (var i = 0, len = pending_1.length; i < len; ++i) {\r\n                        try {\r\n                            pending_1[i]();\r\n                        }\r\n                        catch (e) {\r\n                            // Don't let 1 failing handler break all others\r\n                            // TODO (newylie): Add some form of error reporting (i.e. Call any registered JS error handler so the error is reported)\r\n                        }\r\n                    }\r\n                }, 0);\r\n            }\r\n        }\r\n        function _resolve(value) {\r\n            if (_state === 0 /* PromiseState.Pending */) {\r\n                _settledValue = value;\r\n                _state = 1 /* PromiseState.Resolved */;\r\n                _processQueue();\r\n            }\r\n        }\r\n        function _reject(reason) {\r\n            if (_state === 0 /* PromiseState.Pending */) {\r\n                _settledValue = reason;\r\n                _state = 2 /* PromiseState.Rejected */;\r\n                _processQueue();\r\n            }\r\n        }\r\n        (function _initialize() {\r\n            if (!_isFunction(resolverFunc)) {\r\n                throw new TypeError(\"ESPromise: resolvedFunc argument is not a Function\");\r\n            }\r\n            try {\r\n                resolverFunc(_resolve, _reject);\r\n            }\r\n            catch (error) {\r\n                // This promise will immediately reject if any exception is thrown\r\n                // from within the executor function.\r\n                _reject(error);\r\n            }\r\n        })();\r\n    }\r\n    /**\r\n     * The Promise.resolve() method returns a Promise object that is resolved with a given value. If the value is a promise, that promise is returned;\r\n     * if the value is a thenable (i.e. has a \"then\" method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise\r\n     * the returned promise will be fulfilled with the value. This function flattens nested layers of promise-like objects (e.g. a promise that resolves\r\n     * to a promise that resolves to something) into a single layer.\r\n     * @param value Argument to be resolved by this Promise. Can also be a Promise or a thenable to resolve.\r\n     */\r\n    ESPromise.resolve = function (value) {\r\n        if (value instanceof ESPromise) {\r\n            // Value is a Promise so just return it\r\n            return value;\r\n        }\r\n        else if (value && _isFunction(value.then)) {\r\n            // Value looks like a promise or thenable (has a then function)\r\n            return new ESPromise(function (resolve, reject) {\r\n                try {\r\n                    value.then(resolve, reject);\r\n                }\r\n                catch (error) {\r\n                    reject(error);\r\n                }\r\n            });\r\n        }\r\n        return new ESPromise(function (resolve) {\r\n            resolve(value);\r\n        });\r\n    };\r\n    /**\r\n     * The Promise.reject() method returns a Promise object that is rejected with a given reason.\r\n     * @param reason The reason why this Promise rejected.\r\n     */\r\n    ESPromise.reject = function (reason) {\r\n        return new ESPromise(function (resolve, reject) {\r\n            reject(reason);\r\n        });\r\n    };\r\n    /**\r\n     * The Promise.all() method returns a single Promise that resolves when all of the promises passed as an iterable\r\n     * have resolved or when the iterable contains no promises. It rejects with the reason of the first promise that\r\n     * rejects. There is no implied ordering in the execution of the array of Promises given. On some computers, they\r\n     * may be executed in parallel, or in some sense concurrently, while on others they may be executed serially. For\r\n     * this reason, there must be no dependency in any Promise on the order of execution of the Promises.\r\n     * This method can be useful for aggregating the results of multiple promises.\r\n     * FulfillmentSection - The returned promise is fulfilled with an array containing all the values of the iterable\r\n     * passed as argument (also non-promise values).\r\n     * If an empty iterable is passed, then this method returns (synchronously) an already resolved promise.\r\n     * If all of the passed-in promises fulfill, or are not promises, the promise returned by Promise.all is fulfilled\r\n     * asynchronously.\r\n     * RejectionSection - If any of the passed-in promises reject, Promise.all asynchronously rejects with the value of\r\n     * the promise that rejected, whether or not the other promises have resolved.\r\n     * @param iterable\r\n     */\r\n    ESPromise.all = function (iterable) {\r\n        if (!iterable || !iterable.length) {\r\n            return;\r\n        }\r\n        return new ESPromise(function (resolve, reject) {\r\n            try {\r\n                var values_1 = [];\r\n                var pending_2 = 0;\r\n                for (var lp = 0; lp < iterable.length; lp++) {\r\n                    var item = iterable[lp];\r\n                    // Quick and direct check for a Promise (will also catch a thenable)\r\n                    if (item && _isFunction(item.then)) {\r\n                        pending_2++;\r\n                        item.then(_createPromiseAllOnResolvedFunction(values_1, lp, function () {\r\n                            if (--pending_2 === 0) {\r\n                                resolve(values_1);\r\n                            }\r\n                        }), reject);\r\n                    }\r\n                    else {\r\n                        values_1[lp] = item;\r\n                    }\r\n                }\r\n                if (pending_2 === 0) {\r\n                    // All promises were either resolved or where not a promise\r\n                    setTimeout(function () {\r\n                        resolve(values_1);\r\n                    }, 0);\r\n                }\r\n            }\r\n            catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * The race function returns a Promise that is settled the same way (and takes the same value) as the first promise\r\n     * that settles amongst the promises of the iterable passed as an argument.\r\n     * If the iterable passed is empty, the promise returned will be forever pending.\r\n     * If the iterable contains one or more non-promise value and/or an already settled promise, then Promise.race will\r\n     * resolve to the first of these values found in the iterable.\r\n     * @param iterable\r\n     */\r\n    ESPromise.race = function (iterable) {\r\n        return new ESPromise(function (resolve, reject) {\r\n            if (!iterable || !iterable.length) {\r\n                return;\r\n            }\r\n            try {\r\n                var _loop_1 = function (lp) {\r\n                    var item = iterable[lp];\r\n                    // Quick and direct check for a Promise (will also catch a thenable)\r\n                    if (item && _isFunction(item.then)) {\r\n                        item.then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        setTimeout(function () {\r\n                            resolve(item);\r\n                        }, 0);\r\n                    }\r\n                };\r\n                for (var lp = 0; lp < iterable.length; lp++) {\r\n                    _loop_1(lp);\r\n                }\r\n            }\r\n            catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    };\r\n// Removed Stub for ESPromise.prototype.then.\r\n// Removed Stub for ESPromise.prototype[\"catch\"].\r\n    return ESPromise;\r\n}());\r\nexport default ESPromise;\r\n//# sourceMappingURL=ESPromise.js.map","/*\n * 1DS JS SDK Core, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\n/**\r\n* ESPromiseScheduler.ts\r\n* @author Nev Wylie (newylie)\r\n* @copyright Microsoft 2019\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport ESPromise from \"./ESPromise\";\r\nimport { _warnToConsole, getGlobal } from \"@microsoft/applicationinsights-core-js\";\r\n/** This is a default timeout that will cause outstanding running promises to be removed/rejected to avoid filling up memory with blocked events */\r\nvar LazyRejectPeriod = 600000; // 10 Minutes\r\n// These are global variables that are shared across ALL instances of the scheduler\r\n/**\r\n * @ignore\r\n */\r\nvar _schedulerId = 0;\r\n/**\r\n * @ignore\r\n */\r\nvar _running = [];\r\n/**\r\n * @ignore\r\n */\r\nvar _waiting = [];\r\n/**\r\n * @ignore\r\n */\r\nvar _timedOut = [];\r\n/**\r\n * @ignore\r\n */\r\nfunction _getTime() {\r\n    return new Date().getTime();\r\n}\r\n/**\r\n * Provides a simple mechanism queueing mechanism for scheduling events based on the ESPromise callbacks, this is used to ensure\r\n * order of async operations that are required to be executed in a specific order.\r\n */\r\nvar ESPromiseScheduler = /** @class */ (function () {\r\n    function ESPromiseScheduler(name, diagLog) {\r\n        var _promiseId = 0;\r\n        var _scheduledName = (name || \"<unnamed>\") + \".\" + _schedulerId;\r\n        _schedulerId++;\r\n        dynamicProto(ESPromiseScheduler, this, function (_this) {\r\n            var _lastEvent = null;\r\n            var _eventCount = 0;\r\n            _this.scheduleEvent = function (startEventAction, eventName, timeout) {\r\n                var uniqueId = _scheduledName + \".\" + _eventCount;\r\n                _eventCount++;\r\n                if (eventName) {\r\n                    uniqueId += \"-(\" + eventName + \")\";\r\n                }\r\n                var uniqueEventId = uniqueId + \"{\" + _promiseId + \"}\";\r\n                _promiseId++;\r\n                // Create the next scheduled event details\r\n                var newScheduledEvent = {\r\n                    evt: null,\r\n                    tm: _getTime(),\r\n                    id: uniqueEventId,\r\n                    isRunning: false,\r\n                    isAborted: false\r\n                };\r\n                if (!_lastEvent) {\r\n                    // We don't have any currently running event, so just start the next event\r\n                    newScheduledEvent.evt = _startWaitingEvent(newScheduledEvent);\r\n                }\r\n                else {\r\n                    // Start a new promise which will wait until all current active events are complete before starting\r\n                    // the new event, it does not resolve this scheduled event until after the new event is resolve to\r\n                    // ensure that all scheduled events are completed in the correct order\r\n                    newScheduledEvent.evt = _waitForPreviousEvent(newScheduledEvent, _lastEvent);\r\n                }\r\n                // Set this new event as the last one, so that any future events will wait for this one\r\n                _lastEvent = newScheduledEvent;\r\n                _lastEvent.evt._schId = uniqueEventId;\r\n                return newScheduledEvent.evt;\r\n                function _abortAndRemoveOldEvents(eventQueue) {\r\n                    var now = _getTime();\r\n                    var expired = now - LazyRejectPeriod;\r\n                    var len = eventQueue.length;\r\n                    var lp = 0;\r\n                    while (lp < len) {\r\n                        var evt = eventQueue[lp];\r\n                        if (evt && evt.tm < expired) {\r\n                            var message = null;\r\n                            if (evt.abort) {\r\n                                message = \"Aborting [\" + evt.id + \"] due to Excessive runtime (\" + (now - evt.tm) + \" ms)\";\r\n                                evt.abort(message);\r\n                            }\r\n                            else {\r\n                                message = \"Removing [\" + evt.id + \"] due to Excessive runtime (\" + (now - evt.tm) + \" ms)\";\r\n                            }\r\n                            _warnLog(message);\r\n                            eventQueue.splice(lp, 1);\r\n                            len--;\r\n                        }\r\n                        else {\r\n                            lp++;\r\n                        }\r\n                    }\r\n                }\r\n                function _cleanup(eventId, completed) {\r\n                    var toQueue = false;\r\n                    var removed = _removeQueuedEvent(_running, eventId);\r\n                    if (!removed) {\r\n                        removed = _removeQueuedEvent(_timedOut, eventId);\r\n                        toQueue = true;\r\n                    }\r\n                    if (removed) {\r\n                        if (removed.to) {\r\n                            // If there was a timeout stop it\r\n                            clearTimeout(removed.to);\r\n                            removed.to = null;\r\n                        }\r\n                        // TODO (newylie): Convert this into reportable metrics\r\n                        var tm = _getTime() - removed.tm;\r\n                        if (completed) {\r\n                            if (!toQueue) {\r\n                                _debugLog(\"Promise [\" + eventId + \"] Complete -- \" + tm + \" ms\");\r\n                            }\r\n                            else {\r\n                                _warnLog(\"Timed out event [\" + eventId + \"] finally complete -- \" + tm + \" ms\");\r\n                            }\r\n                        }\r\n                        else {\r\n                            _timedOut.push(removed);\r\n                            _warnLog(\"Event [\" + eventId + \"] Timed out and removed -- \" + tm + \" ms\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        _debugLog(\"Failed to remove [\" + eventId + \"] from running queue\");\r\n                    }\r\n                    // Also if the last scheduled event was this event then clear it as we are now finished\r\n                    if (_lastEvent && _lastEvent.id === eventId) {\r\n                        _lastEvent = null;\r\n                    }\r\n                    _abortAndRemoveOldEvents(_running);\r\n                    _abortAndRemoveOldEvents(_waiting);\r\n                    _abortAndRemoveOldEvents(_timedOut);\r\n                }\r\n                // Return a callback function that will be called when the waiting promise is resolved or rejected to ensure\r\n                // that any outer promise is also resolved or rejected\r\n                function _removeScheduledEvent(eventId, callback) {\r\n                    return function (value) {\r\n                        _cleanup(eventId, true);\r\n                        callback && callback(value);\r\n                        return value;\r\n                    };\r\n                }\r\n                function _waitForFinalResult(eventId, startResult, schEventResolve, schEventReject) {\r\n                    startResult.then(function (value) {\r\n                        if (value instanceof ESPromise) {\r\n                            // If the result is a promise then this appears to be a chained result, so wait for this promise to complete\r\n                            _debugLog(\"Event [\" + eventId + \"] returned a promise -- waiting\");\r\n                            _waitForFinalResult(eventId, value, schEventResolve, schEventReject);\r\n                            return value;\r\n                        }\r\n                        else {\r\n                            return _removeScheduledEvent(eventId, schEventResolve)(value);\r\n                        }\r\n                    }, _removeScheduledEvent(eventId, schEventReject));\r\n                }\r\n                // Add the passed event to the active event list with resolve and reject callbacks that will remove\r\n                // it from the active event list\r\n                function _createScheduledEvent(eventDetails, startEvent) {\r\n                    var eventId = eventDetails.id;\r\n                    return new ESPromise(function (schEventResolve, schEventReject) {\r\n                        _debugLog(\"Event [\" + eventId + \"] Starting -- waited for \" + (eventDetails.wTm || \"--\") + \" ms\");\r\n                        eventDetails.isRunning = true;\r\n                        eventDetails.abort = function (message) {\r\n                            eventDetails.abort = null;\r\n                            eventDetails.isAborted = true;\r\n                            _cleanup(eventId, false);\r\n                            schEventReject(new Error(message));\r\n                        };\r\n                        var startResult = startEvent(eventId);\r\n                        if (startResult instanceof ESPromise) {\r\n                            if (timeout) {\r\n                                // Note: Only starting a timer if a timeout was specified\r\n                                eventDetails.to = setTimeout(function () {\r\n                                    _cleanup(eventId, false);\r\n                                    // Cause the listeners to reject (Note: We can't actually reject the waiting event)\r\n                                    schEventReject(new Error(\"Timed out after [\" + timeout + \"] ms\"));\r\n                                }, timeout);\r\n                            }\r\n                            _waitForFinalResult(eventId, startResult, function (theResult) {\r\n                                _debugLog(\"Event [\" + eventId + \"] Resolving after \" + (_getTime() - eventDetails.tm) + \" ms\");\r\n                                schEventResolve(theResult);\r\n                            }, schEventReject);\r\n                        }\r\n                        else {\r\n                            // The startEvent didn't return a promise so just return a resolved promise\r\n                            _debugLog(\"Promise [\" + eventId + \"] Auto completed as the start action did not return a promise\");\r\n                            schEventResolve();\r\n                        }\r\n                    });\r\n                }\r\n                function _startWaitingEvent(eventDetails) {\r\n                    var now = _getTime();\r\n                    eventDetails.wTm = now - eventDetails.tm;\r\n                    eventDetails.tm = now;\r\n                    if (eventDetails.isAborted) {\r\n                        return ESPromise.reject(new Error(\"[\" + uniqueId + \"] was aborted\"));\r\n                    }\r\n                    _running.push(eventDetails);\r\n                    return _createScheduledEvent(eventDetails, startEventAction);\r\n                }\r\n                // Start a new promise which will wait until all current active events are complete before starting\r\n                // the new event, it does not resolve this scheduled event until after the new event is resolve to\r\n                // ensure that all scheduled events are completed in the correct order\r\n                function _waitForPreviousEvent(eventDetails, waitForEvent) {\r\n                    var waitEvent = new ESPromise(function (waitResolve, waitReject) {\r\n                        var runTime = _getTime() - waitForEvent.tm;\r\n                        var prevId = waitForEvent.id;\r\n                        _debugLog(\"[\" + uniqueId + \"] is waiting for [\" + prevId + \":\" + runTime + \" ms] to complete before starting -- [\" + _waiting.length + \"] waiting and [\" + _running.length + \"] running\");\r\n                        eventDetails.abort = function (message) {\r\n                            eventDetails.abort = null;\r\n                            _removeQueuedEvent(_waiting, uniqueId);\r\n                            eventDetails.isAborted = true;\r\n                            waitReject(new Error(message));\r\n                        };\r\n                        // Wait for the previous event to complete\r\n                        waitForEvent.evt.then(function (value) {\r\n                            _removeQueuedEvent(_waiting, uniqueId);\r\n                            // Wait for the last event to complete before starting the new one, this ensures the execution\r\n                            // order so that we don't try and remove events that havn't been committed yet\r\n                            _startWaitingEvent(eventDetails).then(waitResolve, waitReject);\r\n                        }, function (reason) {\r\n                            _removeQueuedEvent(_waiting, uniqueId);\r\n                            // Wait for the last event to complete before starting the new one, this ensures the execution\r\n                            // order so that we don't try and remove events that havn't been committed yet\r\n                            _startWaitingEvent(eventDetails).then(waitResolve, waitReject);\r\n                        });\r\n                    });\r\n                    _waiting.push(eventDetails);\r\n                    return waitEvent;\r\n                }\r\n            };\r\n            function _removeQueuedEvent(queue, eventId) {\r\n                for (var lp = 0; lp < queue.length; lp++) {\r\n                    if (queue[lp].id === eventId) {\r\n                        return queue.splice(lp, 1)[0];\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n        function _debugLog(message) {\r\n            // Only log if running within test harness\r\n            var global = getGlobal();\r\n            if (global && global[\"QUnit\"]) {\r\n                // tslint:disable-next-line:no-console\r\n                console && console.log(\"ESPromiseScheduler[\" + _scheduledName + \"] \" + message);\r\n            }\r\n        }\r\n        function _warnLog(message) {\r\n            _warnToConsole(diagLog, \"ESPromiseScheduler[\" + _scheduledName + \"] \" + message);\r\n        }\r\n    }\r\n    ESPromiseScheduler.incomplete = function () {\r\n        return _running;\r\n    };\r\n    ESPromiseScheduler.waitingToStart = function () {\r\n        return _waiting;\r\n    };\r\n// Removed Stub for ESPromiseScheduler.prototype.scheduleEvent.\r\n    return ESPromiseScheduler;\r\n}());\r\nexport default ESPromiseScheduler;\r\n//# sourceMappingURL=ESPromiseScheduler.js.map","/*\n * 1DS JS SDK Core, 3.2.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n * (Microsoft Internal Only)\n */\nimport { isNullOrUndefined, isString, objForEachKey } from \"@microsoft/applicationinsights-core-js\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\nimport { getFieldValueType, isValueAssigned, isValueKind } from \"./Utils\";\r\nvar ValueSanitizer = /** @class */ (function () {\r\n    function ValueSanitizer(fieldSanitizerProvider) {\r\n        var _self = this;\r\n        // To aid with performance this is a lookup map to check if the field value sanitizer supports this field\r\n        var _sanitizerMap = {};\r\n        var _sanitizers = [];\r\n        var _fieldSanitizers = [];\r\n        if (fieldSanitizerProvider) {\r\n            _fieldSanitizers.push(fieldSanitizerProvider);\r\n        }\r\n        function _getFieldSanitizer(path, name) {\r\n            var result;\r\n            var fieldLookup = _sanitizerMap[path];\r\n            if (fieldLookup) {\r\n                result = fieldLookup[name];\r\n            }\r\n            if (!result && result !== null) {\r\n                // Null is a valid result indicating that the value sanitizer does not support this field\r\n                if (isString(path) && isString(name)) {\r\n                    if (_fieldSanitizers.length > 0) {\r\n                        for (var lp = 0; lp < _fieldSanitizers.length; lp++) {\r\n                            if (_fieldSanitizers[lp].handleField(path, name)) {\r\n                                result = {\r\n                                    canHandle: true,\r\n                                    fieldHandler: _fieldSanitizers[lp]\r\n                                };\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (_sanitizers.length === 0) {\r\n                        // Special use-case where there is no sanitizer to pass on to, so just resolving the field\r\n                        // and returning the resulting value (same as sanitizeProperty())\r\n                        result = {\r\n                            canHandle: true\r\n                        };\r\n                    }\r\n                }\r\n                // We still don't have a handler so lets lookup the providers\r\n                if (!result && result !== null) {\r\n                    // Setting the result to null -- which means we and any contained sanitizers can't handle this field\r\n                    result = null;\r\n                    for (var lp = 0; lp < _sanitizers.length; lp++) {\r\n                        if (_sanitizers[lp].handleField(path, name)) {\r\n                            result = {\r\n                                canHandle: true,\r\n                                handler: _sanitizers[lp],\r\n                                fieldHandler: null\r\n                            };\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (!fieldLookup) {\r\n                    fieldLookup = _sanitizerMap[path] = {};\r\n                }\r\n                fieldLookup[name] = result;\r\n            }\r\n            return result;\r\n        }\r\n        _self.addSanitizer = function (newSanitizer) {\r\n            if (newSanitizer) {\r\n                _sanitizers.push(newSanitizer);\r\n                // Invalidate any previously mapped fields\r\n                _sanitizerMap = {};\r\n            }\r\n        };\r\n        _self.addFieldSanitizer = function (fieldSanitizer) {\r\n            if (fieldSanitizer) {\r\n                _fieldSanitizers.push(fieldSanitizer);\r\n                // Invalidate any previously mapped fields\r\n                _sanitizerMap = {};\r\n            }\r\n        };\r\n        _self.handleField = function (path, name) {\r\n            var mapValue = _getFieldSanitizer(path, name);\r\n            return mapValue ? mapValue.canHandle : false;\r\n        };\r\n        _self.value = function (path, name, value, stringifyObjects) {\r\n            var mapValue = _getFieldSanitizer(path, name);\r\n            if (mapValue && mapValue.canHandle) {\r\n                if (!mapValue || !mapValue.canHandle) {\r\n                    return null;\r\n                }\r\n                if (mapValue.handler) {\r\n                    // This value sanitizer can't handle this field so pass it only the next one\r\n                    return mapValue.handler.value(path, name, value, stringifyObjects);\r\n                }\r\n                // Check that property is valid\r\n                if (!isString(name) || isNullOrUndefined(value) || value === STR_EMPTY) {\r\n                    return null;\r\n                }\r\n                var property = null;\r\n                var fieldType = getFieldValueType(value);\r\n                if ((fieldType & 8192 /* FieldValueSanitizerType.EventProperty */) === 8192 /* FieldValueSanitizerType.EventProperty */) {\r\n                    var subType = fieldType & ~8192 /* FieldValueSanitizerType.EventProperty */;\r\n                    property = value;\r\n                    if (!isValueAssigned(property.value) ||\r\n                        (subType !== 1 /* FieldValueSanitizerType.String */ &&\r\n                            subType !== 2 /* FieldValueSanitizerType.Number */ &&\r\n                            subType !== 3 /* FieldValueSanitizerType.Boolean */ &&\r\n                            (subType & 4096 /* FieldValueSanitizerType.Array */) !== 4096 /* FieldValueSanitizerType.Array */)) {\r\n                        // Not a supported IEventProperty type to be able to sanitize\r\n                        return null;\r\n                    }\r\n                }\r\n                else if (fieldType === 1 /* FieldValueSanitizerType.String */ ||\r\n                    fieldType === 2 /* FieldValueSanitizerType.Number */ ||\r\n                    fieldType === 3 /* FieldValueSanitizerType.Boolean */ ||\r\n                    (fieldType & 4096 /* FieldValueSanitizerType.Array */) === 4096 /* FieldValueSanitizerType.Array */) {\r\n                    // If the property isn't IEventProperty (and is either string, number, boolean or array), convert it into one.\r\n                    property = _convertToProperty(path, name, value);\r\n                }\r\n                else if (fieldType === 4 /* FieldValueSanitizerType.Object */) {\r\n                    property = _convertToProperty(path, name, !!stringifyObjects ? JSON.stringify(value) : value);\r\n                }\r\n                if (property) {\r\n                    return _handleProperty(mapValue, path, name, fieldType, property, stringifyObjects);\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        _self.property = function (path, name, property, stringifyObjects) {\r\n            var mapValue = _getFieldSanitizer(path, name);\r\n            if (!mapValue || !mapValue.canHandle) {\r\n                return null;\r\n            }\r\n            // Check that property is valid\r\n            if (!isString(name) || isNullOrUndefined(property) || !isValueAssigned(property.value)) {\r\n                return null;\r\n            }\r\n            var fieldType = getFieldValueType(property.value);\r\n            if (fieldType === 0 /* FieldValueSanitizerType.NotSet */) {\r\n                // Not a supported field that we can sanitize or serialize\r\n                return null;\r\n            }\r\n            return _handleProperty(mapValue, path, name, fieldType, property, stringifyObjects);\r\n        };\r\n        function _handleProperty(mapValue, path, name, fieldType, property, stringifyObjects) {\r\n            if (mapValue.handler) {\r\n                // This value sanitizer can't handle this field so pass it only the next one\r\n                return mapValue.handler.property(path, name, property, stringifyObjects);\r\n            }\r\n            // If either pii or cc is set convert value to string (since only string pii/cc is allowed).\r\n            // If the value is a complex type like an array that can't be converted to string we will drop\r\n            // the property.\r\n            if (!isNullOrUndefined(property.kind)) {\r\n                if ((fieldType & 4096 /* FieldValueSanitizerType.Array */) === 4096 /* FieldValueSanitizerType.Array */ || !isValueKind(property.kind)) {\r\n                    return null;\r\n                }\r\n                // Convert the value to a string and assign back to the original value\r\n                property.value = property.value.toString();\r\n            }\r\n            return _callFieldSanitizer(mapValue.fieldHandler, path, name, fieldType, property);\r\n        }\r\n        function _convertToProperty(path, name, value) {\r\n            if (isValueAssigned(value)) {\r\n                return { value: value };\r\n            }\r\n            return null;\r\n        }\r\n        function _callFieldSanitizer(fieldProvider, path, name, theType, property) {\r\n            if (property && fieldProvider) {\r\n                var sanitizer = fieldProvider.getSanitizer(path, name, theType, property.kind, property.propertyType);\r\n                if (sanitizer) {\r\n                    // This is where we the field will call the handler to \"scrub\" the value. This the primary hook for the ClientHashing Plugin to\r\n                    // be able to apply the hashFunc() / Sha256 conversion of the properties value\r\n                    if (theType === 4 /* FieldValueSanitizerType.Object */) {\r\n                        // Special case of an embedded object (ext.metadata, data.properties)\r\n                        var newValue_1 = {};\r\n                        var propValue = property.value;\r\n                        objForEachKey(propValue, function (propKey, theValue) {\r\n                            var newPath = path + \".\" + name;\r\n                            if (isValueAssigned(theValue)) {\r\n                                var newProp = _convertToProperty(newPath, propKey, theValue);\r\n                                newProp = _callFieldSanitizer(fieldProvider, newPath, propKey, getFieldValueType(theValue), newProp);\r\n                                if (newProp) {\r\n                                    newValue_1[propKey] = newProp.value;\r\n                                }\r\n                            }\r\n                        });\r\n                        property.value = newValue_1;\r\n                    }\r\n                    else {\r\n                        var details = {\r\n                            path: path,\r\n                            name: name,\r\n                            type: theType,\r\n                            prop: property,\r\n                            sanitizer: _self\r\n                        };\r\n                        property = sanitizer.call(_self, details);\r\n                    }\r\n                }\r\n            }\r\n            return property;\r\n        }\r\n    }\r\n    ValueSanitizer.getFieldType = getFieldValueType;\r\n    return ValueSanitizer;\r\n}());\r\nexport { ValueSanitizer };\r\n//# sourceMappingURL=ValueSanitizer.js.map","/*\n * Application Insights JavaScript SDK - Core, 2.8.6\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\"use strict\";\r\nexport var MinChannelPriorty = 100;\r\n//# sourceMappingURL=IChannelControls.js.map"],"sourceRoot":""}